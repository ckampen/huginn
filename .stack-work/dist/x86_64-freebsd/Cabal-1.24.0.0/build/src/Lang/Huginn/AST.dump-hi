
==================== FINAL INTERFACE ====================
2016-12-20 10:55:22.065666675 UTC

interface huginn-0.1.0.0-H85hIuVlPwkFCtmCyCbyhs:Lang.Huginn.AST 8001
  interface hash: 57f1558e45a017ca8d0382f80c38aceb
  ABI hash: 0243c00dd0692625e27a72e542d234fd
  export-list hash: 747e9c538254d3fed821e0bf29d1ee0d
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 7394dc3b6fb488d376ebe2129549d4a4
  sig of: Nothing
  used TH splices: False
  where
exports:
  Lang.Huginn.AST.Error{Lang.Huginn.AST.DivByZero Lang.Huginn.AST.NaN Lang.Huginn.AST.Parse Lang.Huginn.AST.Unbound Lang.Huginn.AST.Uncomparable Lang.Huginn.AST.Unimplemented Lang.Huginn.AST.Unsupported}
  Lang.Huginn.AST.Expr{Lang.Huginn.AST.Arr Lang.Huginn.AST.Bl Lang.Huginn.AST.Bop Lang.Huginn.AST.Closure Lang.Huginn.AST.Const Lang.Huginn.AST.Eadd Lang.Huginn.AST.Ediv Lang.Huginn.AST.Eeq Lang.Huginn.AST.Egt Lang.Huginn.AST.Egte Lang.Huginn.AST.Elt Lang.Huginn.AST.Elte Lang.Huginn.AST.Emul Lang.Huginn.AST.Epow Lang.Huginn.AST.Err Lang.Huginn.AST.Esub Lang.Huginn.AST.If Lang.Huginn.AST.Let Lang.Huginn.AST.Num Lang.Huginn.AST.Str Lang.Huginn.AST.Uop Lang.Huginn.AST.Var}
  Lang.Huginn.AST.Operant{Lang.Huginn.AST.Add Lang.Huginn.AST.Div Lang.Huginn.AST.EQUALS Lang.Huginn.AST.Error Lang.Huginn.AST.Mul Lang.Huginn.AST.POW Lang.Huginn.AST.Sub}
module dependencies:
package dependencies: base-4.9.0.0* ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
orphans: base-4.9.0.0:GHC.Base base-4.9.0.0:GHC.Float
family instance modules: base-4.9.0.0:Control.Applicative
                         base-4.9.0.0:Data.Either base-4.9.0.0:Data.Functor.Const
                         base-4.9.0.0:Data.Monoid base-4.9.0.0:Data.Type.Equality
                         base-4.9.0.0:GHC.Generics base-4.9.0.0:GHC.IO.Exception
                         base-4.9.0.0:GHC.TypeLits
import  -/  base-4.9.0.0:GHC.Base 8ed3be81c0707b322f975a84ae1bb816
import  -/  base-4.9.0.0:GHC.Read 817c914615ac8e308afc0c675fb3f671
import  -/  base-4.9.0.0:GHC.Show 952347a6ab730bcb25c0854d8bc6ca51
import  -/  base-4.9.0.0:Prelude b9bddb97799837fe67a8d00939a5b6c3
import  -/  base-4.9.0.0:Text.ParserCombinators.ReadPrec 9512e2f4b227f507f87a150887202aed
import  -/  base-4.9.0.0:Text.Read.Lex fe3dd7b823826bf6870140c5363f9596
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
48054415dcd221f71bd6e008d30311d6
  $fReadError :: GHC.Read.Read Lang.Huginn.AST.Error
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Lang.Huginn.AST.Error
                  Lang.Huginn.AST.$fReadError_$creadsPrec
                  Lang.Huginn.AST.$fReadError_$creadList
                  Lang.Huginn.AST.$fReadError_$creadPrec
                  Lang.Huginn.AST.$fReadError_$creadListPrec -}
48054415dcd221f71bd6e008d30311d6
  $fReadError1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([Lang.Huginn.AST.Error] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (eta :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta1 :: [Lang.Huginn.AST.Error]
                            -> Text.ParserCombinators.ReadP.P b) ->
                 GHC.Read.$wlist
                   @ Lang.Huginn.AST.Error
                   Lang.Huginn.AST.$fReadError2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <Lang.Huginn.AST.Error>_R))
                   @ b
                   eta1) -}
48054415dcd221f71bd6e008d30311d6
  $fReadError10 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec Lang.Huginn.AST.Error)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec Lang.Huginn.AST.Error)
                   Lang.Huginn.AST.$fReadError11
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec
                           Lang.Huginn.AST.Error))) -}
48054415dcd221f71bd6e008d30311d6
  $fReadError11 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec Lang.Huginn.AST.Error)
  {- Strictness: m,
     Unfolding: ((Lang.Huginn.AST.$fReadError13,
                  Lang.Huginn.AST.$fReadError12
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <Lang.Huginn.AST.Error>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <Lang.Huginn.AST.Error>_R))))) -}
48054415dcd221f71bd6e008d30311d6
  $fReadError12 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (Lang.Huginn.AST.Error -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: Lang.Huginn.AST.Error
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta Lang.Huginn.AST.Unsupported) -}
4b8370a29ec72cda748e4f645aee33eb
  $fReadError13 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Unsupported"#) -}
48054415dcd221f71bd6e008d30311d6
  $fReadError14 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec Lang.Huginn.AST.Error)
  {- Strictness: m,
     Unfolding: ((Lang.Huginn.AST.$fReadError16,
                  Lang.Huginn.AST.$fReadError15
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <Lang.Huginn.AST.Error>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <Lang.Huginn.AST.Error>_R))))) -}
48054415dcd221f71bd6e008d30311d6
  $fReadError15 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (Lang.Huginn.AST.Error -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: Lang.Huginn.AST.Error
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta Lang.Huginn.AST.Uncomparable) -}
ce10fbddb2d3dc9cdaa6d4a13d8c2cdc
  $fReadError16 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Uncomparable"#) -}
48054415dcd221f71bd6e008d30311d6
  $fReadError17 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec Lang.Huginn.AST.Error)
  {- Strictness: m,
     Unfolding: ((Lang.Huginn.AST.$fReadError19,
                  Lang.Huginn.AST.$fReadError18
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <Lang.Huginn.AST.Error>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <Lang.Huginn.AST.Error>_R))))) -}
48054415dcd221f71bd6e008d30311d6
  $fReadError18 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (Lang.Huginn.AST.Error -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: Lang.Huginn.AST.Error
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta Lang.Huginn.AST.Parse) -}
5ca4d07d57b724d771d54ea0482eae31
  $fReadError19 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Parse"#) -}
48054415dcd221f71bd6e008d30311d6
  $fReadError2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP Lang.Huginn.AST.Error
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ Lang.Huginn.AST.Error
                   Lang.Huginn.AST.$fReadError3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                       <Lang.Huginn.AST.Error>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                  <Lang.Huginn.AST.Error>_R)))) -}
48054415dcd221f71bd6e008d30311d6
  $fReadError20 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec Lang.Huginn.AST.Error)
  {- Strictness: m,
     Unfolding: ((Lang.Huginn.AST.$fReadError22,
                  Lang.Huginn.AST.$fReadError21
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <Lang.Huginn.AST.Error>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <Lang.Huginn.AST.Error>_R))))) -}
48054415dcd221f71bd6e008d30311d6
  $fReadError21 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (Lang.Huginn.AST.Error -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: Lang.Huginn.AST.Error
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta Lang.Huginn.AST.DivByZero) -}
c2fcb698e06f1aa674131a732fbe8834
  $fReadError22 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "DivByZero"#) -}
48054415dcd221f71bd6e008d30311d6
  $fReadError23 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec Lang.Huginn.AST.Error)
  {- Strictness: m,
     Unfolding: ((Lang.Huginn.AST.$fReadError25,
                  Lang.Huginn.AST.$fReadError24
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <Lang.Huginn.AST.Error>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <Lang.Huginn.AST.Error>_R))))) -}
48054415dcd221f71bd6e008d30311d6
  $fReadError24 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (Lang.Huginn.AST.Error -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: Lang.Huginn.AST.Error
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta Lang.Huginn.AST.NaN) -}
99a6288db0d907596d85cfbeff807391
  $fReadError25 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NaN"#) -}
48054415dcd221f71bd6e008d30311d6
  $fReadError26 ::
    Text.ParserCombinators.ReadP.P [Lang.Huginn.AST.Error]
  {- Unfolding: (GHC.Read.$wlist
                   @ Lang.Huginn.AST.Error
                   Lang.Huginn.AST.$fReadError2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <Lang.Huginn.AST.Error>_R))
                   @ [Lang.Huginn.AST.Error]
                   (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                      @ [Lang.Huginn.AST.Error])) -}
48054415dcd221f71bd6e008d30311d6
  $fReadError3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (Lang.Huginn.AST.Error -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U(U)><L,U>,
     Unfolding: (\ (n :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: Lang.Huginn.AST.Error
                           -> Text.ParserCombinators.ReadP.P b) ->
                 Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                   @ b
                   (GHC.Read.choose2
                      @ Lang.Huginn.AST.Error
                      Lang.Huginn.AST.$fReadError6
                      n
                      @ b
                      eta)
                   (case n of wild { GHC.Types.I# x ->
                    let {
                      karg :: Text.ParserCombinators.ReadP.P b
                      = case GHC.Prim.tagToEnum#
                               @ GHC.Types.Bool
                               (GHC.Prim.<=# x 10#) of wild2 {
                          GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                          GHC.Types.True
                          -> let {
                               lvl80 :: Text.ParserCombinators.ReadP.P b
                               = let {
                                   lvl81 :: Text.ParserCombinators.ReadP.P b
                                   = GHC.Read.$woptional2
                                       @ b
                                       (\ (a1 :: GHC.Base.String) ->
                                        eta (Lang.Huginn.AST.Unimplemented a1))
                                 } in
                                 Text.Read.Lex.expect2
                                   @ b
                                   (\ (a1 :: Text.Read.Lex.Lexeme) ->
                                    case a1 of wild1 {
                                      DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                                      Text.Read.Lex.Ident a2
                                      -> case GHC.Base.eqString
                                                a2
                                                Lang.Huginn.AST.$fReadError5 of wild3 {
                                           GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                                           GHC.Types.True -> lvl81 } })
                             } in
                             let {
                               k :: () -> Text.ParserCombinators.ReadP.P b
                                 {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                                    Unfolding: InlineRule (1, True, True) (\ (w4 :: ()) -> lvl80) -}
                               = \ (w4 :: ()) -> lvl80
                             } in
                             Text.ParserCombinators.ReadP.Look
                               @ b
                               (\ (a :: GHC.Base.String) ->
                                (Text.ParserCombinators.ReadP.skipSpaces_skip a)
                                  `cast`
                                (Text.ParserCombinators.ReadP.N:ReadP[0] <()>_R)
                                  @ b
                                  k) }
                    } in
                    case GHC.Prim.tagToEnum#
                           @ GHC.Types.Bool
                           (GHC.Prim.<=# x 10#) of wild2 {
                      GHC.Types.False
                      -> Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                           @ b
                           (Text.ParserCombinators.ReadP.Fail @ b)
                           karg
                      GHC.Types.True
                      -> let {
                           lvl80 :: Text.ParserCombinators.ReadP.P b
                           = let {
                               lvl81 :: Text.ParserCombinators.ReadP.P b
                               = GHC.Read.$woptional2
                                   @ b
                                   (\ (a1 :: GHC.Base.String) -> eta (Lang.Huginn.AST.Unbound a1))
                             } in
                             Text.Read.Lex.expect2
                               @ b
                               (\ (a1 :: Text.Read.Lex.Lexeme) ->
                                case a1 of wild1 {
                                  DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                                  Text.Read.Lex.Ident a2
                                  -> case GHC.Base.eqString
                                            a2
                                            Lang.Huginn.AST.$fReadError4 of wild3 {
                                       GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                                       GHC.Types.True -> lvl81 } })
                         } in
                         let {
                           k :: () -> Text.ParserCombinators.ReadP.P b
                             {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                                Unfolding: InlineRule (1, True, True) (\ (w4 :: ()) -> lvl80) -}
                           = \ (w4 :: ()) -> lvl80
                         } in
                         Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                           @ b
                           (Text.ParserCombinators.ReadP.Look
                              @ b
                              (\ (a :: GHC.Base.String) ->
                               (Text.ParserCombinators.ReadP.skipSpaces_skip a)
                                 `cast`
                               (Text.ParserCombinators.ReadP.N:ReadP[0] <()>_R)
                                 @ b
                                 k))
                           karg } })) -}
54169f303312335ac269d70c4c86978b
  $fReadError4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Unbound"#) -}
3cbb21b6a5da7edf1404ee2b39de0bde
  $fReadError5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Unimplemented"#) -}
48054415dcd221f71bd6e008d30311d6
  $fReadError6 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec Lang.Huginn.AST.Error)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec Lang.Huginn.AST.Error)
                   Lang.Huginn.AST.$fReadError23
                   Lang.Huginn.AST.$fReadError7) -}
48054415dcd221f71bd6e008d30311d6
  $fReadError7 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec Lang.Huginn.AST.Error)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec Lang.Huginn.AST.Error)
                   Lang.Huginn.AST.$fReadError20
                   Lang.Huginn.AST.$fReadError8) -}
48054415dcd221f71bd6e008d30311d6
  $fReadError8 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec Lang.Huginn.AST.Error)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec Lang.Huginn.AST.Error)
                   Lang.Huginn.AST.$fReadError17
                   Lang.Huginn.AST.$fReadError9) -}
48054415dcd221f71bd6e008d30311d6
  $fReadError9 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec Lang.Huginn.AST.Error)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec Lang.Huginn.AST.Error)
                   Lang.Huginn.AST.$fReadError14
                   Lang.Huginn.AST.$fReadError10) -}
48054415dcd221f71bd6e008d30311d6
  $fReadError_$creadList ::
    Text.ParserCombinators.ReadP.ReadS [Lang.Huginn.AST.Error]
  {- Arity: 1,
     Unfolding: (Text.ParserCombinators.ReadP.run
                   @ [Lang.Huginn.AST.Error]
                   Lang.Huginn.AST.$fReadError26) -}
48054415dcd221f71bd6e008d30311d6
  $fReadError_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [Lang.Huginn.AST.Error]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                Lang.Huginn.AST.$fReadError1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                    <[Lang.Huginn.AST.Error]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                               <[Lang.Huginn.AST.Error]>_R))) -}
48054415dcd221f71bd6e008d30311d6
  $fReadError_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec Lang.Huginn.AST.Error
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                Lang.Huginn.AST.$fReadError2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                          <Lang.Huginn.AST.Error>_R)) -}
48054415dcd221f71bd6e008d30311d6
  $fReadError_$creadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS Lang.Huginn.AST.Error
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (eta :: GHC.Types.Int) ->
                 Text.ParserCombinators.ReadP.run
                   @ Lang.Huginn.AST.Error
                   ((GHC.Read.$fReadDouble10
                       @ Lang.Huginn.AST.Error
                       Lang.Huginn.AST.$fReadError3
                         `cast`
                       (Trans
                            (<Text.ParserCombinators.ReadPrec.Prec>_R
                             ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                           <Lang.Huginn.AST.Error>_R))
                            (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                      <Lang.Huginn.AST.Error>_R)))
                       eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.N:ReadP[0] <Lang.Huginn.AST.Error>_R)
                      @ Lang.Huginn.AST.Error
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ Lang.Huginn.AST.Error))) -}
0b058677be4ec97ab4103cbe49e2227b
  $fReadExpr :: GHC.Read.Read Lang.Huginn.AST.Expr
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Lang.Huginn.AST.Expr
                  Lang.Huginn.AST.$fReadExpr_$creadsPrec
                  Lang.Huginn.AST.$fReadExpr_$creadList
                  Lang.Huginn.AST.$fReadExpr_$creadPrec
                  Lang.Huginn.AST.$fReadExpr_$creadListPrec -}
0b058677be4ec97ab4103cbe49e2227b
  $fReadExpr1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([Lang.Huginn.AST.Expr] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (eta :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta1 :: [Lang.Huginn.AST.Expr]
                            -> Text.ParserCombinators.ReadP.P b) ->
                 GHC.Read.$wlist
                   @ Lang.Huginn.AST.Expr
                   Lang.Huginn.AST.$fReadExpr2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <Lang.Huginn.AST.Expr>_R))
                   @ b
                   eta1) -}
0b058677be4ec97ab4103cbe49e2227b
  $fReadExpr2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP Lang.Huginn.AST.Expr
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ Lang.Huginn.AST.Expr
                   Lang.Huginn.AST.$fReadExpr3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                       <Lang.Huginn.AST.Expr>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                  <Lang.Huginn.AST.Expr>_R)))) -}
0b058677be4ec97ab4103cbe49e2227b
  $fReadExpr3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (Lang.Huginn.AST.Expr -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <S(S),1*U(U)><L,C(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (w1 :: Lang.Huginn.AST.Expr -> Text.ParserCombinators.ReadP.P b) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Lang.Huginn.AST.$w$creadPrec ww1 @ b w1 }) -}
0b058677be4ec97ab4103cbe49e2227b
  $fReadExpr4 ::
    Text.ParserCombinators.ReadP.P [Lang.Huginn.AST.Expr]
  {- Unfolding: (GHC.Read.$wlist
                   @ Lang.Huginn.AST.Expr
                   Lang.Huginn.AST.$fReadExpr2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <Lang.Huginn.AST.Expr>_R))
                   @ [Lang.Huginn.AST.Expr]
                   (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                      @ [Lang.Huginn.AST.Expr])) -}
0b058677be4ec97ab4103cbe49e2227b
  $fReadExpr_$creadList ::
    Text.ParserCombinators.ReadP.ReadS [Lang.Huginn.AST.Expr]
  {- Arity: 1,
     Unfolding: (Text.ParserCombinators.ReadP.run
                   @ [Lang.Huginn.AST.Expr]
                   Lang.Huginn.AST.$fReadExpr4) -}
0b058677be4ec97ab4103cbe49e2227b
  $fReadExpr_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [Lang.Huginn.AST.Expr]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                Lang.Huginn.AST.$fReadExpr1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                    <[Lang.Huginn.AST.Expr]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                               <[Lang.Huginn.AST.Expr]>_R))) -}
0b058677be4ec97ab4103cbe49e2227b
  $fReadExpr_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec Lang.Huginn.AST.Expr
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                Lang.Huginn.AST.$fReadExpr2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                          <Lang.Huginn.AST.Expr>_R)) -}
0b058677be4ec97ab4103cbe49e2227b
  $fReadExpr_$creadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS Lang.Huginn.AST.Expr
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (eta :: GHC.Types.Int) ->
                 Text.ParserCombinators.ReadP.run
                   @ Lang.Huginn.AST.Expr
                   ((Lang.Huginn.AST.$fReadExpr2 eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.N:ReadP[0] <Lang.Huginn.AST.Expr>_R)
                      @ Lang.Huginn.AST.Expr
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ Lang.Huginn.AST.Expr))) -}
09214a4114acbf7b00306d5f88e25cce
  $fReadOperant :: GHC.Read.Read Lang.Huginn.AST.Operant
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Lang.Huginn.AST.Operant
                  Lang.Huginn.AST.$fReadOperant_$creadsPrec
                  Lang.Huginn.AST.$fReadOperant_$creadList
                  Lang.Huginn.AST.$fReadOperant_$creadPrec
                  Lang.Huginn.AST.$fReadOperant_$creadListPrec -}
09214a4114acbf7b00306d5f88e25cce
  $fReadOperant1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([Lang.Huginn.AST.Operant] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (eta :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta1 :: [Lang.Huginn.AST.Operant]
                            -> Text.ParserCombinators.ReadP.P b) ->
                 GHC.Read.$wlist
                   @ Lang.Huginn.AST.Operant
                   Lang.Huginn.AST.$fReadOperant2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <Lang.Huginn.AST.Operant>_R))
                   @ b
                   eta1) -}
09214a4114acbf7b00306d5f88e25cce
  $fReadOperant10 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec Lang.Huginn.AST.Operant)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec Lang.Huginn.AST.Operant)
                   Lang.Huginn.AST.$fReadOperant11
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec
                           Lang.Huginn.AST.Operant))) -}
09214a4114acbf7b00306d5f88e25cce
  $fReadOperant11 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec Lang.Huginn.AST.Operant)
  {- Strictness: m,
     Unfolding: ((Lang.Huginn.AST.$fReadOperant13,
                  Lang.Huginn.AST.$fReadOperant12
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <Lang.Huginn.AST.Operant>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <Lang.Huginn.AST.Operant>_R))))) -}
09214a4114acbf7b00306d5f88e25cce
  $fReadOperant12 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (Lang.Huginn.AST.Operant -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: Lang.Huginn.AST.Operant
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta Lang.Huginn.AST.POW) -}
5bcb0d4f311ba039b1c4f7448fbfbe6c
  $fReadOperant13 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "POW"#) -}
09214a4114acbf7b00306d5f88e25cce
  $fReadOperant14 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec Lang.Huginn.AST.Operant)
  {- Strictness: m,
     Unfolding: ((Lang.Huginn.AST.$fReadOperant16,
                  Lang.Huginn.AST.$fReadOperant15
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <Lang.Huginn.AST.Operant>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <Lang.Huginn.AST.Operant>_R))))) -}
09214a4114acbf7b00306d5f88e25cce
  $fReadOperant15 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (Lang.Huginn.AST.Operant -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: Lang.Huginn.AST.Operant
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta Lang.Huginn.AST.EQUALS) -}
d75c6d28cebadbbc827472211096e3dc
  $fReadOperant16 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "EQUALS"#) -}
09214a4114acbf7b00306d5f88e25cce
  $fReadOperant17 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec Lang.Huginn.AST.Operant)
  {- Strictness: m,
     Unfolding: ((Lang.Huginn.AST.$fReadOperant19,
                  Lang.Huginn.AST.$fReadOperant18
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <Lang.Huginn.AST.Operant>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <Lang.Huginn.AST.Operant>_R))))) -}
09214a4114acbf7b00306d5f88e25cce
  $fReadOperant18 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (Lang.Huginn.AST.Operant -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: Lang.Huginn.AST.Operant
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta Lang.Huginn.AST.Sub) -}
911987da41679789516ccb60291f8a30
  $fReadOperant19 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Sub"#) -}
09214a4114acbf7b00306d5f88e25cce
  $fReadOperant2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP Lang.Huginn.AST.Operant
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ Lang.Huginn.AST.Operant
                   Lang.Huginn.AST.$fReadOperant3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                       <Lang.Huginn.AST.Operant>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                  <Lang.Huginn.AST.Operant>_R)))) -}
09214a4114acbf7b00306d5f88e25cce
  $fReadOperant20 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec Lang.Huginn.AST.Operant)
  {- Strictness: m,
     Unfolding: ((Lang.Huginn.AST.$fReadOperant22,
                  Lang.Huginn.AST.$fReadOperant21
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <Lang.Huginn.AST.Operant>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <Lang.Huginn.AST.Operant>_R))))) -}
09214a4114acbf7b00306d5f88e25cce
  $fReadOperant21 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (Lang.Huginn.AST.Operant -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: Lang.Huginn.AST.Operant
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta Lang.Huginn.AST.Add) -}
ec11202081de03a05e2b26fdfddc521d
  $fReadOperant22 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Add"#) -}
09214a4114acbf7b00306d5f88e25cce
  $fReadOperant23 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec Lang.Huginn.AST.Operant)
  {- Strictness: m,
     Unfolding: ((Lang.Huginn.AST.$fReadOperant25,
                  Lang.Huginn.AST.$fReadOperant24
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <Lang.Huginn.AST.Operant>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <Lang.Huginn.AST.Operant>_R))))) -}
09214a4114acbf7b00306d5f88e25cce
  $fReadOperant24 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (Lang.Huginn.AST.Operant -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: Lang.Huginn.AST.Operant
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta Lang.Huginn.AST.Div) -}
2a6634f436c03af335ad84dd925403c1
  $fReadOperant25 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Div"#) -}
09214a4114acbf7b00306d5f88e25cce
  $fReadOperant26 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec Lang.Huginn.AST.Operant)
  {- Strictness: m,
     Unfolding: ((Lang.Huginn.AST.$fReadOperant28,
                  Lang.Huginn.AST.$fReadOperant27
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <Lang.Huginn.AST.Operant>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <Lang.Huginn.AST.Operant>_R))))) -}
09214a4114acbf7b00306d5f88e25cce
  $fReadOperant27 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (Lang.Huginn.AST.Operant -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: Lang.Huginn.AST.Operant
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta Lang.Huginn.AST.Mul) -}
e0410e2b23698c483a19e66154e518b8
  $fReadOperant28 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Mul"#) -}
09214a4114acbf7b00306d5f88e25cce
  $fReadOperant29 ::
    Text.ParserCombinators.ReadP.P [Lang.Huginn.AST.Operant]
  {- Unfolding: (GHC.Read.$wlist
                   @ Lang.Huginn.AST.Operant
                   Lang.Huginn.AST.$fReadOperant2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <Lang.Huginn.AST.Operant>_R))
                   @ [Lang.Huginn.AST.Operant]
                   (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                      @ [Lang.Huginn.AST.Operant])) -}
09214a4114acbf7b00306d5f88e25cce
  $fReadOperant3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (Lang.Huginn.AST.Operant -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U(U)><L,U>,
     Unfolding: (\ (n :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: Lang.Huginn.AST.Operant
                           -> Text.ParserCombinators.ReadP.P b) ->
                 Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                   @ b
                   (GHC.Read.choose2
                      @ Lang.Huginn.AST.Operant
                      Lang.Huginn.AST.$fReadOperant5
                      n
                      @ b
                      eta)
                   (case n of wild { GHC.Types.I# x ->
                    case GHC.Prim.tagToEnum#
                           @ GHC.Types.Bool
                           (GHC.Prim.<=# x 10#) of wild2 {
                      GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                      GHC.Types.True
                      -> let {
                           lvl80 :: Text.ParserCombinators.ReadP.P b
                           = let {
                               lvl81 :: Text.ParserCombinators.ReadP.P b
                               = GHC.Read.$woptional2
                                   @ b
                                   (\ (a1 :: GHC.Base.String) -> eta (Lang.Huginn.AST.Error a1))
                             } in
                             Text.Read.Lex.expect2
                               @ b
                               (\ (a1 :: Text.Read.Lex.Lexeme) ->
                                case a1 of wild1 {
                                  DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                                  Text.Read.Lex.Ident a2
                                  -> case GHC.Base.eqString
                                            a2
                                            Lang.Huginn.AST.$fReadOperant4 of wild3 {
                                       GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                                       GHC.Types.True -> lvl81 } })
                         } in
                         let {
                           k :: () -> Text.ParserCombinators.ReadP.P b
                             {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                                Unfolding: InlineRule (1, True, True) (\ (w4 :: ()) -> lvl80) -}
                           = \ (w4 :: ()) -> lvl80
                         } in
                         Text.ParserCombinators.ReadP.Look
                           @ b
                           (\ (a :: GHC.Base.String) ->
                            (Text.ParserCombinators.ReadP.skipSpaces_skip a)
                              `cast`
                            (Text.ParserCombinators.ReadP.N:ReadP[0] <()>_R)
                              @ b
                              k) } })) -}
14d998da17171a90a199caffeb68d6e9
  $fReadOperant4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Error"#) -}
09214a4114acbf7b00306d5f88e25cce
  $fReadOperant5 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec Lang.Huginn.AST.Operant)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec Lang.Huginn.AST.Operant)
                   Lang.Huginn.AST.$fReadOperant26
                   Lang.Huginn.AST.$fReadOperant6) -}
09214a4114acbf7b00306d5f88e25cce
  $fReadOperant6 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec Lang.Huginn.AST.Operant)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec Lang.Huginn.AST.Operant)
                   Lang.Huginn.AST.$fReadOperant23
                   Lang.Huginn.AST.$fReadOperant7) -}
09214a4114acbf7b00306d5f88e25cce
  $fReadOperant7 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec Lang.Huginn.AST.Operant)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec Lang.Huginn.AST.Operant)
                   Lang.Huginn.AST.$fReadOperant20
                   Lang.Huginn.AST.$fReadOperant8) -}
09214a4114acbf7b00306d5f88e25cce
  $fReadOperant8 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec Lang.Huginn.AST.Operant)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec Lang.Huginn.AST.Operant)
                   Lang.Huginn.AST.$fReadOperant17
                   Lang.Huginn.AST.$fReadOperant9) -}
09214a4114acbf7b00306d5f88e25cce
  $fReadOperant9 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec Lang.Huginn.AST.Operant)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec Lang.Huginn.AST.Operant)
                   Lang.Huginn.AST.$fReadOperant14
                   Lang.Huginn.AST.$fReadOperant10) -}
09214a4114acbf7b00306d5f88e25cce
  $fReadOperant_$creadList ::
    Text.ParserCombinators.ReadP.ReadS [Lang.Huginn.AST.Operant]
  {- Arity: 1,
     Unfolding: (Text.ParserCombinators.ReadP.run
                   @ [Lang.Huginn.AST.Operant]
                   Lang.Huginn.AST.$fReadOperant29) -}
09214a4114acbf7b00306d5f88e25cce
  $fReadOperant_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [Lang.Huginn.AST.Operant]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                Lang.Huginn.AST.$fReadOperant1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                    <[Lang.Huginn.AST.Operant]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                               <[Lang.Huginn.AST.Operant]>_R))) -}
09214a4114acbf7b00306d5f88e25cce
  $fReadOperant_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec Lang.Huginn.AST.Operant
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                Lang.Huginn.AST.$fReadOperant2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                          <Lang.Huginn.AST.Operant>_R)) -}
09214a4114acbf7b00306d5f88e25cce
  $fReadOperant_$creadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS Lang.Huginn.AST.Operant
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (eta :: GHC.Types.Int) ->
                 Text.ParserCombinators.ReadP.run
                   @ Lang.Huginn.AST.Operant
                   ((GHC.Read.$fReadDouble10
                       @ Lang.Huginn.AST.Operant
                       Lang.Huginn.AST.$fReadOperant3
                         `cast`
                       (Trans
                            (<Text.ParserCombinators.ReadPrec.Prec>_R
                             ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                           <Lang.Huginn.AST.Operant>_R))
                            (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                      <Lang.Huginn.AST.Operant>_R)))
                       eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.N:ReadP[0]
                         <Lang.Huginn.AST.Operant>_R)
                      @ Lang.Huginn.AST.Operant
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ Lang.Huginn.AST.Operant))) -}
48054415dcd221f71bd6e008d30311d6
  $fShowError :: GHC.Show.Show Lang.Huginn.AST.Error
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Lang.Huginn.AST.Error
                  Lang.Huginn.AST.$fShowError_$cshowsPrec
                  Lang.Huginn.AST.$fShowError_$cshow
                  Lang.Huginn.AST.$fShowError_$cshowList -}
48054415dcd221f71bd6e008d30311d6
  $fShowError1 :: Lang.Huginn.AST.Error -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (Lang.Huginn.AST.$fShowError_$cshowsPrec
                   Lang.Huginn.AST.$fShowError2) -}
7ab1287e7e46c3753c1e870a6b671682
  $fShowError2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
babc9346f888fb76097aea07fa60e7ec
  $fShowError3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Unimplemented "#) -}
c0f4a5aa33d19826abfc3da9fc702652
  $fShowError4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Unbound "#) -}
d2a58893cfbf0e8adb508d889b696740
  $fShowError5 :: [GHC.Types.Char]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   GHC.Show.shows8
                   (GHC.Types.[] @ GHC.Types.Char)) -}
48054415dcd221f71bd6e008d30311d6
  $fShowError_$cshow :: Lang.Huginn.AST.Error -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (x :: Lang.Huginn.AST.Error) ->
                 case x of wild {
                   Lang.Huginn.AST.NaN -> Lang.Huginn.AST.$fReadError25
                   Lang.Huginn.AST.DivByZero -> Lang.Huginn.AST.$fReadError22
                   Lang.Huginn.AST.Unbound b1
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Lang.Huginn.AST.$fShowError4
                        (GHC.Types.:
                           @ GHC.Types.Char
                           GHC.Show.shows8
                           (GHC.Show.showLitString b1 Lang.Huginn.AST.$fShowError5))
                   Lang.Huginn.AST.Parse -> Lang.Huginn.AST.$fReadError19
                   Lang.Huginn.AST.Uncomparable -> Lang.Huginn.AST.$fReadError16
                   Lang.Huginn.AST.Unsupported -> Lang.Huginn.AST.$fReadError13
                   Lang.Huginn.AST.Unimplemented b1
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Lang.Huginn.AST.$fShowError3
                        (GHC.Types.:
                           @ GHC.Types.Char
                           GHC.Show.shows8
                           (GHC.Show.showLitString b1 Lang.Huginn.AST.$fShowError5)) }) -}
48054415dcd221f71bd6e008d30311d6
  $fShowError_$cshowList :: [Lang.Huginn.AST.Error] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Lang.Huginn.AST.Error
                   Lang.Huginn.AST.$fShowError1) -}
48054415dcd221f71bd6e008d30311d6
  $fShowError_$cshowsPrec ::
    GHC.Types.Int -> Lang.Huginn.AST.Error -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ (ds :: GHC.Types.Int)
                   (ds1 :: Lang.Huginn.AST.Error)
                   (eta :: GHC.Base.String) ->
                 case ds1 of wild {
                   Lang.Huginn.AST.NaN
                   -> GHC.Base.++ @ GHC.Types.Char Lang.Huginn.AST.$fReadError25 eta
                   Lang.Huginn.AST.DivByZero
                   -> GHC.Base.++ @ GHC.Types.Char Lang.Huginn.AST.$fReadError22 eta
                   Lang.Huginn.AST.Unbound b1
                   -> case ds of wild1 { GHC.Types.I# x ->
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11#) of wild2 {
                        GHC.Types.False
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             Lang.Huginn.AST.$fShowError4
                             (GHC.Types.:
                                @ GHC.Types.Char
                                GHC.Show.shows8
                                (GHC.Show.showLitString
                                   b1
                                   (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 eta)))
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Lang.Huginn.AST.$fShowError4
                                (GHC.Types.:
                                   @ GHC.Types.Char
                                   GHC.Show.shows8
                                   (GHC.Show.showLitString
                                      b1
                                      (GHC.Types.:
                                         @ GHC.Types.Char
                                         GHC.Show.shows8
                                         (GHC.Types.: @ GHC.Types.Char GHC.Show.shows6 eta))))) } }
                   Lang.Huginn.AST.Parse
                   -> GHC.Base.++ @ GHC.Types.Char Lang.Huginn.AST.$fReadError19 eta
                   Lang.Huginn.AST.Uncomparable
                   -> GHC.Base.++ @ GHC.Types.Char Lang.Huginn.AST.$fReadError16 eta
                   Lang.Huginn.AST.Unsupported
                   -> GHC.Base.++ @ GHC.Types.Char Lang.Huginn.AST.$fReadError13 eta
                   Lang.Huginn.AST.Unimplemented b1
                   -> case ds of wild1 { GHC.Types.I# x ->
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11#) of wild2 {
                        GHC.Types.False
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             Lang.Huginn.AST.$fShowError3
                             (GHC.Types.:
                                @ GHC.Types.Char
                                GHC.Show.shows8
                                (GHC.Show.showLitString
                                   b1
                                   (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 eta)))
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Lang.Huginn.AST.$fShowError3
                                (GHC.Types.:
                                   @ GHC.Types.Char
                                   GHC.Show.shows8
                                   (GHC.Show.showLitString
                                      b1
                                      (GHC.Types.:
                                         @ GHC.Types.Char
                                         GHC.Show.shows8
                                         (GHC.Types.:
                                            @ GHC.Types.Char
                                            GHC.Show.shows6
                                            eta))))) } } }) -}
0b058677be4ec97ab4103cbe49e2227b
  $fShowExpr :: GHC.Show.Show Lang.Huginn.AST.Expr
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Lang.Huginn.AST.Expr
                  Lang.Huginn.AST.$fShowExpr_$cshowsPrec
                  Lang.Huginn.AST.$fShowExpr_$cshow
                  Lang.Huginn.AST.$fShowExpr_$cshowList -}
0b058677be4ec97ab4103cbe49e2227b
  $fShowExpr1 :: Lang.Huginn.AST.Expr -> GHC.Show.ShowS
  {- Arity: 1 -}
0b058677be4ec97ab4103cbe49e2227b
  $fShowExpr_$cshow :: Lang.Huginn.AST.Expr -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Lang.Huginn.AST.Expr) ->
                 Lang.Huginn.AST.$fShowExpr_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
0b058677be4ec97ab4103cbe49e2227b
  $fShowExpr_$cshowList :: [Lang.Huginn.AST.Expr] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Lang.Huginn.AST.Expr
                   Lang.Huginn.AST.$fShowExpr1) -}
0b058677be4ec97ab4103cbe49e2227b
  $fShowExpr_$cshowsPrec ::
    GHC.Types.Int -> Lang.Huginn.AST.Expr -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: Lang.Huginn.AST.Expr) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Lang.Huginn.AST.$w$cshowsPrec ww1 w1 }) -}
09214a4114acbf7b00306d5f88e25cce
  $fShowOperant :: GHC.Show.Show Lang.Huginn.AST.Operant
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Lang.Huginn.AST.Operant
                  Lang.Huginn.AST.$fShowOperant_$cshowsPrec
                  Lang.Huginn.AST.$fShowOperant_$cshow
                  Lang.Huginn.AST.$fShowOperant_$cshowList -}
09214a4114acbf7b00306d5f88e25cce
  $fShowOperant1 :: Lang.Huginn.AST.Operant -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (Lang.Huginn.AST.$fShowOperant_$cshowsPrec
                   Lang.Huginn.AST.$fShowError2) -}
d3567429a6cc56646397fac03004b464
  $fShowOperant2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Error "#) -}
09214a4114acbf7b00306d5f88e25cce
  $fShowOperant_$cshow :: Lang.Huginn.AST.Operant -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (x :: Lang.Huginn.AST.Operant) ->
                 case x of wild {
                   Lang.Huginn.AST.Mul -> Lang.Huginn.AST.$fReadOperant28
                   Lang.Huginn.AST.Div -> Lang.Huginn.AST.$fReadOperant25
                   Lang.Huginn.AST.Add -> Lang.Huginn.AST.$fReadOperant22
                   Lang.Huginn.AST.Sub -> Lang.Huginn.AST.$fReadOperant19
                   Lang.Huginn.AST.EQUALS -> Lang.Huginn.AST.$fReadOperant16
                   Lang.Huginn.AST.POW -> Lang.Huginn.AST.$fReadOperant13
                   Lang.Huginn.AST.Error b1
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Lang.Huginn.AST.$fShowOperant2
                        (GHC.Types.:
                           @ GHC.Types.Char
                           GHC.Show.shows8
                           (GHC.Show.showLitString b1 Lang.Huginn.AST.$fShowError5)) }) -}
09214a4114acbf7b00306d5f88e25cce
  $fShowOperant_$cshowList ::
    [Lang.Huginn.AST.Operant] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Lang.Huginn.AST.Operant
                   Lang.Huginn.AST.$fShowOperant1) -}
09214a4114acbf7b00306d5f88e25cce
  $fShowOperant_$cshowsPrec ::
    GHC.Types.Int -> Lang.Huginn.AST.Operant -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ (ds :: GHC.Types.Int)
                   (ds1 :: Lang.Huginn.AST.Operant)
                   (eta :: GHC.Base.String) ->
                 case ds1 of wild {
                   Lang.Huginn.AST.Mul
                   -> GHC.Base.++ @ GHC.Types.Char Lang.Huginn.AST.$fReadOperant28 eta
                   Lang.Huginn.AST.Div
                   -> GHC.Base.++ @ GHC.Types.Char Lang.Huginn.AST.$fReadOperant25 eta
                   Lang.Huginn.AST.Add
                   -> GHC.Base.++ @ GHC.Types.Char Lang.Huginn.AST.$fReadOperant22 eta
                   Lang.Huginn.AST.Sub
                   -> GHC.Base.++ @ GHC.Types.Char Lang.Huginn.AST.$fReadOperant19 eta
                   Lang.Huginn.AST.EQUALS
                   -> GHC.Base.++ @ GHC.Types.Char Lang.Huginn.AST.$fReadOperant16 eta
                   Lang.Huginn.AST.POW
                   -> GHC.Base.++ @ GHC.Types.Char Lang.Huginn.AST.$fReadOperant13 eta
                   Lang.Huginn.AST.Error b1
                   -> case ds of wild1 { GHC.Types.I# x ->
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11#) of wild2 {
                        GHC.Types.False
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             Lang.Huginn.AST.$fShowOperant2
                             (GHC.Types.:
                                @ GHC.Types.Char
                                GHC.Show.shows8
                                (GHC.Show.showLitString
                                   b1
                                   (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 eta)))
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Lang.Huginn.AST.$fShowOperant2
                                (GHC.Types.:
                                   @ GHC.Types.Char
                                   GHC.Show.shows8
                                   (GHC.Show.showLitString
                                      b1
                                      (GHC.Types.:
                                         @ GHC.Types.Char
                                         GHC.Show.shows8
                                         (GHC.Types.:
                                            @ GHC.Types.Char
                                            GHC.Show.shows6
                                            eta))))) } } }) -}
35a6a879bea48d1a41fe3c044ea3e6f2
  $tc'Add :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7626764820036511344##
                   13812356499104033058##
                   Lang.Huginn.AST.$trModule
                   Lang.Huginn.AST.$tc'Add1) -}
c07064140c14882bdeb6478248bc4658
  $tc'Add1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Add"#) -}
8eeb56328ec0e89fc2bb30c1e7e6fb87
  $tc'Arr :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13947753109158764247##
                   10511130716340930028##
                   Lang.Huginn.AST.$trModule
                   Lang.Huginn.AST.$tc'Arr1) -}
17bcd8dca791a8795ffab38bc5d89e7f
  $tc'Arr1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Arr"#) -}
4a752e24651babb1893289ba00a91e24
  $tc'Bl :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1593077953903053527##
                   14400099735435105671##
                   Lang.Huginn.AST.$trModule
                   Lang.Huginn.AST.$tc'Bl1) -}
efa25e5e4d4f929284c8fa9492e96e62
  $tc'Bl1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Bl"#) -}
f0f5b9ccca09f8eae094ce7cbdf46697
  $tc'Bop :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   136592163400533094##
                   1219776497002437089##
                   Lang.Huginn.AST.$trModule
                   Lang.Huginn.AST.$tc'Bop1) -}
cd0284bcc0de6862e2854010a7d146dc
  $tc'Bop1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Bop"#) -}
adcdfd8dd8e35567aea0abb83a25dbd8
  $tc'Closure :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7359592849621847945##
                   4598186627365051222##
                   Lang.Huginn.AST.$trModule
                   Lang.Huginn.AST.$tc'Closure1) -}
261345b34a0d8dbf4205714c183a71e6
  $tc'Closure1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Closure"#) -}
8c5abba872a481933ca0975cc5331866
  $tc'Const :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2819070624264642575##
                   2349660286130558893##
                   Lang.Huginn.AST.$trModule
                   Lang.Huginn.AST.$tc'Const1) -}
c13be020ddc2321062a9e6573f927551
  $tc'Const1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Const"#) -}
1e6d37e6d85896c1083157e27b97e384
  $tc'Div :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14397636554765887635##
                   18210050978295592154##
                   Lang.Huginn.AST.$trModule
                   Lang.Huginn.AST.$tc'Div1) -}
c926c12cde5ae9162ec631a3d77f0dc9
  $tc'Div1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Div"#) -}
dd44f71ee5822c9044ac704ba5502fd4
  $tc'DivByZero :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5819301290660301444##
                   13288677658309185502##
                   Lang.Huginn.AST.$trModule
                   Lang.Huginn.AST.$tc'DivByZero1) -}
eacdd14c619722129b1a0ebbf623d87a
  $tc'DivByZero1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'DivByZero"#) -}
38c3c4b872cefb80e572127fda119e15
  $tc'EQUALS :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4731200030106485314##
                   5412096563565665599##
                   Lang.Huginn.AST.$trModule
                   Lang.Huginn.AST.$tc'EQUALS1) -}
594f13fabc38c30ad9c8558fd283a590
  $tc'EQUALS1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'EQUALS"#) -}
5649abb310de5b16e8ae069e944edac3
  $tc'Eadd :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15048388184592847310##
                   3923428221530957749##
                   Lang.Huginn.AST.$trModule
                   Lang.Huginn.AST.$tc'Eadd1) -}
a4c88c7d98d5de72542959e964a78873
  $tc'Eadd1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Eadd"#) -}
34de6e5ae20ab21401fd7eef247e9bb7
  $tc'Ediv :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9809878897062991543##
                   2919150832131871950##
                   Lang.Huginn.AST.$trModule
                   Lang.Huginn.AST.$tc'Ediv1) -}
d766dcb6b26ab8091a1c9e2b0a2060b2
  $tc'Ediv1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Ediv"#) -}
592f40c1819c2d118c3e0d395728de7a
  $tc'Eeq :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7916431314181298473##
                   2725289283257970105##
                   Lang.Huginn.AST.$trModule
                   Lang.Huginn.AST.$tc'Eeq1) -}
308fe7e3beb06fb390fa039430761e28
  $tc'Eeq1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Eeq"#) -}
28ffadfdf89fcfe41ff4536f70de14a9
  $tc'Egt :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1026265346284795297##
                   15645960611484908262##
                   Lang.Huginn.AST.$trModule
                   Lang.Huginn.AST.$tc'Egt1) -}
60311fbdd7beec666526e29ddefe44ad
  $tc'Egt1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Egt"#) -}
311a9da7dc8662b7341ae5a6ee7642b4
  $tc'Egte :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11967171768772634993##
                   12394693747778026197##
                   Lang.Huginn.AST.$trModule
                   Lang.Huginn.AST.$tc'Egte1) -}
dea6abcec940f3a2e4db7fd089b56070
  $tc'Egte1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Egte"#) -}
a1338bbcb86650434c1fe70eca0ba74a
  $tc'Elt :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   18042937304477428163##
                   12862004568131768986##
                   Lang.Huginn.AST.$trModule
                   Lang.Huginn.AST.$tc'Elt1) -}
395c02f1dd07c17085b7354770f512b4
  $tc'Elt1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Elt"#) -}
5caba640a0ecb998c50fa22b0296a86b
  $tc'Elte :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15648211203203307800##
                   16680606139130184512##
                   Lang.Huginn.AST.$trModule
                   Lang.Huginn.AST.$tc'Elte1) -}
0ca0a89c4fc0f2100abb4283e9a71276
  $tc'Elte1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Elte"#) -}
bbcb184954634286bf9f60c67f295db0
  $tc'Emul :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6539107366349020184##
                   5412721982816063033##
                   Lang.Huginn.AST.$trModule
                   Lang.Huginn.AST.$tc'Emul1) -}
f190e1f3c7e9b63ea2bbcb30af6a470f
  $tc'Emul1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Emul"#) -}
7aa16bad89c9bada8a6d3be699ffb764
  $tc'Epow :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3924904076829546592##
                   14749766976953660380##
                   Lang.Huginn.AST.$trModule
                   Lang.Huginn.AST.$tc'Epow1) -}
b286e6eb60e6a6b1c13879ab9b5db789
  $tc'Epow1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Epow"#) -}
283beb226f3944a2a56f8c475c8ba5a1
  $tc'Err :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14535398474677349535##
                   14342818828906746137##
                   Lang.Huginn.AST.$trModule
                   Lang.Huginn.AST.$tc'Err1) -}
81e467c346f5fb9286bd0f1691c79267
  $tc'Err1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Err"#) -}
7997ee12f481027d99a8d74183ffda6a
  $tc'Error :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10732842876902376428##
                   16431471338653143500##
                   Lang.Huginn.AST.$trModule
                   Lang.Huginn.AST.$tc'Error1) -}
a91b086ac18ec75850af8442e89e6e8a
  $tc'Error1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Error"#) -}
2ee9c526f28e53aa4e7fb93348878f3a
  $tc'Esub :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7394900192312939704##
                   230762456785082001##
                   Lang.Huginn.AST.$trModule
                   Lang.Huginn.AST.$tc'Esub1) -}
7c985ba8cddce5fc558fc5f962cfc02c
  $tc'Esub1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Esub"#) -}
3527d06c3ea9035a549216c20b869041
  $tc'If :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11870272614890931724##
                   5008079141513723310##
                   Lang.Huginn.AST.$trModule
                   Lang.Huginn.AST.$tc'If1) -}
6d1805eaf54c4cfbfcc893feba2ec858
  $tc'If1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'If"#) -}
d271a174475698ce1d82fb207becc496
  $tc'Let :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7721377490830821748##
                   1762069472822510655##
                   Lang.Huginn.AST.$trModule
                   Lang.Huginn.AST.$tc'Let1) -}
3ea1ee11320fdccfa6ad7dc56ba9e696
  $tc'Let1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Let"#) -}
49889bf533ed4270e204dbf86e4a5347
  $tc'Mul :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5001454538659737913##
                   11378204009888633844##
                   Lang.Huginn.AST.$trModule
                   Lang.Huginn.AST.$tc'Mul1) -}
62f6ea93db6852920d580c097b3d4bb5
  $tc'Mul1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Mul"#) -}
c210879ff19e05773e85f579abfa80a5
  $tc'NaN :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10470461371843691657##
                   1077803556509230573##
                   Lang.Huginn.AST.$trModule
                   Lang.Huginn.AST.$tc'NaN1) -}
9aff90d626c97a09d5c85c9fea9fffba
  $tc'NaN1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'NaN"#) -}
3bab7073c15a7080f8fcc84ad5143927
  $tc'Num :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16909830815876388727##
                   7886138998514628159##
                   Lang.Huginn.AST.$trModule
                   Lang.Huginn.AST.$tc'Num1) -}
8e807591ba4bd25240d3d0572b5523db
  $tc'Num1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Num"#) -}
06cd4e879dff04a130b848582d12b29f
  $tc'POW :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13574560481112238501##
                   3368768136209870478##
                   Lang.Huginn.AST.$trModule
                   Lang.Huginn.AST.$tc'POW1) -}
a9814cecccdd8ebdd809c6132e1915af
  $tc'POW1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'POW"#) -}
ab0081ea7b06ff1fb00493d7df6f0abf
  $tc'Parse :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4173882673387592422##
                   13298402111187116728##
                   Lang.Huginn.AST.$trModule
                   Lang.Huginn.AST.$tc'Parse1) -}
885b8ab5668b10051cfd98e52d32b958
  $tc'Parse1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Parse"#) -}
775419397882fe4fc7010ea09bf023b7
  $tc'Str :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13131451753889234088##
                   4142021817513855683##
                   Lang.Huginn.AST.$trModule
                   Lang.Huginn.AST.$tc'Str1) -}
5166b909946c308d41da132137e68f20
  $tc'Str1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Str"#) -}
2f1e16c065fd2c8f0e21b1d86f0b7335
  $tc'Sub :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16801360451315210659##
                   15940056635084851898##
                   Lang.Huginn.AST.$trModule
                   Lang.Huginn.AST.$tc'Sub1) -}
4aff948786c760018c1e9d5e6133dcc0
  $tc'Sub1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Sub"#) -}
eee0376f588330864aaccbce54ccf477
  $tc'Unbound :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8559057141384569065##
                   16199067796977482818##
                   Lang.Huginn.AST.$trModule
                   Lang.Huginn.AST.$tc'Unbound1) -}
5cdf74338fb81ed270774e000a45a099
  $tc'Unbound1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Unbound"#) -}
1489906180064693e9e42713ac0d7f12
  $tc'Uncomparable :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13756835689474474581##
                   8154743192793225026##
                   Lang.Huginn.AST.$trModule
                   Lang.Huginn.AST.$tc'Uncomparable1) -}
7812609ec01512df4099dd9f5b04548b
  $tc'Uncomparable1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Uncomparable"#) -}
5c756cd25db8eafa6fb9f3c8bc5d9df7
  $tc'Unimplemented :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1157338136287436559##
                   11792199327333753152##
                   Lang.Huginn.AST.$trModule
                   Lang.Huginn.AST.$tc'Unimplemented1) -}
9e6987faac11291e1b24caf552d22b52
  $tc'Unimplemented1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Unimplemented"#) -}
16b9b1037fdb8e0654fb18e9a610a156
  $tc'Unsupported :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13979356824490843757##
                   14087472230184386233##
                   Lang.Huginn.AST.$trModule
                   Lang.Huginn.AST.$tc'Unsupported1) -}
80b00cd45c83543334c62fb2478a32a7
  $tc'Unsupported1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Unsupported"#) -}
0673196c5a9dc31064f62afd6bc17339
  $tc'Uop :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11070507366834590333##
                   9359974890284350076##
                   Lang.Huginn.AST.$trModule
                   Lang.Huginn.AST.$tc'Uop1) -}
92387f1605fe1016774a037f3e52d404
  $tc'Uop1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Uop"#) -}
e3391934a2c3e4cfb40dbb1c8e719264
  $tc'Var :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4035252170272058768##
                   12188737146040200036##
                   Lang.Huginn.AST.$trModule
                   Lang.Huginn.AST.$tc'Var1) -}
2d95c20f8fdbb402a234238c91d5a1c5
  $tc'Var1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Var"#) -}
a1b7578c9cbc07c3ed0e94ce2b2dded8
  $tcError :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1026023324469759520##
                   16081319675494998236##
                   Lang.Huginn.AST.$trModule
                   Lang.Huginn.AST.$tcError1) -}
92f52875f1a19d4c782582559a48b324
  $tcError1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Error"#) -}
ab8ceeb205658a5beacc56c1ede29ec5
  $tcExpr :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10925916749041840439##
                   4101980554249339093##
                   Lang.Huginn.AST.$trModule
                   Lang.Huginn.AST.$tcExpr1) -}
081ed75cbd2876c7c005fcbee8509e23
  $tcExpr1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Expr"#) -}
9056b1ebc49ccc31a1c5b11127aca620
  $tcOperant :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16182806228930868423##
                   4015199449843915211##
                   Lang.Huginn.AST.$trModule
                   Lang.Huginn.AST.$tcOperant1) -}
fb348e52ae74dbb89208eea80ff1f905
  $tcOperant1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Operant"#) -}
139574b6d37740d3511cd83439e1c986
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Lang.Huginn.AST.$trModule2
                   Lang.Huginn.AST.$trModule1) -}
4a743ccdb6d55b0cd69e02058f709567
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Lang.Huginn.AST"#) -}
e1ec809d4e739a5f15430aa51910da62
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "huginn-0.1.0.0-H85hIuVlPwkFCtmCyCbyhs"#) -}
0b058677be4ec97ab4103cbe49e2227b
  $w$creadPrec ::
    GHC.Prim.Int#
    -> forall b.
       (Lang.Huginn.AST.Expr -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <S,U><L,C(U)>, Inline: [0] -}
0b058677be4ec97ab4103cbe49e2227b
  $w$cshowsPrec ::
    GHC.Prim.Int# -> Lang.Huginn.AST.Expr -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,U><S,1*U>, Inline: [0] -}
48054415dcd221f71bd6e008d30311d6
  data Error
    = NaN
    | DivByZero
    | Unbound GHC.Base.String
    | Parse
    | Uncomparable
    | Unsupported
    | Unimplemented GHC.Base.String
0b058677be4ec97ab4103cbe49e2227b
  data Expr
    = Uop (Lang.Huginn.AST.Operant, Lang.Huginn.AST.Expr)
    | Bop (Lang.Huginn.AST.Expr, Lang.Huginn.AST.Operant,
           Lang.Huginn.AST.Expr)
    | Num GHC.Types.Double
    | Const GHC.Types.Double
    | Str GHC.Base.String
    | Bl GHC.Types.Bool
    | If (Lang.Huginn.AST.Expr, Lang.Huginn.AST.Expr,
          Lang.Huginn.AST.Expr)
    | Var GHC.Base.String
    | Arr [Lang.Huginn.AST.Expr]
    | Closure Lang.Huginn.AST.Expr
    | Err Lang.Huginn.AST.Error
    | Eeq Lang.Huginn.AST.Expr Lang.Huginn.AST.Expr
    | Epow Lang.Huginn.AST.Expr Lang.Huginn.AST.Expr
    | Emul Lang.Huginn.AST.Expr Lang.Huginn.AST.Expr
    | Ediv Lang.Huginn.AST.Expr Lang.Huginn.AST.Expr
    | Eadd Lang.Huginn.AST.Expr Lang.Huginn.AST.Expr
    | Esub Lang.Huginn.AST.Expr Lang.Huginn.AST.Expr
    | Elt Lang.Huginn.AST.Expr Lang.Huginn.AST.Expr
    | Elte Lang.Huginn.AST.Expr Lang.Huginn.AST.Expr
    | Egt Lang.Huginn.AST.Expr Lang.Huginn.AST.Expr
    | Egte Lang.Huginn.AST.Expr Lang.Huginn.AST.Expr
    | Let GHC.Base.String Lang.Huginn.AST.Expr Lang.Huginn.AST.Expr
09214a4114acbf7b00306d5f88e25cce
  data Operant
    = Mul | Div | Add | Sub | EQUALS | POW | Error GHC.Base.String
instance [safe] GHC.Read.Read [Lang.Huginn.AST.Error]
  = Lang.Huginn.AST.$fReadError
instance [safe] GHC.Read.Read [Lang.Huginn.AST.Expr]
  = Lang.Huginn.AST.$fReadExpr
instance [safe] GHC.Read.Read [Lang.Huginn.AST.Operant]
  = Lang.Huginn.AST.$fReadOperant
instance [safe] GHC.Show.Show [Lang.Huginn.AST.Error]
  = Lang.Huginn.AST.$fShowError
instance [safe] GHC.Show.Show [Lang.Huginn.AST.Expr]
  = Lang.Huginn.AST.$fShowExpr
instance [safe] GHC.Show.Show [Lang.Huginn.AST.Operant]
  = Lang.Huginn.AST.$fShowOperant
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

