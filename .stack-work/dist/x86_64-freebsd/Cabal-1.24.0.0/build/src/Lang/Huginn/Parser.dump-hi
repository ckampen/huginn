
==================== FINAL INTERFACE ====================
2016-12-20 10:55:23.694019161 UTC

interface huginn-0.1.0.0-H85hIuVlPwkFCtmCyCbyhs:Lang.Huginn.Parser 8001
  interface hash: 8e4bf3bf5aef760fbd011368c3c35277
  ABI hash: 9c5c708b4e966cba050f912d0005866c
  export-list hash: 1bf2bbf337f2d2cc9863147ba8953514
  orphan hash: aa89dcbff0cb6febd5c7b309b09d0601
  flag hash: 7f405772238a791ccb8c62556f6afed1
  sig of: Nothing
  used TH splices: False
  where
exports:
  Lang.Huginn.Parser.array
  Lang.Huginn.Parser.binary
  Lang.Huginn.Parser.bla
  Lang.Huginn.Parser.bool
  Lang.Huginn.Parser.brackets
  Lang.Huginn.Parser.closure
  Lang.Huginn.Parser.code
  Lang.Huginn.Parser.comma
  Lang.Huginn.Parser.commaSep
  Lang.Huginn.Parser.double
  Lang.Huginn.Parser.elseStatement
  Lang.Huginn.Parser.expr
  Lang.Huginn.Parser.exprPython
  Lang.Huginn.Parser.file
  Lang.Huginn.Parser.formula
  Lang.Huginn.Parser.ifStatement
  Lang.Huginn.Parser.integer
  Lang.Huginn.Parser.lexeme
  Lang.Huginn.Parser.lexer
  Lang.Huginn.Parser.line
  Lang.Huginn.Parser.mkFnRec
  Lang.Huginn.Parser.mkInstanceRow
  Lang.Huginn.Parser.mkRow
  Lang.Huginn.Parser.mkTestRow
  Lang.Huginn.Parser.natural
  Lang.Huginn.Parser.noZero
  Lang.Huginn.Parser.notTabDelim
  Lang.Huginn.Parser.number
  Lang.Huginn.Parser.parens
  Lang.Huginn.Parser.parseExpr
  Lang.Huginn.Parser.parseTSVFunctions
  Lang.Huginn.Parser.parseTSVInstances
  Lang.Huginn.Parser.parseTSVTestValues
  Lang.Huginn.Parser.pythonIf
  Lang.Huginn.Parser.readDouble
  Lang.Huginn.Parser.readExpr
  Lang.Huginn.Parser.replace
  Lang.Huginn.Parser.reservedOp
  Lang.Huginn.Parser.statement
  Lang.Huginn.Parser.stringLiteral
  Lang.Huginn.Parser.stxArray
  Lang.Huginn.Parser.stxBool
  Lang.Huginn.Parser.stxLet
  Lang.Huginn.Parser.stxNum
  Lang.Huginn.Parser.stxString
  Lang.Huginn.Parser.stxVar
  Lang.Huginn.Parser.table
  Lang.Huginn.Parser.term
  Lang.Huginn.Parser.testParser
  Lang.Huginn.Parser.todouble
  Lang.Huginn.Parser.tsvCell
  Lang.Huginn.Parser.tsvFunction
  Lang.Huginn.Parser.tsvFunctionsFile
  Lang.Huginn.Parser.tsvInstanceFile
  Lang.Huginn.Parser.tsvInstanceLine
  Lang.Huginn.Parser.tsvTestValuesFile
  Lang.Huginn.Parser.tsvTestValuesLine
  Lang.Huginn.Parser.tsvToken
  Lang.Huginn.Parser.var
  Lang.Huginn.Parser.word
  Lang.Huginn.Parser.ws
module dependencies: Lang.Huginn.AST Lang.Huginn.Eval
package dependencies: array-0.5.1.1@array-0.5.1.1 base-4.9.0.0*
                      binary-0.8.3.0@binary-0.8.3.0
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0 ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1 mtl-2.2.1@mtl-2.2.1-6qsR1PHUy5lL47Hpoa4jCM
                      parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X
                      text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s
                      transformers-0.5.2.0@transformers-0.5.2.0
orphans: base-4.9.0.0:GHC.Base base-4.9.0.0:GHC.Float
         binary-0.8.3.0@binary-0.8.3.0:Data.Binary.Generic
         bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Builder
         text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s:Data.Text
         text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s:Data.Text.Lazy
         text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s:Data.Text.Show
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
family instance modules: base-4.9.0.0:Control.Applicative
                         base-4.9.0.0:Data.Complex base-4.9.0.0:Data.Either
                         base-4.9.0.0:Data.Functor.Const base-4.9.0.0:Data.Functor.Identity
                         base-4.9.0.0:Data.List.NonEmpty base-4.9.0.0:Data.Monoid
                         base-4.9.0.0:Data.Semigroup base-4.9.0.0:Data.Type.Equality
                         base-4.9.0.0:Data.Version base-4.9.0.0:Data.Void
                         base-4.9.0.0:GHC.Exts base-4.9.0.0:GHC.Generics
                         base-4.9.0.0:GHC.IO.Exception base-4.9.0.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s:Data.Text
                         text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s:Data.Text.Lazy
import  -/  base-4.9.0.0:Control.Applicative 7728b33d6969dce59e89474349eb1397
import  -/  base-4.9.0.0:Data.Either bd9f099b82d4ed2d98c56d7144ac6957
import  -/  base-4.9.0.0:Data.Functor 6fc476505db88d678632a4a838125f13
import  -/  base-4.9.0.0:Data.Semigroup 056371ce789bdfe8de829d3c46741740
import  -/  base-4.9.0.0:GHC.Base 8ed3be81c0707b322f975a84ae1bb816
import  -/  base-4.9.0.0:GHC.Num 48f506a8f4ecf06285d0a0706594dcc0
import  -/  base-4.9.0.0:GHC.Real 08bf4acb5f2508f89d6fbcd57fe232e9
import  -/  base-4.9.0.0:Prelude b9bddb97799837fe67a8d00939a5b6c3
import  -/  base-4.9.0.0:Text.Read 9c1be14f7e5eac8b18bcb566c5763677
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  Lang.Huginn.AST 0243c00dd0692625e27a72e542d234fd
  exports: 747e9c538254d3fed821e0bf29d1ee0d
  Arr 6845395044d7a294c7dedbc11ccf9b8d
  Bl a3dbad024fcf7e48cacc512fa1da496a
  Closure 7fda796bacdd3c3861952a2b13c9a519
  Eadd 5105f238f8b43e4d674d9b1438934631
  Ediv 6d390f67728d94f74d9e1f0a117366b4
  Eeq 00a067a70bb9a06f5af968e0a68345d8
  Egt 251afe361c2c3178a9d62d031c92da48
  Egte 056f071ad4f26bcac41194fd1c2dcdfb
  Elt 70e8418ea4dd3e6c6ed990192c075064
  Elte f3b0cc4ce83d4f073c9de48b43d9d2a0
  Emul e8bcd3ab28f3d18298d73e6ccc7a9b58
  Epow a3a03a5c8049fcad092b7e1df81212b2
  Err ef753ef416829e59702c7adcd2a9e2fd
  Esub 1ed10b7ae6f1f4866ddf647dd75a51d6
  Expr 0b058677be4ec97ab4103cbe49e2227b
  If 78b232430c9185531ab4918cca69ff8e
  Let 8dd2e82a89ee32adaeb62394c4cafbff
  NaN a1c93bf37215a9198a1e6aceffd9f91e
  Num 7be033c728cd6bab83df86572bd1154c
  Str 66413e3baa5365d844ef175c52371044
  Var ff292b2a0eab3757473b0f45880dfa21
import  -/  Lang.Huginn.Eval 7c7b189606bb4875b1405d7725657f15
  exports: 29219222456e7554340696990d6b09e2
  EnvEntry f5731036ffa98b07e9a243e558483e08
import  -/  parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Char 5f36dc01504e2a400936d6dff7c2c5d9
import  -/  parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Combinator 010122f275fed1634b4796ae29a5c0e2
import  -/  parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Error b94795f8d8d2a8e7a4b7fd18ef04365f
import  -/  parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Expr a22c5f93c9089c7a78b35f7feaf2bac4
import  -/  parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Language e0ef68f9a51dc60ac5112e9842fe4719
import  -/  parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim 21f179a12f56a3f71a380263a2285c1c
import  -/  parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.String 9e4fc2d5e43cbfd8ee89496d88041523
import  -/  parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Token 597839036a70ff0f4e2cdb68f2c9e88f
import  -/  parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.ParserCombinators.Parsec f11c372e358015ded8bcc547d1910ef0
import  -/  parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.ParserCombinators.Parsec.Expr 78a57fbcd60e12717f0a3929d3a32123
import  -/  parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.ParserCombinators.Parsec.Language ffdc6d8b5c3782bea7ce924a837e51e4
import  -/  parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.ParserCombinators.Parsec.Prim f288c46961bba576cff2754ec9b26ffa
import  -/  parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.ParserCombinators.Parsec.Token 39d20d9be83370fd3a4e60f36d62eb1b
46f12f5e6c2d00324240ca70aee44303
  $s$fStream[]mtok ::
    Text.Parsec.Prim.Stream [tok] Data.Functor.Identity.Identity tok
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ tok.
                  @ [tok]
                  @ Data.Functor.Identity.Identity
                  @ tok
                  (Lang.Huginn.Parser.$s$fStream[]mtok_$s$fStream[]mtok_$cp1Stream
                     @ tok)
                  (Lang.Huginn.Parser.$s$fStream[]mtok_$s$fStream[]mtok_$cuncons
                     @ tok) -}
d49c6ded5114037236001a3bcfe82706
  $s$fStream[]mtok_$s$fStream[]mtok_$cp1Stream ::
    GHC.Base.Monad Data.Functor.Identity.Identity
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                (\ @ tok -> Data.Functor.Identity.$fMonadIdentity) -}
2122014b14c9d79d48f82d9e132ecf4f
  $s$fStream[]mtok_$s$fStream[]mtok_$cuncons ::
    [tok]
    -> Data.Functor.Identity.Identity (GHC.Base.Maybe (tok, [tok]))
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ tok (ds :: [tok]) ->
                 case ds of wild {
                   []
                   -> GHC.Base.$
                        @ 'GHC.Types.PtrRepLifted
                        @ (GHC.Base.Maybe (tok, [tok]))
                        @ (Data.Functor.Identity.Identity (GHC.Base.Maybe (tok, [tok])))
                        (Data.Functor.Identity.$fApplicativeIdentity_$cpure
                           @ (GHC.Base.Maybe (tok, [tok])))
                        (GHC.Base.Nothing @ (tok, [tok]))
                   : t ts
                   -> GHC.Base.$
                        @ 'GHC.Types.PtrRepLifted
                        @ (GHC.Base.Maybe (tok, [tok]))
                        @ (Data.Functor.Identity.Identity (GHC.Base.Maybe (tok, [tok])))
                        (Data.Functor.Identity.$fApplicativeIdentity_$cpure
                           @ (GHC.Base.Maybe (tok, [tok])))
                        (GHC.Base.Just @ (tok, [tok]) (t, ts)) }) -}
be814e660da127091b9d994a7d5783fd
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Lang.Huginn.Parser.$trModule2
                   Lang.Huginn.Parser.$trModule1) -}
859b3002b9ec9ea037bd4c02f035ce94
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Lang.Huginn.Parser"#) -}
62393903179e54a73b569c80dfb6cd72
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "huginn-0.1.0.0-H85hIuVlPwkFCtmCyCbyhs"#) -}
330828acebb0751de0271416d5daecec
  $wmkTestRow ::
    t
    -> t1
    -> GHC.Base.String
    -> GHC.Base.String
    -> (# t, t1, GHC.Types.Double, GHC.Types.Double, GHC.Types.Bool #)
  {- Arity: 4, Strictness: <L,U><L,U><L,U><L,U>, Inline: [0],
     Unfolding: (\ @ t
                   @ t1
                   (w :: t)
                   (w1 :: t1)
                   (w2 :: GHC.Base.String)
                   (w3 :: GHC.Base.String) ->
                 let {
                   tv :: GHC.Types.Double
                   = case Text.Read.readEither6
                            @ GHC.Types.Double
                            (Text.ParserCombinators.ReadP.run
                               @ GHC.Types.Double
                               Lang.Huginn.Parser.readDouble3
                               w3) of wild {
                       [] -> Lang.Huginn.Parser.mkTestRow2
                       : x ds
                       -> case ds of wild1 {
                            [] -> x : ipv ipv1 -> Lang.Huginn.Parser.mkTestRow1 } }
                 } in
                 let {
                   hv :: GHC.Types.Double
                   = case Text.Read.readEither6
                            @ GHC.Types.Double
                            (Text.ParserCombinators.ReadP.run
                               @ GHC.Types.Double
                               Lang.Huginn.Parser.readDouble3
                               w2) of wild {
                       [] -> Lang.Huginn.Parser.mkTestRow2
                       : x ds
                       -> case ds of wild1 {
                            [] -> x : ipv ipv1 -> Lang.Huginn.Parser.mkTestRow1 } }
                 } in
                 (# w, w1, hv, tv,
                    case hv of ds1 { GHC.Types.D# ds2 ->
                    case {__pkg_ccall base-4.9.0.0 rintDouble GHC.Prim.Double#
                                                              -> GHC.Prim.State# GHC.Prim.RealWorld
                                                              -> (# GHC.Prim.State#
                                                                      GHC.Prim.RealWorld,
                                                                    GHC.Prim.Double# #)}
                           ds2
                           GHC.Prim.realWorld# of wild { (#,#) ds3 ds4 ->
                    case GHC.Integer.Type.decodeDoubleInteger
                           ds4 of ds { (#,#) ipv ipv1 ->
                    case tv of ds7 { GHC.Types.D# ds8 ->
                    case {__pkg_ccall base-4.9.0.0 rintDouble GHC.Prim.Double#
                                                              -> GHC.Prim.State# GHC.Prim.RealWorld
                                                              -> (# GHC.Prim.State#
                                                                      GHC.Prim.RealWorld,
                                                                    GHC.Prim.Double# #)}
                           ds8
                           GHC.Prim.realWorld# of wild1 { (#,#) ds9 ds10 ->
                    case GHC.Integer.Type.decodeDoubleInteger
                           ds10 of ds11 { (#,#) ipv2 ipv3 ->
                    let {
                      karg :: GHC.Integer.Type.Integer
                      = case GHC.Prim.tagToEnum#
                               @ GHC.Types.Bool
                               (GHC.Prim.<# ipv3 0#) of wild2 {
                          GHC.Types.False -> GHC.Integer.Type.shiftLInteger ipv2 ipv3
                          GHC.Types.True
                          -> case GHC.Integer.Type.integerToInt ipv2 of n { DEFAULT ->
                             GHC.Integer.Type.smallInteger
                               (GHC.Prim.uncheckedIShiftRA# n (GHC.Prim.negateInt# ipv3)) } }
                    } in
                    case GHC.Prim.tagToEnum#
                           @ GHC.Types.Bool
                           (GHC.Prim.<# ipv1 0#) of wild2 {
                      GHC.Types.False
                      -> case GHC.Integer.Type.eqInteger#
                                (GHC.Integer.Type.shiftLInteger ipv ipv1)
                                karg of wild3 { DEFAULT ->
                         GHC.Prim.tagToEnum# @ GHC.Types.Bool wild3 }
                      GHC.Types.True
                      -> case GHC.Integer.Type.integerToInt ipv of n { DEFAULT ->
                         case GHC.Integer.Type.eqInteger#
                                (GHC.Integer.Type.smallInteger
                                   (GHC.Prim.uncheckedIShiftRA# n (GHC.Prim.negateInt# ipv1)))
                                karg of wild3 { DEFAULT ->
                         GHC.Prim.tagToEnum# @ GHC.Types.Bool wild3 } } } } } } } } } #)) -}
2c02e3d2daf2386a8a1f60418d39a41e
  $wnoZero ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (GHC.Base.String
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (GHC.Base.String
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Arity: 5,
     Strictness: <L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,U>,
     Inline: [0],
     Unfolding: (\ @ b
                   (w :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                   (w1 :: GHC.Base.String
                          -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                          -> Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b)
                   (w2 :: Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b)
                   (w3 :: GHC.Base.String
                          -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                          -> Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b)
                   (w4 :: Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b) ->
                 Text.Parsec.Combinator.$wmany1
                   @ GHC.Base.String
                   @ Data.Functor.Identity.Identity
                   @ GHC.Types.Char
                   @ ()
                   @ GHC.Types.Char
                   Lang.Huginn.Parser.readExpr9
                     `cast`
                   (Sym (Text.Parsec.Prim.N:ParsecT[0]
                             <GHC.Base.String>_R
                             <()>_R
                             <Data.Functor.Identity.Identity>_R
                             <GHC.Types.Char>_R))
                   @ b
                   w
                   (\ (x :: [GHC.Types.Char])
                      (s2 :: Text.Parsec.Prim.State [GHC.Types.Char] ())[OneShot]
                      (err :: Text.Parsec.Error.ParseError)[OneShot] ->
                    w1
                      (GHC.CString.unpackAppendCString# "0."# x)
                      s2
                      (case s2 of wild { Text.Parsec.Prim.State ds3 ds4 ds5 ->
                       case ds4 of ww10 { Text.Parsec.Pos.SourcePos ww11 ww12 ww13 ->
                       case err of ww { Text.Parsec.Error.ParseError ww1 ww2 ->
                       case ww1 of ww3 { Text.Parsec.Pos.SourcePos ww4 ww5 ww6 ->
                       case Text.Parsec.Error.$wmergeError
                              ww4
                              ww5
                              ww6
                              ww2
                              ww11
                              ww12
                              ww13
                              (GHC.Types.[]
                                 @ Text.Parsec.Error.Message) of ww14 { (#,#) ww15 ww16 ->
                       Text.Parsec.Error.ParseError ww15 ww16 } } } } }))
                   w2
                   (\ (x :: [GHC.Types.Char])
                      (s2 :: Text.Parsec.Prim.State [GHC.Types.Char] ())[OneShot]
                      (err :: Text.Parsec.Error.ParseError)[OneShot] ->
                    w3
                      (GHC.CString.unpackAppendCString# "0."# x)
                      s2
                      (case s2 of wild { Text.Parsec.Prim.State ds3 ds4 ds5 ->
                       case ds4 of ww10 { Text.Parsec.Pos.SourcePos ww11 ww12 ww13 ->
                       case err of ww { Text.Parsec.Error.ParseError ww1 ww2 ->
                       case ww1 of ww3 { Text.Parsec.Pos.SourcePos ww4 ww5 ww6 ->
                       case Text.Parsec.Error.$wmergeError
                              ww4
                              ww5
                              ww6
                              ww2
                              ww11
                              ww12
                              ww13
                              (GHC.Types.[]
                                 @ Text.Parsec.Error.Message) of ww14 { (#,#) ww15 ww16 ->
                       Text.Parsec.Error.ParseError ww15 ww16 } } } } }))
                   w4) -}
24f2166c1dba32c031725c776c89dae5
  $wreadExpr ::
    GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> (# GHC.Base.String, Lang.Huginn.AST.Expr #)
  {- Arity: 3, Strictness: <L,U><L,U><S,U>, Inline: [0],
     Unfolding: (\ (w :: GHC.Base.String)
                   (w1 :: GHC.Base.String)
                   (w2 :: GHC.Base.String) ->
                 case GHC.Base.eqString w2 Lang.Huginn.Parser.readExpr15 of wild {
                   GHC.Types.False
                   -> case GHC.Base.eqString
                             w2
                             Lang.Huginn.Parser.readExpr14 of wild1 {
                        GHC.Types.False -> (# w, Lang.Huginn.AST.Str w1 #)
                        GHC.Types.True
                        -> (# w,
                              case (Text.Parsec.Prim.runPT
                                      @ [GHC.Types.Char]
                                      @ Data.Functor.Identity.Identity
                                      @ GHC.Types.Char
                                      @ ()
                                      @ Lang.Huginn.AST.Expr
                                      (Lang.Huginn.Parser.$s$fStream[]mtok @ GHC.Types.Char)
                                      Lang.Huginn.Parser.readExpr6
                                        `cast`
                                      (Sym (Text.Parsec.Prim.N:ParsecT[0]
                                                <[GHC.Types.Char]>_R
                                                <()>_R
                                                <Data.Functor.Identity.Identity>_R
                                                <Lang.Huginn.AST.Expr>_R))
                                      GHC.Tuple.()
                                      Lang.Huginn.Parser.readExpr5
                                      w1)
                                     `cast`
                                   (Data.Functor.Identity.N:Identity[0]
                                        <Data.Either.Either
                                           Text.Parsec.Error.ParseError
                                           Lang.Huginn.AST.Expr>_R) of wild2 {
                                Data.Either.Left ds -> Lang.Huginn.Parser.readExpr4
                                Data.Either.Right x -> x } #) }
                   GHC.Types.True
                   -> (# w,
                         Lang.Huginn.AST.Bl
                           (case Text.Read.readEither6
                                   @ GHC.Types.Bool
                                   (Text.ParserCombinators.ReadP.run
                                      @ GHC.Types.Bool
                                      Lang.Huginn.Parser.readExpr3
                                      w1) of wild1 {
                              [] -> Lang.Huginn.Parser.readExpr2
                              : x ds
                              -> case ds of wild2 {
                                   [] -> x : ipv ipv1 -> Lang.Huginn.Parser.readExpr1 } }) #) }) -}
dd37235a7ef7ca0a60042d6d1f22fb77
  $wstxLet ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (Lang.Huginn.AST.Expr
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Lang.Huginn.AST.Expr
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Arity: 5,
     Strictness: <L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,U>,
     Inline: [0],
     Unfolding: (\ @ b
                   (w :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                   (w1 :: Lang.Huginn.AST.Expr
                          -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                          -> Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b)
                   (w2 :: Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b)
                   (w3 :: Lang.Huginn.AST.Expr
                          -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                          -> Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b)
                   (w4 :: Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b) ->
                 Lang.Huginn.Parser.word
                   `cast`
                 (Text.Parsec.Prim.N:ParsecT[0]
                      <[GHC.Types.Char]>_R
                      <()>_R
                      <Data.Functor.Identity.Identity>_R
                      <GHC.Base.String>_R)
                   @ b
                   w
                   (\ (x :: GHC.Base.String)
                      (s2 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                      (err :: Text.Parsec.Error.ParseError) ->
                    Lang.Huginn.Parser.stxLet2
                      x
                      @ b
                      s2
                      w1
                      w2
                      (\ (x1 :: Lang.Huginn.AST.Expr)
                         (s3 :: Text.Parsec.Prim.State [GHC.Types.Char] ())[OneShot]
                         (err' :: Text.Parsec.Error.ParseError)[OneShot] ->
                       w1 x1 s3 (Text.Parsec.Error.mergeError err err'))
                      (\ (err' :: Text.Parsec.Error.ParseError) ->
                       w2 (Text.Parsec.Error.mergeError err err')))
                   w2
                   (\ (x :: GHC.Base.String)
                      (s2 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                      (err :: Text.Parsec.Error.ParseError) ->
                    Lang.Huginn.Parser.stxLet2
                      x
                      @ b
                      s2
                      w1
                      w2
                      (\ (x1 :: Lang.Huginn.AST.Expr)
                         (s3 :: Text.Parsec.Prim.State [GHC.Types.Char] ())[OneShot]
                         (err' :: Text.Parsec.Error.ParseError)[OneShot] ->
                       w3 x1 s3 (Text.Parsec.Error.mergeError err err'))
                      (\ (err' :: Text.Parsec.Error.ParseError) ->
                       w4 (Text.Parsec.Error.mergeError err err')))
                   w4) -}
94eb44392d76841df9dfd5aaf5b22bbb
  $wtsvCell ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (GHC.Base.String
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (GHC.Base.String
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Arity: 4, Strictness: <L,U(U,U(U,U,U),U)><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ b
                   (w :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                   (w1 :: GHC.Base.String
                          -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                          -> Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b)
                   (w2 :: Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b)
                   (w3 :: GHC.Base.String
                          -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                          -> Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b) ->
                 case Lang.Huginn.Parser.lexer of wild { Text.Parsec.Token.TokenParser ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ds26 ds27 ds28 ds29 ->
                 ds6
                   `cast`
                 (Text.Parsec.Prim.N:ParsecT[0]
                      <[GHC.Types.Char]>_R
                      <()>_R
                      <Data.Functor.Identity.Identity>_R
                      <GHC.Base.String>_R)
                   @ b
                   w
                   w1
                   w2
                   w3
                   (\ (err :: Text.Parsec.Error.ParseError) ->
                    Text.Parsec.Prim.$w$cmany
                      @ GHC.Base.String
                      @ ()
                      @ Data.Functor.Identity.Identity
                      @ GHC.Types.Char
                      (Lang.Huginn.Parser.notTabDelim2 @ ())
                        `cast`
                      (Sym (Text.Parsec.Prim.N:ParsecT[0]
                                <GHC.Base.String>_R
                                <()>_R
                                <Data.Functor.Identity.Identity>_R
                                <GHC.Types.Char>_R))
                      @ b
                      w
                      w1
                      w2
                      (\ (y :: GHC.Base.String)
                         (s' :: Text.Parsec.Prim.State [GHC.Types.Char] ())[OneShot]
                         (err' :: Text.Parsec.Error.ParseError)[OneShot] ->
                       w3 y s' (Text.Parsec.Error.mergeError err err'))) }) -}
7c6c3fea8504f3a6d5e2d78702142ee5
  $wtsvFunction ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> ((GHC.Base.String
         -> (GHC.Base.String,
             Data.Either.Either
               Text.Parsec.Error.ParseError Lang.Huginn.AST.Expr))
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> ((GHC.Base.String
         -> (GHC.Base.String,
             Data.Either.Either
               Text.Parsec.Error.ParseError Lang.Huginn.AST.Expr))
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 4, Strictness: <L,U(U,U(U,U,U),U)><L,C(U)><L,U><L,C(U)>,
     Inline: [0],
     Unfolding: (\ @ b1
                   (w :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                   (w1 :: (GHC.Base.String
                           -> (GHC.Base.String,
                               Data.Either.Either
                                 Text.Parsec.Error.ParseError Lang.Huginn.AST.Expr))
                          -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                          -> Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b1)
                   (w2 :: Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b1)
                   (w3 :: (GHC.Base.String
                           -> (GHC.Base.String,
                               Data.Either.Either
                                 Text.Parsec.Error.ParseError Lang.Huginn.AST.Expr))
                          -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                          -> Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b1) ->
                 case Lang.Huginn.Parser.lexer of wild { Text.Parsec.Token.TokenParser ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ds26 ds27 ds28 ds29 ->
                 let {
                   cok :: GHC.Base.String
                          -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                          -> Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b1
                     {- Arity: 1, Strictness: <L,U>,
                        Unfolding: InlineRule (1, True, False)
                                   (\ (x :: GHC.Base.String) ->
                                    w1 (Lang.Huginn.Parser.mkFnRec @ GHC.Base.String x)) -}
                   = \ (x :: GHC.Base.String) ->
                     w1 (Lang.Huginn.Parser.mkFnRec @ GHC.Base.String x)
                 } in
                 ds6
                   `cast`
                 (Text.Parsec.Prim.N:ParsecT[0]
                      <[GHC.Types.Char]>_R
                      <()>_R
                      <Data.Functor.Identity.Identity>_R
                      <GHC.Base.String>_R)
                   @ b1
                   w
                   cok
                   w2
                   (\ (x :: GHC.Base.String) ->
                    w3 (Lang.Huginn.Parser.mkFnRec @ GHC.Base.String x))
                   (\ (err :: Text.Parsec.Error.ParseError) ->
                    Text.Parsec.Prim.$w$cmany
                      @ GHC.Base.String
                      @ ()
                      @ Data.Functor.Identity.Identity
                      @ GHC.Types.Char
                      (Lang.Huginn.Parser.notTabDelim2 @ ())
                        `cast`
                      (Sym (Text.Parsec.Prim.N:ParsecT[0]
                                <GHC.Base.String>_R
                                <()>_R
                                <Data.Functor.Identity.Identity>_R
                                <GHC.Types.Char>_R))
                      @ b1
                      w
                      cok
                      w2
                      (\ (y :: GHC.Base.String)
                         (s' :: Text.Parsec.Prim.State [GHC.Types.Char] ())[OneShot]
                         (err' :: Text.Parsec.Error.ParseError)[OneShot] ->
                       w3
                         (Lang.Huginn.Parser.mkFnRec @ GHC.Base.String y)
                         s'
                         (Text.Parsec.Error.mergeError err err'))) }) -}
c99dc440936f2979384959ef50d07dc7
  $wvar ::
    [GHC.Types.Char]
    -> Text.Parsec.Pos.SourceName
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> ()
    -> (GHC.Base.String
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 8,
     Strictness: <L,U><L,U><S,U><S,U><S,U><L,C(C1(C1(U)))><L,U><L,C(U)>,
     Inline: [0] -}
a7bcb74f277cf94b18d6a9ee8fe6eed7
  array :: Text.Parsec.String.Parser [Lang.Huginn.AST.Expr]
  {- Unfolding: (case Lang.Huginn.Parser.lexer of wild { Text.Parsec.Token.TokenParser ds ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ds26 ds27 ds28 ->
                 ds19
                   @ [Lang.Huginn.AST.Expr]
                   (ds27
                      @ Lang.Huginn.AST.Expr
                      Lang.Huginn.Parser.array1
                        `cast`
                      (Sym (Text.Parsec.Prim.N:ParsecT[0]
                                <[GHC.Types.Char]>_R
                                <()>_R
                                <Data.Functor.Identity.Identity>_R
                                <Lang.Huginn.AST.Expr>_R))) }) -}
6960657af5568245d6255f9678096253
  array1 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (Lang.Huginn.AST.Expr
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Lang.Huginn.AST.Expr
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,U><L,U><L,C(C1(C1(U)))><L,C(U)> -}
65ed7d87e3aeda8b1516c4efcd0c35f1
  binary ::
    GHC.Base.String
    -> (a -> a -> a)
    -> Text.Parsec.Expr.Assoc
    -> Text.ParserCombinators.Parsec.Expr.Operator GHC.Types.Char () a
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: (\ @ a (name :: GHC.Base.String) (fn :: a -> a -> a) ->
                 Text.ParserCombinators.Parsec.Expr.Infix
                   @ GHC.Types.Char
                   @ ()
                   @ a
                   (let {
                      m1 :: Text.Parsec.Prim.ParsecT
                              [GHC.Types.Char] () Data.Functor.Identity.Identity ()
                      = case Lang.Huginn.Parser.lexer of wild { Text.Parsec.Token.TokenParser ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ds26 ds27 ds28 ds29 ->
                        ds4 name }
                    } in
                    (\ @ b1
                       (eta :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                       (eta1 :: (a -> a -> a)
                                -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                                -> Text.Parsec.Error.ParseError
                                -> Data.Functor.Identity.Identity b1)
                       (eta2 :: Text.Parsec.Error.ParseError
                                -> Data.Functor.Identity.Identity b1)
                       (eta3 :: (a -> a -> a)
                                -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                                -> Text.Parsec.Error.ParseError
                                -> Data.Functor.Identity.Identity b1)
                       (eta4 :: Text.Parsec.Error.ParseError
                                -> Data.Functor.Identity.Identity b1) ->
                     m1
                       `cast`
                     (Text.Parsec.Prim.N:ParsecT[0]
                          <[GHC.Types.Char]>_R
                          <()>_R
                          <Data.Functor.Identity.Identity>_R
                          <()>_R)
                       @ b1
                       eta
                       (\ (x :: ())
                          (s2 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                          (err :: Text.Parsec.Error.ParseError) ->
                        eta1
                          fn
                          s2
                          (case s2 of wild { Text.Parsec.Prim.State ds3 ds4 ds5 ->
                           case ds4 of ww10 { Text.Parsec.Pos.SourcePos ww11 ww12 ww13 ->
                           case err of ww { Text.Parsec.Error.ParseError ww1 ww2 ->
                           case ww1 of ww3 { Text.Parsec.Pos.SourcePos ww4 ww5 ww6 ->
                           case Text.Parsec.Error.$wmergeError
                                  ww4
                                  ww5
                                  ww6
                                  ww2
                                  ww11
                                  ww12
                                  ww13
                                  (GHC.Types.[]
                                     @ Text.Parsec.Error.Message) of ww14 { (#,#) ww15 ww16 ->
                           Text.Parsec.Error.ParseError ww15 ww16 } } } } }))
                       eta2
                       (\ (x :: ())
                          (s2 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                          (err :: Text.Parsec.Error.ParseError) ->
                        eta3
                          fn
                          s2
                          (case s2 of wild { Text.Parsec.Prim.State ds3 ds4 ds5 ->
                           case ds4 of ww10 { Text.Parsec.Pos.SourcePos ww11 ww12 ww13 ->
                           case err of ww { Text.Parsec.Error.ParseError ww1 ww2 ->
                           case ww1 of ww3 { Text.Parsec.Pos.SourcePos ww4 ww5 ww6 ->
                           case Text.Parsec.Error.$wmergeError
                                  ww4
                                  ww5
                                  ww6
                                  ww2
                                  ww11
                                  ww12
                                  ww13
                                  (GHC.Types.[]
                                     @ Text.Parsec.Error.Message) of ww14 { (#,#) ww15 ww16 ->
                           Text.Parsec.Error.ParseError ww15 ww16 } } } } }))
                       eta4)
                      `cast`
                    (Sym (Text.Parsec.Prim.N:ParsecT[0]
                              <[GHC.Types.Char]>_R
                              <()>_R
                              <Data.Functor.Identity.Identity>_R
                              <a -> a -> a>_R)))) -}
5aa7cf28152987b75e28b9c87bc136ea
  bla :: Text.Parsec.String.Parser Lang.Huginn.AST.Expr
  {- Arity: 5,
     Unfolding: InlineRule (0, True, True)
                Lang.Huginn.Parser.bla1
                  `cast`
                (Sym (Text.Parsec.Prim.N:ParsecT[0]
                          <[GHC.Types.Char]>_R
                          <()>_R
                          <Data.Functor.Identity.Identity>_R
                          <Lang.Huginn.AST.Expr>_R)) -}
d5fab3e337ec128a4c467f6d1e4b5ce3
  bla1 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (Lang.Huginn.AST.Expr
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Lang.Huginn.AST.Expr
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Arity: 5,
     Unfolding: (Text.Parsec.Prim.<?>1
                   @ [GHC.Types.Char]
                   @ ()
                   @ Data.Functor.Identity.Identity
                   @ Lang.Huginn.AST.Expr
                   Lang.Huginn.Parser.bla3
                   Lang.Huginn.Parser.bla2) -}
7e694137b693bc92267f495d8094286f
  bla2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "expression"#) -}
0019d7f08d7a19fc9895adf6ed8d39a0
  bla3 ::
    Text.Parsec.String.GenParser GHC.Types.Char () Lang.Huginn.AST.Expr
  {- Unfolding: (Text.Parsec.Expr.buildExpressionParser1
                   @ [GHC.Types.Char]
                   @ ()
                   @ Data.Functor.Identity.Identity
                   @ Lang.Huginn.AST.Expr
                   Lang.Huginn.Parser.bla5
                   Lang.Huginn.Parser.bla4
                     `cast`
                   (Sym (Text.Parsec.Prim.N:ParsecT[0]
                             <[GHC.Types.Char]>_R
                             <()>_R
                             <Data.Functor.Identity.Identity>_R
                             <Lang.Huginn.AST.Expr>_R))) -}
f1afed3a53848e6fec49282f6e20463b
  bla4 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (Lang.Huginn.AST.Expr
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Lang.Huginn.AST.Expr
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,U><L,U><L,U><L,C(U)> -}
1e4aa1e108b0ea0e37df821512232eea
  bla5 ::
    [[Text.Parsec.Expr.Operator
        [GHC.Types.Char]
        ()
        Data.Functor.Identity.Identity
        Lang.Huginn.AST.Expr]]
  {- Unfolding: (GHC.Base.map
                   @ [Text.ParserCombinators.Parsec.Expr.Operator
                        GHC.Types.Char () Lang.Huginn.AST.Expr]
                   @ [Text.Parsec.Expr.Operator
                        [GHC.Types.Char]
                        ()
                        Data.Functor.Identity.Identity
                        Lang.Huginn.AST.Expr]
                   (Text.ParserCombinators.Parsec.Expr.buildExpressionParser1
                      @ GHC.Types.Char
                      @ ()
                      @ Lang.Huginn.AST.Expr)
                   Lang.Huginn.Parser.table) -}
0df88b4d616ff3212fe0780a8c4b312a
  bool :: Text.Parsec.String.Parser GHC.Types.Bool
  {- Arity: 5,
     Strictness: <L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                Lang.Huginn.Parser.bool1
                  `cast`
                (Sym (Text.Parsec.Prim.N:ParsecT[0]
                          <[GHC.Types.Char]>_R
                          <()>_R
                          <Data.Functor.Identity.Identity>_R
                          <GHC.Types.Bool>_R)) -}
c711cc99d5d26c4a7e7be96f1dff12ec
  bool1 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (GHC.Types.Bool
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (GHC.Types.Bool
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Arity: 5,
     Strictness: <L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: (\ @ b
                   (s1 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                   (cok :: GHC.Types.Bool
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b)
                   (cerr :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b)
                   (eok :: GHC.Types.Bool
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b)
                   (eerr :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b) ->
                 Text.Parsec.Prim.$fApplicativeParsecT2
                   @ [GHC.Types.Char]
                   @ ()
                   @ Data.Functor.Identity.Identity
                   @ GHC.Base.String
                   @ GHC.Types.Bool
                   Lang.Huginn.Parser.bool6
                     `cast`
                   (Sym (Text.Parsec.Prim.N:ParsecT[0]
                             <GHC.Base.String>_R
                             <()>_R
                             <Data.Functor.Identity.Identity>_R
                             <[GHC.Types.Char]>_R))
                   Lang.Huginn.Parser.bool5
                     `cast`
                   (Sym (Text.Parsec.Prim.N:ParsecT[0]
                             <[GHC.Types.Char]>_R
                             <()>_R
                             <Data.Functor.Identity.Identity>_R
                             <GHC.Types.Bool>_R))
                   @ b
                   s1
                   cok
                   cerr
                   eok
                   (\ (err :: Text.Parsec.Error.ParseError) ->
                    Text.Parsec.Prim.$fApplicativeParsecT2
                      @ [GHC.Types.Char]
                      @ ()
                      @ Data.Functor.Identity.Identity
                      @ GHC.Base.String
                      @ GHC.Types.Bool
                      Lang.Huginn.Parser.bool3
                        `cast`
                      (Sym (Text.Parsec.Prim.N:ParsecT[0]
                                <GHC.Base.String>_R
                                <()>_R
                                <Data.Functor.Identity.Identity>_R
                                <[GHC.Types.Char]>_R))
                      Lang.Huginn.Parser.bool2
                        `cast`
                      (Sym (Text.Parsec.Prim.N:ParsecT[0]
                                <[GHC.Types.Char]>_R
                                <()>_R
                                <Data.Functor.Identity.Identity>_R
                                <GHC.Types.Bool>_R))
                      @ b
                      s1
                      cok
                      cerr
                      (\ (y :: GHC.Types.Bool)
                         (s' :: Text.Parsec.Prim.State [GHC.Types.Char] ())[OneShot]
                         (err' :: Text.Parsec.Error.ParseError)[OneShot] ->
                       eok y s' (Text.Parsec.Error.mergeError err err'))
                      (\ (err' :: Text.Parsec.Error.ParseError) ->
                       eerr (Text.Parsec.Error.mergeError err err')))) -}
90958ae910eb43fe2f923fa47ff97ba7
  bool2 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (GHC.Types.Bool
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (GHC.Types.Bool
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,U(U,U,U)><L,A><L,A><C(C(C(S))),1*C1(C1(C1(U)))><L,A>,
     Unfolding: InlineRule (5, True, False)
                (\ @ b
                   (s1 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                   (ds :: GHC.Types.Bool
                          -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                          -> Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b)
                   (ds1 :: Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b)
                   (eok :: GHC.Types.Bool
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b)
                   (ds2 :: Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b) ->
                 eok
                   GHC.Types.False
                   s1
                   (case s1 of wild { Text.Parsec.Prim.State ds3 ds4 ds5 ->
                    Text.Parsec.Error.ParseError
                      ds4
                      (GHC.Types.[] @ Text.Parsec.Error.Message) })) -}
964efe6b4f97ee7eca1a5a437a5c7ee9
  bool3 ::
    Text.Parsec.Prim.State GHC.Base.String ()
    -> ([GHC.Types.Char]
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> ([GHC.Types.Char]
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Arity: 5,
     Unfolding: (Text.Parsec.Char.string1
                   @ GHC.Base.String
                   @ Data.Functor.Identity.Identity
                   @ ()
                   (Lang.Huginn.Parser.$s$fStream[]mtok @ GHC.Types.Char)
                   Lang.Huginn.Parser.bool4) -}
d9cf928514fa6ec84aa56bc200e1f52c
  bool4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "false"#) -}
b39cbd093b1cb208482f0a579fbf1062
  bool5 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (GHC.Types.Bool
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (GHC.Types.Bool
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,U(U,U,U)><L,A><L,A><C(C(C(S))),1*C1(C1(C1(U)))><L,A>,
     Unfolding: InlineRule (5, True, False)
                (\ @ b
                   (s1 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                   (ds :: GHC.Types.Bool
                          -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                          -> Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b)
                   (ds1 :: Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b)
                   (eok :: GHC.Types.Bool
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b)
                   (ds2 :: Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b) ->
                 eok
                   GHC.Types.True
                   s1
                   (case s1 of wild { Text.Parsec.Prim.State ds3 ds4 ds5 ->
                    Text.Parsec.Error.ParseError
                      ds4
                      (GHC.Types.[] @ Text.Parsec.Error.Message) })) -}
dc51bef344ea43482239b82f8e90443a
  bool6 ::
    Text.Parsec.Prim.State GHC.Base.String ()
    -> ([GHC.Types.Char]
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> ([GHC.Types.Char]
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Arity: 5,
     Unfolding: (Text.Parsec.Char.string1
                   @ GHC.Base.String
                   @ Data.Functor.Identity.Identity
                   @ ()
                   (Lang.Huginn.Parser.$s$fStream[]mtok @ GHC.Types.Char)
                   Lang.Huginn.Parser.bool7) -}
ad9d7a832a43750f3c33ba4917036ac4
  bool7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "true"#) -}
74c5a24062e6591f9b695f4d189d7487
  brackets ::
    Text.Parsec.Prim.ParsecT
      GHC.Base.String () Data.Functor.Identity.Identity a
    -> Text.Parsec.Prim.ParsecT
         GHC.Base.String () Data.Functor.Identity.Identity a
  {- Unfolding: (\ @ a ->
                 case Lang.Huginn.Parser.lexer of wild { Text.Parsec.Token.TokenParser ds ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ds26 ds27 ds28 ->
                 ds19 @ a }) -}
6b3c6d8eac66f89ae0bff0f192456016
  closure :: Text.Parsec.String.Parser Lang.Huginn.AST.Expr
  {- Arity: 5, Strictness: <L,U><L,C(U)><L,U><L,C(U)><L,U>,
     Unfolding: InlineRule (0, True, True)
                Lang.Huginn.Parser.closure1
                  `cast`
                (Sym (Text.Parsec.Prim.N:ParsecT[0]
                          <[GHC.Types.Char]>_R
                          <()>_R
                          <Data.Functor.Identity.Identity>_R
                          <Lang.Huginn.AST.Expr>_R)) -}
6aad80db02572e11512c0f4faf99dad9
  closure1 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (Lang.Huginn.AST.Expr
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Lang.Huginn.AST.Expr
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5, Strictness: <L,U><L,C(U)><L,U><L,C(U)><L,U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ b1
                   (s1 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                   (cok :: Lang.Huginn.AST.Expr
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1)
                   (cerr :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1)
                   (eok :: Lang.Huginn.AST.Expr
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1)
                   (eerr :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1) ->
                 Lang.Huginn.Parser.closure_p
                   `cast`
                 (Text.Parsec.Prim.N:ParsecT[0]
                      <[GHC.Types.Char]>_R
                      <()>_R
                      <Data.Functor.Identity.Identity>_R
                      <Lang.Huginn.AST.Expr>_R)
                   @ b1
                   s1
                   (\ (x :: Lang.Huginn.AST.Expr) -> cok (Lang.Huginn.AST.Closure x))
                   cerr
                   (\ (x :: Lang.Huginn.AST.Expr) -> eok (Lang.Huginn.AST.Closure x))
                   eerr) -}
c3e0e3438c896b517702d9fdc21da60b
  closure10 ::
    Text.Parsec.Prim.ParsecT
      GHC.Base.String
      ()
      Data.Functor.Identity.Identity
      Lang.Huginn.AST.Expr
  {- Unfolding: (case Lang.Huginn.Parser.lexer of wild { Text.Parsec.Token.TokenParser ds ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ds26 ds27 ds28 ->
                 ds14
                   @ Lang.Huginn.AST.Expr
                   Lang.Huginn.Parser.array1
                     `cast`
                   (Sym (Text.Parsec.Prim.N:ParsecT[0]
                             <[GHC.Types.Char]>_R
                             <()>_R
                             <Data.Functor.Identity.Identity>_R
                             <Lang.Huginn.AST.Expr>_R)) }) -}
4f6ca1ab84beb8e814ea7b8dc154caf4
  closure11 ::
    Text.Parsec.Prim.ParsecT
      GHC.Base.String () Data.Functor.Identity.Identity GHC.Base.String
  {- Unfolding: (case Lang.Huginn.Parser.lexer of wild { Text.Parsec.Token.TokenParser ds ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ds26 ds27 ds28 ->
                 ds14
                   @ GHC.Base.String
                   Lang.Huginn.Parser.closure12
                     `cast`
                   (Sym (Text.Parsec.Prim.N:ParsecT[0]
                             <GHC.Base.String>_R
                             <()>_R
                             <Data.Functor.Identity.Identity>_R
                             <[GHC.Types.Char]>_R)) }) -}
1395745d0fa0473c6c1e304c07a25ca9
  closure12 ::
    Text.Parsec.Prim.State GHC.Base.String ()
    -> ([GHC.Types.Char]
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> ([GHC.Types.Char]
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Arity: 5,
     Unfolding: (Text.Parsec.Char.string1
                   @ GHC.Base.String
                   @ Data.Functor.Identity.Identity
                   @ ()
                   (Lang.Huginn.Parser.$s$fStream[]mtok @ GHC.Types.Char)
                   Lang.Huginn.Parser.closure13) -}
4be61821d4b52c19a1200ef39bafa069
  closure13 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "if"#) -}
13b50d2abc43c70a234d0e804dbaea94
  closure2 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (Lang.Huginn.AST.Expr
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Lang.Huginn.AST.Expr
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,U><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: (\ @ b
                   (s1 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                   (cok :: Lang.Huginn.AST.Expr
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b)
                   (cerr :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b)
                   (eok :: Lang.Huginn.AST.Expr
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b)
                   (eerr :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b) ->
                 let {
                   eerr1 :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b
                     {- Arity: 1, Strictness: <L,U(U(U,U,U),U)> -}
                   = \ (err :: Text.Parsec.Error.ParseError) ->
                     Lang.Huginn.Parser.array1
                       @ b
                       s1
                       cok
                       cerr
                       (\ (y :: Lang.Huginn.AST.Expr)
                          (s' :: Text.Parsec.Prim.State [GHC.Types.Char] ())[OneShot]
                          (err' :: Text.Parsec.Error.ParseError)[OneShot] ->
                        eok y s' (Text.Parsec.Error.mergeError err err'))
                       (\ (err' :: Text.Parsec.Error.ParseError) ->
                        eerr (Text.Parsec.Error.mergeError err err'))
                 } in
                 Lang.Huginn.Parser.closure3 @ b s1 cok eerr1 eok eerr1) -}
95982d140e45fffebb548d7c57451c9c
  closure3 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (Lang.Huginn.AST.Expr
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Lang.Huginn.AST.Expr
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: (\ @ b
                   (s1 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                   (cok :: Lang.Huginn.AST.Expr
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b)
                   (cerr :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b)
                   (eok :: Lang.Huginn.AST.Expr
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b)
                   (eerr :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b) ->
                 Lang.Huginn.Parser.closure7
                   @ b
                   s1
                   cok
                   cerr
                   eok
                   (\ (err :: Text.Parsec.Error.ParseError) ->
                    Lang.Huginn.Parser.closure4
                      @ b
                      s1
                      cok
                      cerr
                      (\ (y :: Lang.Huginn.AST.Expr)
                         (s' :: Text.Parsec.Prim.State [GHC.Types.Char] ())[OneShot]
                         (err' :: Text.Parsec.Error.ParseError)[OneShot] ->
                       eok y s' (Text.Parsec.Error.mergeError err err'))
                      (\ (err' :: Text.Parsec.Error.ParseError) ->
                       eerr (Text.Parsec.Error.mergeError err err')))) -}
e6929f3fca0fece02213859a097cd667
  closure4 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (Lang.Huginn.AST.Expr
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Lang.Huginn.AST.Expr
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: (\ @ b1
                   (s1 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                   (cok :: Lang.Huginn.AST.Expr
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1)
                   (cerr :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1)
                   (eok :: Lang.Huginn.AST.Expr
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1)
                   (eerr :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1) ->
                 Lang.Huginn.Parser.closure6
                   @ b1
                   s1
                   (\ (x :: Lang.Huginn.AST.Expr)
                      (s2 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                      (err :: Text.Parsec.Error.ParseError) ->
                    Lang.Huginn.Parser.closure5
                      x
                      @ b1
                      s2
                      cok
                      cerr
                      (\ (x1 :: Lang.Huginn.AST.Expr)
                         (s3 :: Text.Parsec.Prim.State [GHC.Types.Char] ())[OneShot]
                         (err' :: Text.Parsec.Error.ParseError)[OneShot] ->
                       cok x1 s3 (Text.Parsec.Error.mergeError err err'))
                      (\ (err' :: Text.Parsec.Error.ParseError) ->
                       cerr (Text.Parsec.Error.mergeError err err')))
                   cerr
                   (\ (x :: Lang.Huginn.AST.Expr)
                      (s2 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                      (err :: Text.Parsec.Error.ParseError) ->
                    Lang.Huginn.Parser.closure5
                      x
                      @ b1
                      s2
                      cok
                      cerr
                      (\ (x1 :: Lang.Huginn.AST.Expr)
                         (s3 :: Text.Parsec.Prim.State [GHC.Types.Char] ())[OneShot]
                         (err' :: Text.Parsec.Error.ParseError)[OneShot] ->
                       eok x1 s3 (Text.Parsec.Error.mergeError err err'))
                      (\ (err' :: Text.Parsec.Error.ParseError) ->
                       eerr (Text.Parsec.Error.mergeError err err')))
                   eerr) -}
955e15b8bd8289679b2f513aabcaa5c6
  closure5 ::
    Lang.Huginn.AST.Expr
    -> forall b.
       Text.Parsec.Prim.State [GHC.Types.Char] ()
       -> (Lang.Huginn.AST.Expr
           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
           -> Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> (Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> (Lang.Huginn.AST.Expr
           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
           -> Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> (Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> Data.Functor.Identity.Identity b
  {- Arity: 6,
     Strictness: <L,U><L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,U> -}
3a85dc507285d9c5f848c0f9e47b51ba
  closure6 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (Lang.Huginn.AST.Expr
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Lang.Huginn.AST.Expr
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,C(U)><L,U><L,C(U)><L,C(U)> -}
2884fc9d22e9b509a3dec92071f69d2b
  closure7 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (Lang.Huginn.AST.Expr
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Lang.Huginn.AST.Expr
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Strictness: <L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,U>,
     Unfolding: (\ @ b1
                   (s1 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                   (cok :: Lang.Huginn.AST.Expr
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1)
                   (cerr :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1)
                   (eok :: Lang.Huginn.AST.Expr
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1)
                   (eerr :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1) ->
                 Lang.Huginn.Parser.closure11
                   `cast`
                 (Text.Parsec.Prim.N:ParsecT[0]
                      <[GHC.Types.Char]>_R
                      <()>_R
                      <Data.Functor.Identity.Identity>_R
                      <GHC.Base.String>_R)
                   @ b1
                   s1
                   (\ (x :: GHC.Base.String)
                      (s2 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                      (err :: Text.Parsec.Error.ParseError) ->
                    Lang.Huginn.Parser.closure8
                      @ b1
                      s2
                      cok
                      cerr
                      (\ (x1 :: Lang.Huginn.AST.Expr)
                         (s3 :: Text.Parsec.Prim.State [GHC.Types.Char] ())[OneShot]
                         (err' :: Text.Parsec.Error.ParseError)[OneShot] ->
                       cok x1 s3 (Text.Parsec.Error.mergeError err err'))
                      (\ (err' :: Text.Parsec.Error.ParseError) ->
                       cerr (Text.Parsec.Error.mergeError err err')))
                   cerr
                   (\ (x :: GHC.Base.String)
                      (s2 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                      (err :: Text.Parsec.Error.ParseError) ->
                    Lang.Huginn.Parser.closure8
                      @ b1
                      s2
                      cok
                      cerr
                      (\ (x1 :: Lang.Huginn.AST.Expr)
                         (s3 :: Text.Parsec.Prim.State [GHC.Types.Char] ())[OneShot]
                         (err' :: Text.Parsec.Error.ParseError)[OneShot] ->
                       eok x1 s3 (Text.Parsec.Error.mergeError err err'))
                      (\ (err' :: Text.Parsec.Error.ParseError) ->
                       eerr (Text.Parsec.Error.mergeError err err')))
                   eerr) -}
365c2f5ba508ec54a0b22769e514b897
  closure8 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (Lang.Huginn.AST.Expr
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Lang.Huginn.AST.Expr
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Strictness: <L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,U>,
     Unfolding: (\ @ b1
                   (s1 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                   (cok :: Lang.Huginn.AST.Expr
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1)
                   (cerr :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1)
                   (eok :: Lang.Huginn.AST.Expr
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1)
                   (eerr :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1) ->
                 Lang.Huginn.Parser.closure10
                   `cast`
                 (Text.Parsec.Prim.N:ParsecT[0]
                      <[GHC.Types.Char]>_R
                      <()>_R
                      <Data.Functor.Identity.Identity>_R
                      <Lang.Huginn.AST.Expr>_R)
                   @ b1
                   s1
                   (\ (x :: Lang.Huginn.AST.Expr)
                      (s2 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                      (err :: Text.Parsec.Error.ParseError) ->
                    Lang.Huginn.Parser.closure9
                      x
                      @ b1
                      s2
                      cok
                      cerr
                      (\ (x1 :: Lang.Huginn.AST.Expr)
                         (s3 :: Text.Parsec.Prim.State [GHC.Types.Char] ())[OneShot]
                         (err' :: Text.Parsec.Error.ParseError)[OneShot] ->
                       cok x1 s3 (Text.Parsec.Error.mergeError err err'))
                      (\ (err' :: Text.Parsec.Error.ParseError) ->
                       cerr (Text.Parsec.Error.mergeError err err')))
                   cerr
                   (\ (x :: Lang.Huginn.AST.Expr)
                      (s2 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                      (err :: Text.Parsec.Error.ParseError) ->
                    Lang.Huginn.Parser.closure9
                      x
                      @ b1
                      s2
                      cok
                      cerr
                      (\ (x1 :: Lang.Huginn.AST.Expr)
                         (s3 :: Text.Parsec.Prim.State [GHC.Types.Char] ())[OneShot]
                         (err' :: Text.Parsec.Error.ParseError)[OneShot] ->
                       eok x1 s3 (Text.Parsec.Error.mergeError err err'))
                      (\ (err' :: Text.Parsec.Error.ParseError) ->
                       eerr (Text.Parsec.Error.mergeError err err')))
                   eerr) -}
3c87afbbe55a256ba575051d67619120
  closure9 ::
    Lang.Huginn.AST.Expr
    -> forall b.
       Text.Parsec.Prim.State [GHC.Types.Char] ()
       -> (Lang.Huginn.AST.Expr
           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
           -> Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> (Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> (Lang.Huginn.AST.Expr
           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
           -> Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> (Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> Data.Functor.Identity.Identity b
  {- Arity: 6,
     Strictness: <L,U><L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,U> -}
9a6cb6f80be3ac7d531c654bac9e5218
  closure_p ::
    Text.Parsec.Prim.ParsecT
      [GHC.Types.Char]
      ()
      Data.Functor.Identity.Identity
      Lang.Huginn.AST.Expr
  {- Unfolding: (case Lang.Huginn.Parser.lexer of wild { Text.Parsec.Token.TokenParser ds ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ds26 ds27 ds28 ->
                 ds16
                   @ Lang.Huginn.AST.Expr
                   Lang.Huginn.Parser.closure2
                     `cast`
                   (Sym (Text.Parsec.Prim.N:ParsecT[0]
                             <[GHC.Types.Char]>_R
                             <()>_R
                             <Data.Functor.Identity.Identity>_R
                             <Lang.Huginn.AST.Expr>_R)) }) -}
8449e6b6d762e06d2723586848fc96d7
  code :: Text.Parsec.String.Parser Lang.Huginn.AST.Expr
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,U><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                Lang.Huginn.Parser.closure2
                  `cast`
                (Sym (Text.Parsec.Prim.N:ParsecT[0]
                          <[GHC.Types.Char]>_R
                          <()>_R
                          <Data.Functor.Identity.Identity>_R
                          <Lang.Huginn.AST.Expr>_R)) -}
efb579dd37921c6fef3df272b3dd944c
  comma ::
    Text.Parsec.Prim.ParsecT
      GHC.Base.String () Data.Functor.Identity.Identity GHC.Base.String
  {- Unfolding: (case Lang.Huginn.Parser.lexer of wild { Text.Parsec.Token.TokenParser ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ds26 ds27 ds28 ds29 ->
                 ds23 }) -}
0245f07cc851fa6da6fb10ce54e72aa8
  commaSep ::
    Text.Parsec.Prim.ParsecT
      GHC.Base.String () Data.Functor.Identity.Identity a
    -> Text.Parsec.Prim.ParsecT
         GHC.Base.String () Data.Functor.Identity.Identity [a]
  {- Unfolding: (\ @ a ->
                 case Lang.Huginn.Parser.lexer of wild { Text.Parsec.Token.TokenParser ds ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ds26 ds27 ds28 ->
                 ds27 @ a }) -}
f09178a936f4fbe1e9165da63c908a79
  double ::
    Text.Parsec.Prim.ParsecT
      GHC.Base.String () Data.Functor.Identity.Identity GHC.Types.Double
  {- Unfolding: (case Lang.Huginn.Parser.lexer of wild { Text.Parsec.Token.TokenParser ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ds26 ds27 ds28 ds29 ->
                 ds9 }) -}
30e38d7a841d6b4394df668cac0a9f2b
  elseStatement ::
    Text.Parsec.Prim.ParsecT
      GHC.Base.String
      ()
      Data.Functor.Identity.Identity
      Lang.Huginn.AST.Expr
  {- Arity: 5,
     Unfolding: InlineRule (0, True, True)
                Lang.Huginn.Parser.elseStatement1
                  `cast`
                (Sym (Text.Parsec.Prim.N:ParsecT[0]
                          <[GHC.Types.Char]>_R
                          <()>_R
                          <Data.Functor.Identity.Identity>_R
                          <Lang.Huginn.AST.Expr>_R)) -}
9d1fee54bc29aa388b8d20dd17ef9ca7
  elseStatement1 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (Lang.Huginn.AST.Expr
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Lang.Huginn.AST.Expr
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Unfolding: (Text.Parsec.Prim.$fApplicativeParsecT2
                   @ [GHC.Types.Char]
                   @ ()
                   @ Data.Functor.Identity.Identity
                   @ GHC.Base.String
                   @ Lang.Huginn.AST.Expr
                   Lang.Huginn.Parser.elseStatement2
                   Lang.Huginn.Parser.array1
                     `cast`
                   (Sym (Text.Parsec.Prim.N:ParsecT[0]
                             <[GHC.Types.Char]>_R
                             <()>_R
                             <Data.Functor.Identity.Identity>_R
                             <Lang.Huginn.AST.Expr>_R))) -}
333a06501a73cdca4eb91e8247e18b8e
  elseStatement2 ::
    Text.Parsec.Prim.ParsecT
      GHC.Base.String () Data.Functor.Identity.Identity GHC.Base.String
  {- Unfolding: (case Lang.Huginn.Parser.lexer of wild { Text.Parsec.Token.TokenParser ds ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ds26 ds27 ds28 ->
                 ds14
                   @ GHC.Base.String
                   Lang.Huginn.Parser.elseStatement3
                     `cast`
                   (Sym (Text.Parsec.Prim.N:ParsecT[0]
                             <GHC.Base.String>_R
                             <()>_R
                             <Data.Functor.Identity.Identity>_R
                             <[GHC.Types.Char]>_R)) }) -}
2075013414f3189baf679de2c1ef4065
  elseStatement3 ::
    Text.Parsec.Prim.State GHC.Base.String ()
    -> ([GHC.Types.Char]
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> ([GHC.Types.Char]
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Arity: 5,
     Unfolding: (Text.Parsec.Char.string1
                   @ GHC.Base.String
                   @ Data.Functor.Identity.Identity
                   @ ()
                   (Lang.Huginn.Parser.$s$fStream[]mtok @ GHC.Types.Char)
                   Lang.Huginn.Parser.elseStatement4) -}
bc392ec3b067adc69775ed0d9f00718d
  elseStatement4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "else"#) -}
413b0f2e932aa96277974b4b46c3d3c5
  expr :: Text.Parsec.String.Parser Lang.Huginn.AST.Expr
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,U><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                Lang.Huginn.Parser.array1
                  `cast`
                (Sym (Text.Parsec.Prim.N:ParsecT[0]
                          <[GHC.Types.Char]>_R
                          <()>_R
                          <Data.Functor.Identity.Identity>_R
                          <Lang.Huginn.AST.Expr>_R)) -}
32c508e25364174a9a979cec3e367e0b
  exprPython :: Text.Parsec.String.Parser Lang.Huginn.AST.Expr
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,C(U)><L,U><L,C(U)><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                Lang.Huginn.Parser.closure6
                  `cast`
                (Sym (Text.Parsec.Prim.N:ParsecT[0]
                          <[GHC.Types.Char]>_R
                          <()>_R
                          <Data.Functor.Identity.Identity>_R
                          <Lang.Huginn.AST.Expr>_R)) -}
634cdda66ebd6f1d3995ea5d88042b5a
  file :: Text.Parsec.String.Parser [GHC.Base.String]
  {- Arity: 5,
     Unfolding: InlineRule (0, True, True)
                Lang.Huginn.Parser.file1
                  `cast`
                (Sym (Text.Parsec.Prim.N:ParsecT[0]
                          <[GHC.Types.Char]>_R
                          <()>_R
                          <Data.Functor.Identity.Identity>_R
                          <[GHC.Base.String]>_R)) -}
320462c9471667f9b5bff0c90bb0d4dc
  file1 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> ([GHC.Base.String]
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> ([GHC.Base.String]
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Unfolding: (Text.Parsec.Prim.$fApplicativeParsecT1
                   @ [GHC.Types.Char]
                   @ ()
                   @ Data.Functor.Identity.Identity
                   @ [GHC.Base.String]
                   @ ()
                   Lang.Huginn.Parser.file3
                     `cast`
                   (Sym (Text.Parsec.Prim.N:ParsecT[0]
                             <GHC.Base.String>_R
                             <()>_R
                             <Data.Functor.Identity.Identity>_R
                             <[GHC.Base.String]>_R))
                   Lang.Huginn.Parser.file2
                     `cast`
                   (Sym (Text.Parsec.Prim.N:ParsecT[0]
                             <GHC.Base.String>_R
                             <()>_R
                             <Data.Functor.Identity.Identity>_R
                             <()>_R))) -}
30c0f4c2c99e6792935c49f615607699
  file2 ::
    Text.Parsec.Prim.State GHC.Base.String ()
    -> (()
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (()
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Arity: 5,
     Unfolding: (Text.Parsec.Combinator.eof1
                   @ GHC.Base.String
                   @ Data.Functor.Identity.Identity
                   @ GHC.Types.Char
                   @ ()
                   (Lang.Huginn.Parser.$s$fStream[]mtok @ GHC.Types.Char)
                   GHC.Show.$fShowChar) -}
b4984df5411dee6520be044037676c56
  file3 ::
    Text.Parsec.Prim.State GHC.Base.String ()
    -> ([GHC.Base.String]
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> ([GHC.Base.String]
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,A>,
     Unfolding: InlineRule (5, True, False)
                (\ @ b
                   (w3 :: Text.Parsec.Prim.State GHC.Base.String ())
                   (w4 :: [GHC.Base.String]
                          -> Text.Parsec.Prim.State GHC.Base.String ()
                          -> Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b)
                   (w5 :: Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b)
                   (w6 :: [GHC.Base.String]
                          -> Text.Parsec.Prim.State GHC.Base.String ()
                          -> Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b)
                   (w7 :: Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b) ->
                 Text.Parsec.Combinator.$wsepBy
                   @ GHC.Base.String
                   @ Data.Functor.Identity.Identity
                   @ GHC.Types.Char
                   @ ()
                   @ GHC.Base.String
                   @ GHC.Base.String
                   Lang.Huginn.Parser.file6
                     `cast`
                   (Sym (Text.Parsec.Prim.N:ParsecT[0]
                             <[GHC.Types.Char]>_R
                             <()>_R
                             <Data.Functor.Identity.Identity>_R
                             <[GHC.Types.Char]>_R))
                   Lang.Huginn.Parser.file4
                     `cast`
                   (Sym (Text.Parsec.Prim.N:ParsecT[0]
                             <GHC.Base.String>_R
                             <()>_R
                             <Data.Functor.Identity.Identity>_R
                             <[GHC.Types.Char]>_R))
                   @ b
                   w3
                   w4
                   w5
                   w6) -}
f6f9de0082b44586a13ab60fda4ead26
  file4 ::
    Text.Parsec.Prim.State GHC.Base.String ()
    -> ([GHC.Types.Char]
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> ([GHC.Types.Char]
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Arity: 5,
     Unfolding: (Text.Parsec.Char.string1
                   @ GHC.Base.String
                   @ Data.Functor.Identity.Identity
                   @ ()
                   (Lang.Huginn.Parser.$s$fStream[]mtok @ GHC.Types.Char)
                   Lang.Huginn.Parser.file5) -}
11b2e544c349d8293700a12260dfef8b
  file5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "\n"#) -}
7db1512cf7c5de7b186875a06f1b8d83
  file6 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> ([GHC.Types.Char]
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> ([GHC.Types.Char]
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,A>,
     Unfolding: InlineRule (5, True, True)
                (\ @ b
                   (w1 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                   (w2 :: [GHC.Types.Char]
                          -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                          -> Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b)
                   (w3 :: Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b)
                   (w4 :: [GHC.Types.Char]
                          -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                          -> Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b)
                   (w5 :: Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b) ->
                 Text.Parsec.Prim.$w$cmany
                   @ [GHC.Types.Char]
                   @ ()
                   @ Data.Functor.Identity.Identity
                   @ GHC.Types.Char
                   Lang.Huginn.Parser.file7
                     `cast`
                   (Sym (Text.Parsec.Prim.N:ParsecT[0]
                             <GHC.Base.String>_R
                             <()>_R
                             <Data.Functor.Identity.Identity>_R
                             <GHC.Types.Char>_R))
                   @ b
                   w1
                   w2
                   w3
                   w4) -}
a289155f930c8de412d237a36cbc42af
  file7 ::
    Text.Parsec.Prim.State GHC.Base.String ()
    -> (GHC.Types.Char
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (GHC.Types.Char
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Arity: 5,
     Strictness: <S(LS(LSS)S),1*U(U,U(U,U,U),U)><L,C(C1(C1(U)))><L,A><L,A><L,C(U)>,
     Unfolding: InlineRule (5, True, False)
                (\ @ b
                   (w2 :: Text.Parsec.Prim.State GHC.Base.String ())
                   (w3 :: GHC.Types.Char
                          -> Text.Parsec.Prim.State GHC.Base.String ()
                          -> Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b)
                   (w4 :: Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b)
                   (w5 :: GHC.Types.Char
                          -> Text.Parsec.Prim.State GHC.Base.String ()
                          -> Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b)
                   (w6 :: Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b) ->
                 case w2 of ww { Text.Parsec.Prim.State ww1 ww2 ww3 ->
                 case ww2 of ww4 { Text.Parsec.Pos.SourcePos ww5 ww6 ww7 ->
                 Text.Parsec.Char.$wnoneOf
                   @ GHC.Base.String
                   @ Data.Functor.Identity.Identity
                   @ ()
                   (Lang.Huginn.Parser.$s$fStream[]mtok @ GHC.Types.Char)
                   Lang.Huginn.Parser.file5
                   @ b
                   ww1
                   ww5
                   ww6
                   ww7
                   ww3
                   w3
                   w6 } }) -}
e99eeb69528f8bef80818a291e7cb06b
  formula :: Text.Parsec.String.Parser Lang.Huginn.AST.Expr
  {- Arity: 5,
     Unfolding: InlineRule (0, True, True)
                Lang.Huginn.Parser.formula1
                  `cast`
                (Sym (Text.Parsec.Prim.N:ParsecT[0]
                          <[GHC.Types.Char]>_R
                          <()>_R
                          <Data.Functor.Identity.Identity>_R
                          <Lang.Huginn.AST.Expr>_R)) -}
53d5cda049cd5a191832414489f28c10
  formula1 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (Lang.Huginn.AST.Expr
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Lang.Huginn.AST.Expr
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Unfolding: (Text.Parsec.Prim.$fApplicativeParsecT1
                   @ [GHC.Types.Char]
                   @ ()
                   @ Data.Functor.Identity.Identity
                   @ Lang.Huginn.AST.Expr
                   @ ()
                   Lang.Huginn.Parser.closure2
                     `cast`
                   (Sym (Text.Parsec.Prim.N:ParsecT[0]
                             <[GHC.Types.Char]>_R
                             <()>_R
                             <Data.Functor.Identity.Identity>_R
                             <Lang.Huginn.AST.Expr>_R))
                   Lang.Huginn.Parser.file2
                     `cast`
                   (Sym (Text.Parsec.Prim.N:ParsecT[0]
                             <GHC.Base.String>_R
                             <()>_R
                             <Data.Functor.Identity.Identity>_R
                             <()>_R))) -}
1f9eebf988cd12b1029e0e9e5f555634
  ifStatement :: Text.Parsec.String.Parser Lang.Huginn.AST.Expr
  {- Arity: 5,
     Strictness: <L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,U>,
     Unfolding: InlineRule (0, True, True)
                Lang.Huginn.Parser.closure7
                  `cast`
                (Sym (Text.Parsec.Prim.N:ParsecT[0]
                          <[GHC.Types.Char]>_R
                          <()>_R
                          <Data.Functor.Identity.Identity>_R
                          <Lang.Huginn.AST.Expr>_R)) -}
8d7062aa379fd3ed504d65d67ad64033
  integer ::
    Text.Parsec.Prim.ParsecT
      GHC.Base.String
      ()
      Data.Functor.Identity.Identity
      GHC.Integer.Type.Integer
  {- Unfolding: (case Lang.Huginn.Parser.lexer of wild { Text.Parsec.Token.TokenParser ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ds26 ds27 ds28 ds29 ->
                 ds8 }) -}
5bc49ff30ca3b8bfb254e26dd50acabb
  lexeme ::
    Text.Parsec.Prim.ParsecT
      GHC.Base.String () Data.Functor.Identity.Identity a
    -> Text.Parsec.Prim.ParsecT
         GHC.Base.String () Data.Functor.Identity.Identity a
  {- Unfolding: (\ @ a ->
                 case Lang.Huginn.Parser.lexer of wild { Text.Parsec.Token.TokenParser ds ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ds26 ds27 ds28 ->
                 ds14 @ a }) -}
f298822af126f1ff121391f10d5333d2
  lexer :: Text.Parsec.Token.TokenParser ()
  {- Unfolding: (Text.Parsec.Token.makeTokenParser
                   @ GHC.Base.String
                   @ Data.Functor.Identity.Identity
                   @ ()
                   (Lang.Huginn.Parser.$s$fStream[]mtok @ GHC.Types.Char)
                   Lang.Huginn.Parser.lexer1) -}
793b50ec7de0a1abc1b3f68c1faede43
  lexer1 ::
    Text.Parsec.Token.GenLanguageDef
      GHC.Base.String () Data.Functor.Identity.Identity
  {- Unfolding: (Text.Parsec.Token.LanguageDef
                   @ GHC.Base.String
                   @ ()
                   @ Data.Functor.Identity.Identity
                   Text.Parsec.Language.haskellDef85
                   Text.Parsec.Language.haskellDef84
                   Text.Parsec.Language.haskellDef83
                   GHC.Types.True
                   (Text.Parsec.Language.haskellDef81 @ ())
                     `cast`
                   (Sym (Text.Parsec.Prim.N:ParsecT[0]
                             <GHC.Base.String>_R
                             <()>_R
                             <Data.Functor.Identity.Identity>_R
                             <GHC.Types.Char>_R))
                   (Text.Parsec.Language.haskellDef78 @ ())
                     `cast`
                   (Sym (Text.Parsec.Prim.N:ParsecT[0]
                             <GHC.Base.String>_R
                             <()>_R
                             <Data.Functor.Identity.Identity>_R
                             <GHC.Types.Char>_R))
                   (Text.Parsec.Language.haskellDef77 @ ())
                     `cast`
                   (Sym (Text.Parsec.Prim.N:ParsecT[0]
                             <GHC.Base.String>_R
                             <()>_R
                             <Data.Functor.Identity.Identity>_R
                             <GHC.Types.Char>_R))
                   (Text.Parsec.Language.haskellDef77 @ ())
                     `cast`
                   (Sym (Text.Parsec.Prim.N:ParsecT[0]
                             <GHC.Base.String>_R
                             <()>_R
                             <Data.Functor.Identity.Identity>_R
                             <GHC.Types.Char>_R))
                   Text.Parsec.Language.haskellDef21
                   Lang.Huginn.Parser.lexer2
                   GHC.Types.True) -}
8afdb5169801a274000f5d5a8812ac9b
  lexer10 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "*"#) -}
7077a2173bf6d710daa786dc1689be46
  lexer11 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "-"#) -}
abae204b6d4ec10ccca47adbc1828b80
  lexer12 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "+"#) -}
4ae411c7e605f83b415ff6a00c102ed9
  lexer13 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "^"#) -}
d1a3088086e28cf6d00e8f8ec128b1e1
  lexer14 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "="#) -}
d68e4ca6cb6b29a47fe13f8a41127408
  lexer15 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "=="#) -}
0d0a646a7e918aca791613b3c2e9560b
  lexer2 :: [GHC.Base.String]
  {- Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   Lang.Huginn.Parser.lexer15
                   Lang.Huginn.Parser.lexer3) -}
1597a422914c53eed617a51fdfb3c30c
  lexer3 :: [GHC.Base.String]
  {- Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   Lang.Huginn.Parser.lexer14
                   Lang.Huginn.Parser.lexer4) -}
2540b2de3c6a72bfc8b8c2c2c98d33b8
  lexer4 :: [GHC.Base.String]
  {- Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   Lang.Huginn.Parser.lexer13
                   Lang.Huginn.Parser.lexer5) -}
f3ff63d79ceb7a88b3f6dd77ae858e9a
  lexer5 :: [GHC.Base.String]
  {- Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   Lang.Huginn.Parser.lexer12
                   Lang.Huginn.Parser.lexer6) -}
0b938fedff4ba5f118c29acf68538d06
  lexer6 :: [GHC.Base.String]
  {- Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   Lang.Huginn.Parser.lexer11
                   Lang.Huginn.Parser.lexer7) -}
c953436a554a93f1aec606d91007c47c
  lexer7 :: [GHC.Base.String]
  {- Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   Lang.Huginn.Parser.lexer10
                   Lang.Huginn.Parser.lexer8) -}
ba5b4d5ffd843df0654a8b58d3833893
  lexer8 :: [GHC.Base.String]
  {- Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   Lang.Huginn.Parser.lexer9
                   (GHC.Types.[] @ GHC.Base.String)) -}
bb3324e379ea8bee71313151ea33481f
  lexer9 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "/"#) -}
55d3c60c752887799258a84ab0750efd
  line :: Text.Parsec.String.Parser GHC.Base.String
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,A>,
     Unfolding: InlineRule (0, True, True)
                Lang.Huginn.Parser.file6
                  `cast`
                (Sym (Text.Parsec.Prim.N:ParsecT[0]
                          <[GHC.Types.Char]>_R
                          <()>_R
                          <Data.Functor.Identity.Identity>_R
                          <[GHC.Types.Char]>_R)) -}
a7543c1e8bd978839bcaae6f7e761af7
  mkFnRec ::
    t
    -> GHC.Base.String
    -> (t,
        Data.Either.Either
          Text.Parsec.Error.ParseError Lang.Huginn.AST.Expr)
  {- Arity: 2, Strictness: <L,U><L,U>m,
     Unfolding: InlineRule (2, True, False)
                (\ @ t (name :: t) (fn :: GHC.Base.String) ->
                 (name,
                  (Text.Parsec.Prim.runPT
                     @ GHC.Base.String
                     @ Data.Functor.Identity.Identity
                     @ GHC.Types.Char
                     @ ()
                     @ Lang.Huginn.AST.Expr
                     (Lang.Huginn.Parser.$s$fStream[]mtok @ GHC.Types.Char)
                     Lang.Huginn.Parser.formula1
                       `cast`
                     (Sym (Text.Parsec.Prim.N:ParsecT[0]
                               <[GHC.Types.Char]>_R
                               <()>_R
                               <Data.Functor.Identity.Identity>_R
                               <Lang.Huginn.AST.Expr>_R))
                     GHC.Tuple.()
                     Lang.Huginn.Parser.mkFnRec1
                     fn)
                    `cast`
                  (Data.Functor.Identity.N:Identity[0]
                       <Data.Either.Either
                          Text.Parsec.Error.ParseError Lang.Huginn.AST.Expr>_R))) -}
dc4db07b7dd1269a9e1df69f9309097b
  mkFnRec1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Parse error"#) -}
3e4f3d31fa59ee56876e539a69c9887a
  mkInstanceRow ::
    t
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> (t, Lang.Huginn.Eval.EnvEntry)
  {- Arity: 4, Strictness: <L,U><L,U><L,U><L,U>m,
     Unfolding: InlineRule (4, True, False)
                (\ @ t
                   (i :: t)
                   (name :: GHC.Base.String)
                   (value :: GHC.Base.String)
                   (value_type :: GHC.Base.String) ->
                 (i, Lang.Huginn.Parser.readExpr name value value_type)) -}
d51f1fe7dd227d4ab0ab25bf3132a683
  mkRow :: t -> t1 -> t2 -> t3 -> (t, t1, t2, t3)
  {- Arity: 4, HasNoCafRefs, Strictness: <L,U><L,U><L,U><L,U>m,
     Unfolding: InlineRule (0, True, True) GHC.Tuple.(,,,) -}
6d0c2dcbbee9df821d37a91f7926ac91
  mkTestRow ::
    t
    -> t1
    -> GHC.Base.String
    -> GHC.Base.String
    -> (t, t1, GHC.Types.Double, GHC.Types.Double, GHC.Types.Bool)
  {- Arity: 4, Strictness: <L,U><L,U><L,U><L,U>m, Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ @ t
                   @ t1
                   (w :: t)
                   (w1 :: t1)
                   (w2 :: GHC.Base.String)
                   (w3 :: GHC.Base.String) ->
                 case Lang.Huginn.Parser.$wmkTestRow
                        @ t
                        @ t1
                        w
                        w1
                        w2
                        w3 of ww { (#,,,,#) ww1 ww2 ww3 ww4 ww5 ->
                 (ww1, ww2, ww3, ww4, ww5) }) -}
7b34db2bbe0e7277fa53b8825c197b49
  mkTestRow1 :: GHC.Types.Double
  {- Strictness: x -}
725908f270803d496b63f1a30f1284e9
  mkTestRow2 :: GHC.Types.Double
  {- Strictness: x -}
96c5628ae55c7be73706f4d3cd56aa0f
  natural ::
    Text.Parsec.Prim.ParsecT
      GHC.Base.String
      ()
      Data.Functor.Identity.Identity
      GHC.Integer.Type.Integer
  {- Unfolding: (case Lang.Huginn.Parser.lexer of wild { Text.Parsec.Token.TokenParser ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ds26 ds27 ds28 ds29 ->
                 ds7 }) -}
34b4b7f978b9423f8bb601d6cd741483
  noZero :: Text.Parsec.String.Parser GHC.Base.String
  {- Arity: 5,
     Strictness: <L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,U>,
     Unfolding: InlineRule (0, True, True)
                Lang.Huginn.Parser.readExpr8
                  `cast`
                (Sym (Text.Parsec.Prim.N:ParsecT[0]
                          <[GHC.Types.Char]>_R
                          <()>_R
                          <Data.Functor.Identity.Identity>_R
                          <GHC.Base.String>_R)) -}
dfb3e2bee9d651e04a8316423c9947a4
  notTabDelim ::
    Text.Parsec.Prim.ParsecT
      GHC.Base.String u Data.Functor.Identity.Identity [GHC.Types.Char]
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,A>,
     Unfolding: InlineRule (0, True, True)
                Lang.Huginn.Parser.notTabDelim1
                  `cast`
                (forall (u :: <*>_N).
                 Sym (Text.Parsec.Prim.N:ParsecT[0]
                          <GHC.Base.String>_R
                          <u>_R
                          <Data.Functor.Identity.Identity>_R
                          <[GHC.Types.Char]>_R)) -}
94c2f30053ce058e2f128af39ad15332
  notTabDelim1 ::
    Text.Parsec.Prim.State GHC.Base.String u
    -> ([GHC.Types.Char]
        -> Text.Parsec.Prim.State GHC.Base.String u
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> ([GHC.Types.Char]
        -> Text.Parsec.Prim.State GHC.Base.String u
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,A>,
     Unfolding: InlineRule (5, True, True)
                (\ @ u
                   @ b
                   (w1 :: Text.Parsec.Prim.State GHC.Base.String u)
                   (w2 :: [GHC.Types.Char]
                          -> Text.Parsec.Prim.State GHC.Base.String u
                          -> Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b)
                   (w3 :: Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b)
                   (w4 :: [GHC.Types.Char]
                          -> Text.Parsec.Prim.State GHC.Base.String u
                          -> Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b)
                   (w5 :: Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b) ->
                 Text.Parsec.Prim.$w$cmany
                   @ GHC.Base.String
                   @ u
                   @ Data.Functor.Identity.Identity
                   @ GHC.Types.Char
                   (Lang.Huginn.Parser.notTabDelim2 @ u)
                     `cast`
                   (Sym (Text.Parsec.Prim.N:ParsecT[0]
                             <GHC.Base.String>_R
                             <u>_R
                             <Data.Functor.Identity.Identity>_R
                             <GHC.Types.Char>_R))
                   @ b
                   w1
                   w2
                   w3
                   w4) -}
c5b06e8524cbc51cf0aeeab1ef6b4b74
  notTabDelim2 ::
    Text.Parsec.Prim.State GHC.Base.String u
    -> (GHC.Types.Char
        -> Text.Parsec.Prim.State GHC.Base.String u
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (GHC.Types.Char
        -> Text.Parsec.Prim.State GHC.Base.String u
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Arity: 5,
     Strictness: <S(LS(LSS)S),1*U(U,U(U,U,U),U)><L,C(C1(C1(U)))><L,A><L,A><L,C(U)>,
     Unfolding: InlineRule (5, True, False)
                (\ @ u
                   @ b
                   (w2 :: Text.Parsec.Prim.State GHC.Base.String u)
                   (w3 :: GHC.Types.Char
                          -> Text.Parsec.Prim.State GHC.Base.String u
                          -> Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b)
                   (w4 :: Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b)
                   (w5 :: GHC.Types.Char
                          -> Text.Parsec.Prim.State GHC.Base.String u
                          -> Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b)
                   (w6 :: Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b) ->
                 case w2 of ww { Text.Parsec.Prim.State ww1 ww2 ww3 ->
                 case ww2 of ww4 { Text.Parsec.Pos.SourcePos ww5 ww6 ww7 ->
                 Text.Parsec.Char.$wnoneOf
                   @ GHC.Base.String
                   @ Data.Functor.Identity.Identity
                   @ u
                   (Lang.Huginn.Parser.$s$fStream[]mtok @ GHC.Types.Char)
                   Lang.Huginn.Parser.notTabDelim3
                   @ b
                   ww1
                   ww5
                   ww6
                   ww7
                   ww3
                   w3
                   w6 } }) -}
335b8dc8b3eb5f67dbff930da037ed2e
  notTabDelim3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "\t\n"#) -}
0a3b1e6df91d99068c85c135651d34f1
  number ::
    Text.Parsec.Prim.ParsecT
      [GHC.Types.Char] () Data.Functor.Identity.Identity GHC.Types.Double
  {- Arity: 5, Strictness: <L,U><L,U><L,U><L,U><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                Lang.Huginn.Parser.readExpr7
                  `cast`
                (Sym (Text.Parsec.Prim.N:ParsecT[0]
                          <[GHC.Types.Char]>_R
                          <()>_R
                          <Data.Functor.Identity.Identity>_R
                          <GHC.Types.Double>_R)) -}
287542d5eec237afc87224029d95457d
  parens ::
    Text.Parsec.Prim.ParsecT
      GHC.Base.String () Data.Functor.Identity.Identity a
    -> Text.Parsec.Prim.ParsecT
         GHC.Base.String () Data.Functor.Identity.Identity a
  {- Unfolding: (\ @ a ->
                 case Lang.Huginn.Parser.lexer of wild { Text.Parsec.Token.TokenParser ds ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ds26 ds27 ds28 ->
                 ds16 @ a }) -}
6e706d09c9705d0574afa211e65d84e5
  parseExpr ::
    GHC.Base.String
    -> Data.Either.Either
         Text.Parsec.Error.ParseError Lang.Huginn.AST.Expr
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Lang.Huginn.Parser.parseExpr1
                  `cast`
                (<GHC.Base.String>_R
                 ->_R Data.Functor.Identity.N:Identity[0]
                          <Data.Either.Either
                             Text.Parsec.Error.ParseError Lang.Huginn.AST.Expr>_R) -}
74c5df7f9f535f5af4addabf530f926d
  parseExpr1 ::
    GHC.Base.String
    -> Data.Functor.Identity.Identity
         (Data.Either.Either
            Text.Parsec.Error.ParseError Lang.Huginn.AST.Expr)
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (s1 :: GHC.Base.String) ->
                 Text.Parsec.Prim.runPT
                   @ GHC.Base.String
                   @ Data.Functor.Identity.Identity
                   @ GHC.Types.Char
                   @ ()
                   @ Lang.Huginn.AST.Expr
                   (Lang.Huginn.Parser.$s$fStream[]mtok @ GHC.Types.Char)
                   Lang.Huginn.Parser.formula1
                     `cast`
                   (Sym (Text.Parsec.Prim.N:ParsecT[0]
                             <[GHC.Types.Char]>_R
                             <()>_R
                             <Data.Functor.Identity.Identity>_R
                             <Lang.Huginn.AST.Expr>_R))
                   GHC.Tuple.()
                   Lang.Huginn.Parser.mkFnRec1
                   s1) -}
ad2f5fa89cc6a067f184c2103afda68e
  parseTSVFunctions ::
    GHC.Base.String
    -> Data.Either.Either
         Text.Parsec.Error.ParseError
         [(GHC.Base.String,
           Data.Either.Either
             Text.Parsec.Error.ParseError Lang.Huginn.AST.Expr)]
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Lang.Huginn.Parser.parseTSVFunctions1
                  `cast`
                (<GHC.Base.String>_R
                 ->_R Data.Functor.Identity.N:Identity[0]
                          <Data.Either.Either
                             Text.Parsec.Error.ParseError
                             [(GHC.Base.String,
                               Data.Either.Either
                                 Text.Parsec.Error.ParseError Lang.Huginn.AST.Expr)]>_R) -}
a74046c4f2151b6e9259942c35f8023c
  parseTSVFunctions1 ::
    GHC.Base.String
    -> Data.Functor.Identity.Identity
         (Data.Either.Either
            Text.Parsec.Error.ParseError
            [(GHC.Base.String,
              Data.Either.Either
                Text.Parsec.Error.ParseError Lang.Huginn.AST.Expr)])
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (s1 :: GHC.Base.String) ->
                 Text.Parsec.Prim.runPT
                   @ GHC.Base.String
                   @ Data.Functor.Identity.Identity
                   @ GHC.Types.Char
                   @ ()
                   @ [(GHC.Base.String,
                       Data.Either.Either
                         Text.Parsec.Error.ParseError Lang.Huginn.AST.Expr)]
                   (Lang.Huginn.Parser.$s$fStream[]mtok @ GHC.Types.Char)
                   Lang.Huginn.Parser.parseTSVFunctions3
                     `cast`
                   (Sym (Text.Parsec.Prim.N:ParsecT[0]
                             <[GHC.Types.Char]>_R
                             <()>_R
                             <Data.Functor.Identity.Identity>_R
                             <[(GHC.Base.String,
                                Data.Either.Either
                                  Text.Parsec.Error.ParseError Lang.Huginn.AST.Expr)]>_R))
                   GHC.Tuple.()
                   Lang.Huginn.Parser.parseTSVFunctions2
                   s1) -}
3fd8456a40109dbe0a2674210b460a7f
  parseTSVFunctions2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ERROR"#) -}
5c45e00268e25fbd886fc3e1bb78f74e
  parseTSVFunctions3 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> ([(GHC.Base.String,
          Data.Either.Either
            Text.Parsec.Error.ParseError Lang.Huginn.AST.Expr)]
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> ([(GHC.Base.String,
          Data.Either.Either
            Text.Parsec.Error.ParseError Lang.Huginn.AST.Expr)]
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Unfolding: (Text.Parsec.Prim.$fApplicativeParsecT1
                   @ [GHC.Types.Char]
                   @ ()
                   @ Data.Functor.Identity.Identity
                   @ [(GHC.Base.String,
                       Data.Either.Either
                         Text.Parsec.Error.ParseError Lang.Huginn.AST.Expr)]
                   @ ()
                   Lang.Huginn.Parser.parseTSVFunctions4
                     `cast`
                   (Sym (Text.Parsec.Prim.N:ParsecT[0]
                             <GHC.Base.String>_R
                             <()>_R
                             <Data.Functor.Identity.Identity>_R
                             <[(GHC.Base.String,
                                Data.Either.Either
                                  Text.Parsec.Error.ParseError Lang.Huginn.AST.Expr)]>_R))
                   Lang.Huginn.Parser.file2
                     `cast`
                   (Sym (Text.Parsec.Prim.N:ParsecT[0]
                             <GHC.Base.String>_R
                             <()>_R
                             <Data.Functor.Identity.Identity>_R
                             <()>_R))) -}
d1b5bfa34d70ead437021d22acd8f1ce
  parseTSVFunctions4 ::
    Text.Parsec.Prim.State GHC.Base.String ()
    -> ([(GHC.Base.String,
          Data.Either.Either
            Text.Parsec.Error.ParseError Lang.Huginn.AST.Expr)]
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> ([(GHC.Base.String,
          Data.Either.Either
            Text.Parsec.Error.ParseError Lang.Huginn.AST.Expr)]
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,A>,
     Unfolding: InlineRule (5, True, False)
                (\ @ b
                   (w3 :: Text.Parsec.Prim.State GHC.Base.String ())
                   (w4 :: [(GHC.Base.String,
                            Data.Either.Either
                              Text.Parsec.Error.ParseError Lang.Huginn.AST.Expr)]
                          -> Text.Parsec.Prim.State GHC.Base.String ()
                          -> Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b)
                   (w5 :: Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b)
                   (w6 :: [(GHC.Base.String,
                            Data.Either.Either
                              Text.Parsec.Error.ParseError Lang.Huginn.AST.Expr)]
                          -> Text.Parsec.Prim.State GHC.Base.String ()
                          -> Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b)
                   (w7 :: Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b) ->
                 Text.Parsec.Combinator.$wendBy
                   @ GHC.Base.String
                   @ Data.Functor.Identity.Identity
                   @ GHC.Types.Char
                   @ ()
                   @ (GHC.Base.String,
                      Data.Either.Either
                        Text.Parsec.Error.ParseError Lang.Huginn.AST.Expr)
                   @ GHC.Base.String
                   Lang.Huginn.Parser.parseTSVFunctions5
                     `cast`
                   (Sym (Text.Parsec.Prim.N:ParsecT[0]
                             <[GHC.Types.Char]>_R
                             <()>_R
                             <Data.Functor.Identity.Identity>_R
                             <(GHC.Base.String,
                               Data.Either.Either
                                 Text.Parsec.Error.ParseError Lang.Huginn.AST.Expr)>_R))
                   Lang.Huginn.Parser.file4
                     `cast`
                   (Sym (Text.Parsec.Prim.N:ParsecT[0]
                             <GHC.Base.String>_R
                             <()>_R
                             <Data.Functor.Identity.Identity>_R
                             <[GHC.Types.Char]>_R))
                   @ b
                   w3
                   w4
                   w5
                   w6) -}
e9def4931d4e0d626fcc88240b9d22be
  parseTSVFunctions5 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> ((GHC.Base.String,
         Data.Either.Either
           Text.Parsec.Error.ParseError Lang.Huginn.AST.Expr)
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> ((GHC.Base.String,
         Data.Either.Either
           Text.Parsec.Error.ParseError Lang.Huginn.AST.Expr)
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Unfolding: (Text.Parsec.Prim.$fAlternativeParsecT2
                   @ [GHC.Types.Char]
                   @ ()
                   @ Data.Functor.Identity.Identity
                   @ GHC.Base.String
                   @ (GHC.Base.String,
                      Data.Either.Either
                        Text.Parsec.Error.ParseError Lang.Huginn.AST.Expr)
                   Lang.Huginn.Parser.parseTSVFunctions9
                     `cast`
                   (Sym (Text.Parsec.Prim.N:ParsecT[0]
                             <[GHC.Types.Char]>_R
                             <()>_R
                             <Data.Functor.Identity.Identity>_R
                             <GHC.Base.String
                              -> (GHC.Base.String,
                                  Data.Either.Either
                                    Text.Parsec.Error.ParseError Lang.Huginn.AST.Expr)>_R))
                   Lang.Huginn.Parser.parseTSVFunctions6
                     `cast`
                   (Sym (Text.Parsec.Prim.N:ParsecT[0]
                             <[GHC.Types.Char]>_R
                             <()>_R
                             <Data.Functor.Identity.Identity>_R
                             <GHC.Base.String>_R))) -}
6f841326e8405c180c79f67bb1647d34
  parseTSVFunctions6 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (GHC.Base.String
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (GHC.Base.String
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Unfolding: (Text.Parsec.Prim.$fApplicativeParsecT2
                   @ [GHC.Types.Char]
                   @ ()
                   @ Data.Functor.Identity.Identity
                   @ GHC.Types.Char
                   @ GHC.Base.String
                   Lang.Huginn.Parser.parseTSVFunctions8
                   Lang.Huginn.Parser.parseTSVFunctions7
                     `cast`
                   (Sym (Text.Parsec.Prim.N:ParsecT[0]
                             <[GHC.Types.Char]>_R
                             <()>_R
                             <Data.Functor.Identity.Identity>_R
                             <GHC.Base.String>_R))) -}
79ac80fb888463927fb051d70a21bf6a
  parseTSVFunctions7 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (GHC.Base.String
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (GHC.Base.String
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Arity: 5, Strictness: <L,U(U,U(U,U,U),U)><L,U><L,U><L,U><L,A>,
     Inline: INLINE[0],
     Unfolding: InlineRule (5, True, True)
                (\ @ b
                   (w :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                   (w1 :: GHC.Base.String
                          -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                          -> Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b)
                   (w2 :: Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b)
                   (w3 :: GHC.Base.String
                          -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                          -> Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b)
                   (w4 :: Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b) ->
                 Lang.Huginn.Parser.$wtsvCell @ b w w1 w2 w3) -}
03addf95a6bb29bacbb6edd27a5ec2a5
  parseTSVFunctions8 ::
    Text.Parsec.Prim.ParsecT
      GHC.Base.String () Data.Functor.Identity.Identity GHC.Types.Char
  {- Unfolding: (Text.Parsec.Char.tab
                   @ GHC.Base.String
                   @ Data.Functor.Identity.Identity
                   @ ()
                   (Lang.Huginn.Parser.$s$fStream[]mtok @ GHC.Types.Char)) -}
e015b80df6d14de5399ac9c20ad6924e
  parseTSVFunctions9 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> ((GHC.Base.String
         -> (GHC.Base.String,
             Data.Either.Either
               Text.Parsec.Error.ParseError Lang.Huginn.AST.Expr))
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> ((GHC.Base.String
         -> (GHC.Base.String,
             Data.Either.Either
               Text.Parsec.Error.ParseError Lang.Huginn.AST.Expr))
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,C(U)><L,U><L,C(U)><L,A>,
     Inline: INLINE[0],
     Unfolding: InlineRule (5, True, True)
                (\ @ b1
                   (w :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                   (w1 :: (GHC.Base.String
                           -> (GHC.Base.String,
                               Data.Either.Either
                                 Text.Parsec.Error.ParseError Lang.Huginn.AST.Expr))
                          -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                          -> Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b1)
                   (w2 :: Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b1)
                   (w3 :: (GHC.Base.String
                           -> (GHC.Base.String,
                               Data.Either.Either
                                 Text.Parsec.Error.ParseError Lang.Huginn.AST.Expr))
                          -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                          -> Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b1)
                   (w4 :: Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b1) ->
                 Lang.Huginn.Parser.$wtsvFunction @ b1 w w1 w2 w3) -}
68119739e364f1914d5bdb1e7c56984f
  parseTSVInstances ::
    GHC.Base.String
    -> Data.Either.Either
         Text.Parsec.Error.ParseError
         [(GHC.Integer.Type.Integer, Lang.Huginn.Eval.EnvEntry)]
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Lang.Huginn.Parser.parseTSVInstances1
                  `cast`
                (<GHC.Base.String>_R
                 ->_R Data.Functor.Identity.N:Identity[0]
                          <Data.Either.Either
                             Text.Parsec.Error.ParseError
                             [(GHC.Integer.Type.Integer, Lang.Huginn.Eval.EnvEntry)]>_R) -}
f0d66928d6f36ace7f580779eadf7d4f
  parseTSVInstances1 ::
    GHC.Base.String
    -> Data.Functor.Identity.Identity
         (Data.Either.Either
            Text.Parsec.Error.ParseError
            [(GHC.Integer.Type.Integer, Lang.Huginn.Eval.EnvEntry)])
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (s1 :: GHC.Base.String) ->
                 Text.Parsec.Prim.runPT
                   @ GHC.Base.String
                   @ Data.Functor.Identity.Identity
                   @ GHC.Types.Char
                   @ ()
                   @ [(GHC.Integer.Type.Integer, Lang.Huginn.Eval.EnvEntry)]
                   (Lang.Huginn.Parser.$s$fStream[]mtok @ GHC.Types.Char)
                   Lang.Huginn.Parser.parseTSVInstances2
                     `cast`
                   (Sym (Text.Parsec.Prim.N:ParsecT[0]
                             <[GHC.Types.Char]>_R
                             <()>_R
                             <Data.Functor.Identity.Identity>_R
                             <[(GHC.Integer.Type.Integer, Lang.Huginn.Eval.EnvEntry)]>_R))
                   GHC.Tuple.()
                   Lang.Huginn.Parser.parseTSVFunctions2
                   s1) -}
a27f7b2567846746f900ce32594a92fe
  parseTSVInstances2 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> ([(GHC.Integer.Type.Integer, Lang.Huginn.Eval.EnvEntry)]
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> ([(GHC.Integer.Type.Integer, Lang.Huginn.Eval.EnvEntry)]
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Unfolding: (Text.Parsec.Prim.$fApplicativeParsecT1
                   @ [GHC.Types.Char]
                   @ ()
                   @ Data.Functor.Identity.Identity
                   @ [(GHC.Integer.Type.Integer, Lang.Huginn.Eval.EnvEntry)]
                   @ ()
                   Lang.Huginn.Parser.parseTSVInstances3
                     `cast`
                   (Sym (Text.Parsec.Prim.N:ParsecT[0]
                             <GHC.Base.String>_R
                             <()>_R
                             <Data.Functor.Identity.Identity>_R
                             <[(GHC.Integer.Type.Integer, Lang.Huginn.Eval.EnvEntry)]>_R))
                   Lang.Huginn.Parser.file2
                     `cast`
                   (Sym (Text.Parsec.Prim.N:ParsecT[0]
                             <GHC.Base.String>_R
                             <()>_R
                             <Data.Functor.Identity.Identity>_R
                             <()>_R))) -}
83fca93f46003355ab12da497cfb540e
  parseTSVInstances3 ::
    Text.Parsec.Prim.State GHC.Base.String ()
    -> ([(GHC.Integer.Type.Integer, Lang.Huginn.Eval.EnvEntry)]
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> ([(GHC.Integer.Type.Integer, Lang.Huginn.Eval.EnvEntry)]
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,A>,
     Unfolding: InlineRule (5, True, False)
                (\ @ b
                   (w3 :: Text.Parsec.Prim.State GHC.Base.String ())
                   (w4 :: [(GHC.Integer.Type.Integer, Lang.Huginn.Eval.EnvEntry)]
                          -> Text.Parsec.Prim.State GHC.Base.String ()
                          -> Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b)
                   (w5 :: Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b)
                   (w6 :: [(GHC.Integer.Type.Integer, Lang.Huginn.Eval.EnvEntry)]
                          -> Text.Parsec.Prim.State GHC.Base.String ()
                          -> Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b)
                   (w7 :: Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b) ->
                 Text.Parsec.Combinator.$wendBy
                   @ GHC.Base.String
                   @ Data.Functor.Identity.Identity
                   @ GHC.Types.Char
                   @ ()
                   @ (GHC.Integer.Type.Integer, Lang.Huginn.Eval.EnvEntry)
                   @ GHC.Base.String
                   Lang.Huginn.Parser.parseTSVInstances4
                     `cast`
                   (Sym (Text.Parsec.Prim.N:ParsecT[0]
                             <[GHC.Types.Char]>_R
                             <()>_R
                             <Data.Functor.Identity.Identity>_R
                             <(GHC.Integer.Type.Integer, Lang.Huginn.Eval.EnvEntry)>_R))
                   Lang.Huginn.Parser.file4
                     `cast`
                   (Sym (Text.Parsec.Prim.N:ParsecT[0]
                             <GHC.Base.String>_R
                             <()>_R
                             <Data.Functor.Identity.Identity>_R
                             <[GHC.Types.Char]>_R))
                   @ b
                   w3
                   w4
                   w5
                   w6) -}
dee1a070dfbf8a4910bf9bf150a61882
  parseTSVInstances4 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> ((GHC.Integer.Type.Integer, Lang.Huginn.Eval.EnvEntry)
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> ((GHC.Integer.Type.Integer, Lang.Huginn.Eval.EnvEntry)
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Unfolding: (Text.Parsec.Prim.$fAlternativeParsecT2
                   @ [GHC.Types.Char]
                   @ ()
                   @ Data.Functor.Identity.Identity
                   @ GHC.Base.String
                   @ (GHC.Integer.Type.Integer, Lang.Huginn.Eval.EnvEntry)
                   Lang.Huginn.Parser.parseTSVInstances5
                     `cast`
                   (Sym (Text.Parsec.Prim.N:ParsecT[0]
                             <[GHC.Types.Char]>_R
                             <()>_R
                             <Data.Functor.Identity.Identity>_R
                             <GHC.Base.String
                              -> (GHC.Integer.Type.Integer, Lang.Huginn.Eval.EnvEntry)>_R))
                   Lang.Huginn.Parser.parseTSVFunctions6
                     `cast`
                   (Sym (Text.Parsec.Prim.N:ParsecT[0]
                             <[GHC.Types.Char]>_R
                             <()>_R
                             <Data.Functor.Identity.Identity>_R
                             <GHC.Base.String>_R))) -}
b281d3099fff89f4d84f935be80343df
  parseTSVInstances5 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> ((GHC.Base.String
         -> (GHC.Integer.Type.Integer, Lang.Huginn.Eval.EnvEntry))
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> ((GHC.Base.String
         -> (GHC.Integer.Type.Integer, Lang.Huginn.Eval.EnvEntry))
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Unfolding: (Text.Parsec.Prim.$fAlternativeParsecT2
                   @ [GHC.Types.Char]
                   @ ()
                   @ Data.Functor.Identity.Identity
                   @ GHC.Base.String
                   @ (GHC.Base.String
                      -> (GHC.Integer.Type.Integer, Lang.Huginn.Eval.EnvEntry))
                   Lang.Huginn.Parser.parseTSVInstances6
                     `cast`
                   (Sym (Text.Parsec.Prim.N:ParsecT[0]
                             <[GHC.Types.Char]>_R
                             <()>_R
                             <Data.Functor.Identity.Identity>_R
                             <GHC.Base.String
                              -> GHC.Base.String
                              -> (GHC.Integer.Type.Integer, Lang.Huginn.Eval.EnvEntry)>_R))
                   Lang.Huginn.Parser.parseTSVFunctions6
                     `cast`
                   (Sym (Text.Parsec.Prim.N:ParsecT[0]
                             <[GHC.Types.Char]>_R
                             <()>_R
                             <Data.Functor.Identity.Identity>_R
                             <GHC.Base.String>_R))) -}
d307640e2828cc4ce6bc3e7ee7d5938a
  parseTSVInstances6 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> ((GHC.Base.String
         -> GHC.Base.String
         -> (GHC.Integer.Type.Integer, Lang.Huginn.Eval.EnvEntry))
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> ((GHC.Base.String
         -> GHC.Base.String
         -> (GHC.Integer.Type.Integer, Lang.Huginn.Eval.EnvEntry))
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Unfolding: (Text.Parsec.Prim.$fAlternativeParsecT2
                   @ [GHC.Types.Char]
                   @ ()
                   @ Data.Functor.Identity.Identity
                   @ GHC.Base.String
                   @ (GHC.Base.String
                      -> GHC.Base.String
                      -> (GHC.Integer.Type.Integer, Lang.Huginn.Eval.EnvEntry))
                   Lang.Huginn.Parser.parseTSVInstances7
                     `cast`
                   (Sym (Text.Parsec.Prim.N:ParsecT[0]
                             <[GHC.Types.Char]>_R
                             <()>_R
                             <Data.Functor.Identity.Identity>_R
                             <GHC.Base.String
                              -> GHC.Base.String
                              -> GHC.Base.String
                              -> (GHC.Integer.Type.Integer, Lang.Huginn.Eval.EnvEntry)>_R))
                   Lang.Huginn.Parser.parseTSVFunctions7
                     `cast`
                   (Sym (Text.Parsec.Prim.N:ParsecT[0]
                             <[GHC.Types.Char]>_R
                             <()>_R
                             <Data.Functor.Identity.Identity>_R
                             <GHC.Base.String>_R))) -}
c6389e1c48de5df91c56740560e4fdc5
  parseTSVInstances7 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> ((GHC.Base.String
         -> GHC.Base.String
         -> GHC.Base.String
         -> (GHC.Integer.Type.Integer, Lang.Huginn.Eval.EnvEntry))
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> ((GHC.Base.String
         -> GHC.Base.String
         -> GHC.Base.String
         -> (GHC.Integer.Type.Integer, Lang.Huginn.Eval.EnvEntry))
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5, Strictness: <L,U><L,C(U)><L,U><L,C(U)><L,U>,
     Unfolding: (\ @ b1
                   (s1 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                   (cok :: (GHC.Base.String
                            -> GHC.Base.String
                            -> GHC.Base.String
                            -> (GHC.Integer.Type.Integer, Lang.Huginn.Eval.EnvEntry))
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1)
                   (cerr :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1)
                   (eok :: (GHC.Base.String
                            -> GHC.Base.String
                            -> GHC.Base.String
                            -> (GHC.Integer.Type.Integer, Lang.Huginn.Eval.EnvEntry))
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1)
                   (eerr :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1) ->
                 case Lang.Huginn.Parser.lexer of wild { Text.Parsec.Token.TokenParser ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ds26 ds27 ds28 ds29 ->
                 ds7
                   `cast`
                 (Text.Parsec.Prim.N:ParsecT[0]
                      <[GHC.Types.Char]>_R
                      <()>_R
                      <Data.Functor.Identity.Identity>_R
                      <GHC.Integer.Type.Integer>_R)
                   @ b1
                   s1
                   (\ (x :: GHC.Integer.Type.Integer) ->
                    cok
                      (\ (name :: GHC.Base.String)
                         (value :: GHC.Base.String)
                         (value_type :: GHC.Base.String) ->
                       (x, Lang.Huginn.Parser.readExpr name value value_type)))
                   cerr
                   (\ (x :: GHC.Integer.Type.Integer) ->
                    eok
                      (\ (name :: GHC.Base.String)
                         (value :: GHC.Base.String)
                         (value_type :: GHC.Base.String) ->
                       (x, Lang.Huginn.Parser.readExpr name value value_type)))
                   eerr }) -}
d8c92382b224e20cb0d469a37e777a0a
  parseTSVTestValues ::
    GHC.Base.String
    -> Data.Either.Either
         Text.Parsec.Error.ParseError
         [(GHC.Integer.Type.Integer, GHC.Base.String, GHC.Types.Double,
           GHC.Types.Double, GHC.Types.Bool)]
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Lang.Huginn.Parser.parseTSVTestValues1
                  `cast`
                (<GHC.Base.String>_R
                 ->_R Data.Functor.Identity.N:Identity[0]
                          <Data.Either.Either
                             Text.Parsec.Error.ParseError
                             [(GHC.Integer.Type.Integer, GHC.Base.String, GHC.Types.Double,
                               GHC.Types.Double, GHC.Types.Bool)]>_R) -}
332a35492bda232cb36836a493f800a1
  parseTSVTestValues1 ::
    GHC.Base.String
    -> Data.Functor.Identity.Identity
         (Data.Either.Either
            Text.Parsec.Error.ParseError
            [(GHC.Integer.Type.Integer, GHC.Base.String, GHC.Types.Double,
              GHC.Types.Double, GHC.Types.Bool)])
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (s1 :: GHC.Base.String) ->
                 Text.Parsec.Prim.runPT
                   @ GHC.Base.String
                   @ Data.Functor.Identity.Identity
                   @ GHC.Types.Char
                   @ ()
                   @ [(GHC.Integer.Type.Integer, GHC.Base.String, GHC.Types.Double,
                       GHC.Types.Double, GHC.Types.Bool)]
                   (Lang.Huginn.Parser.$s$fStream[]mtok @ GHC.Types.Char)
                   Lang.Huginn.Parser.parseTSVTestValues2
                     `cast`
                   (Sym (Text.Parsec.Prim.N:ParsecT[0]
                             <[GHC.Types.Char]>_R
                             <()>_R
                             <Data.Functor.Identity.Identity>_R
                             <[(GHC.Integer.Type.Integer, GHC.Base.String, GHC.Types.Double,
                                GHC.Types.Double, GHC.Types.Bool)]>_R))
                   GHC.Tuple.()
                   Lang.Huginn.Parser.parseTSVFunctions2
                   s1) -}
2642356fb3940f2445f0b9fdd440e58a
  parseTSVTestValues2 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> ([(GHC.Integer.Type.Integer, GHC.Base.String, GHC.Types.Double,
          GHC.Types.Double, GHC.Types.Bool)]
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> ([(GHC.Integer.Type.Integer, GHC.Base.String, GHC.Types.Double,
          GHC.Types.Double, GHC.Types.Bool)]
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Unfolding: (Text.Parsec.Prim.$fApplicativeParsecT1
                   @ [GHC.Types.Char]
                   @ ()
                   @ Data.Functor.Identity.Identity
                   @ [(GHC.Integer.Type.Integer, GHC.Base.String, GHC.Types.Double,
                       GHC.Types.Double, GHC.Types.Bool)]
                   @ ()
                   Lang.Huginn.Parser.parseTSVTestValues3
                     `cast`
                   (Sym (Text.Parsec.Prim.N:ParsecT[0]
                             <GHC.Base.String>_R
                             <()>_R
                             <Data.Functor.Identity.Identity>_R
                             <[(GHC.Integer.Type.Integer, GHC.Base.String, GHC.Types.Double,
                                GHC.Types.Double, GHC.Types.Bool)]>_R))
                   Lang.Huginn.Parser.file2
                     `cast`
                   (Sym (Text.Parsec.Prim.N:ParsecT[0]
                             <GHC.Base.String>_R
                             <()>_R
                             <Data.Functor.Identity.Identity>_R
                             <()>_R))) -}
a2a3523fbf3424eb8fb872950427fc14
  parseTSVTestValues3 ::
    Text.Parsec.Prim.State GHC.Base.String ()
    -> ([(GHC.Integer.Type.Integer, GHC.Base.String, GHC.Types.Double,
          GHC.Types.Double, GHC.Types.Bool)]
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> ([(GHC.Integer.Type.Integer, GHC.Base.String, GHC.Types.Double,
          GHC.Types.Double, GHC.Types.Bool)]
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,A>,
     Unfolding: InlineRule (5, True, False)
                (\ @ b
                   (w3 :: Text.Parsec.Prim.State GHC.Base.String ())
                   (w4 :: [(GHC.Integer.Type.Integer, GHC.Base.String,
                            GHC.Types.Double, GHC.Types.Double, GHC.Types.Bool)]
                          -> Text.Parsec.Prim.State GHC.Base.String ()
                          -> Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b)
                   (w5 :: Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b)
                   (w6 :: [(GHC.Integer.Type.Integer, GHC.Base.String,
                            GHC.Types.Double, GHC.Types.Double, GHC.Types.Bool)]
                          -> Text.Parsec.Prim.State GHC.Base.String ()
                          -> Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b)
                   (w7 :: Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b) ->
                 Text.Parsec.Combinator.$wendBy
                   @ GHC.Base.String
                   @ Data.Functor.Identity.Identity
                   @ GHC.Types.Char
                   @ ()
                   @ (GHC.Integer.Type.Integer, GHC.Base.String, GHC.Types.Double,
                      GHC.Types.Double, GHC.Types.Bool)
                   @ GHC.Base.String
                   Lang.Huginn.Parser.parseTSVTestValues4
                     `cast`
                   (Sym (Text.Parsec.Prim.N:ParsecT[0]
                             <[GHC.Types.Char]>_R
                             <()>_R
                             <Data.Functor.Identity.Identity>_R
                             <(GHC.Integer.Type.Integer, GHC.Base.String, GHC.Types.Double,
                               GHC.Types.Double, GHC.Types.Bool)>_R))
                   Lang.Huginn.Parser.file4
                     `cast`
                   (Sym (Text.Parsec.Prim.N:ParsecT[0]
                             <GHC.Base.String>_R
                             <()>_R
                             <Data.Functor.Identity.Identity>_R
                             <[GHC.Types.Char]>_R))
                   @ b
                   w3
                   w4
                   w5
                   w6) -}
c49aaf9da5f544ed23aae2034ce07e00
  parseTSVTestValues4 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> ((GHC.Integer.Type.Integer, GHC.Base.String, GHC.Types.Double,
         GHC.Types.Double, GHC.Types.Bool)
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> ((GHC.Integer.Type.Integer, GHC.Base.String, GHC.Types.Double,
         GHC.Types.Double, GHC.Types.Bool)
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Unfolding: (Text.Parsec.Prim.$fAlternativeParsecT2
                   @ [GHC.Types.Char]
                   @ ()
                   @ Data.Functor.Identity.Identity
                   @ GHC.Base.String
                   @ (GHC.Integer.Type.Integer, GHC.Base.String, GHC.Types.Double,
                      GHC.Types.Double, GHC.Types.Bool)
                   Lang.Huginn.Parser.parseTSVTestValues5
                     `cast`
                   (Sym (Text.Parsec.Prim.N:ParsecT[0]
                             <[GHC.Types.Char]>_R
                             <()>_R
                             <Data.Functor.Identity.Identity>_R
                             <GHC.Base.String
                              -> (GHC.Integer.Type.Integer, GHC.Base.String, GHC.Types.Double,
                                  GHC.Types.Double, GHC.Types.Bool)>_R))
                   Lang.Huginn.Parser.parseTSVFunctions6
                     `cast`
                   (Sym (Text.Parsec.Prim.N:ParsecT[0]
                             <[GHC.Types.Char]>_R
                             <()>_R
                             <Data.Functor.Identity.Identity>_R
                             <GHC.Base.String>_R))) -}
2177091654e1abbf668d34f72e12110b
  parseTSVTestValues5 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> ((GHC.Base.String
         -> (GHC.Integer.Type.Integer, GHC.Base.String, GHC.Types.Double,
             GHC.Types.Double, GHC.Types.Bool))
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> ((GHC.Base.String
         -> (GHC.Integer.Type.Integer, GHC.Base.String, GHC.Types.Double,
             GHC.Types.Double, GHC.Types.Bool))
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Unfolding: (Text.Parsec.Prim.$fAlternativeParsecT2
                   @ [GHC.Types.Char]
                   @ ()
                   @ Data.Functor.Identity.Identity
                   @ GHC.Base.String
                   @ (GHC.Base.String
                      -> (GHC.Integer.Type.Integer, GHC.Base.String, GHC.Types.Double,
                          GHC.Types.Double, GHC.Types.Bool))
                   Lang.Huginn.Parser.parseTSVTestValues6
                     `cast`
                   (Sym (Text.Parsec.Prim.N:ParsecT[0]
                             <[GHC.Types.Char]>_R
                             <()>_R
                             <Data.Functor.Identity.Identity>_R
                             <GHC.Base.String
                              -> GHC.Base.String
                              -> (GHC.Integer.Type.Integer, GHC.Base.String, GHC.Types.Double,
                                  GHC.Types.Double, GHC.Types.Bool)>_R))
                   Lang.Huginn.Parser.parseTSVFunctions6
                     `cast`
                   (Sym (Text.Parsec.Prim.N:ParsecT[0]
                             <[GHC.Types.Char]>_R
                             <()>_R
                             <Data.Functor.Identity.Identity>_R
                             <GHC.Base.String>_R))) -}
c4eb4916f26c3d992c8dc256de1762e4
  parseTSVTestValues6 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> ((GHC.Base.String
         -> GHC.Base.String
         -> (GHC.Integer.Type.Integer, GHC.Base.String, GHC.Types.Double,
             GHC.Types.Double, GHC.Types.Bool))
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> ((GHC.Base.String
         -> GHC.Base.String
         -> (GHC.Integer.Type.Integer, GHC.Base.String, GHC.Types.Double,
             GHC.Types.Double, GHC.Types.Bool))
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Unfolding: (Text.Parsec.Prim.$fAlternativeParsecT2
                   @ [GHC.Types.Char]
                   @ ()
                   @ Data.Functor.Identity.Identity
                   @ GHC.Base.String
                   @ (GHC.Base.String
                      -> GHC.Base.String
                      -> (GHC.Integer.Type.Integer, GHC.Base.String, GHC.Types.Double,
                          GHC.Types.Double, GHC.Types.Bool))
                   Lang.Huginn.Parser.parseTSVTestValues7
                     `cast`
                   (Sym (Text.Parsec.Prim.N:ParsecT[0]
                             <[GHC.Types.Char]>_R
                             <()>_R
                             <Data.Functor.Identity.Identity>_R
                             <GHC.Base.String
                              -> GHC.Base.String
                              -> GHC.Base.String
                              -> (GHC.Integer.Type.Integer, GHC.Base.String, GHC.Types.Double,
                                  GHC.Types.Double, GHC.Types.Bool)>_R))
                   Lang.Huginn.Parser.parseTSVFunctions7
                     `cast`
                   (Sym (Text.Parsec.Prim.N:ParsecT[0]
                             <[GHC.Types.Char]>_R
                             <()>_R
                             <Data.Functor.Identity.Identity>_R
                             <GHC.Base.String>_R))) -}
3fb2e8c813891149895086bc7055779e
  parseTSVTestValues7 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> ((GHC.Base.String
         -> GHC.Base.String
         -> GHC.Base.String
         -> (GHC.Integer.Type.Integer, GHC.Base.String, GHC.Types.Double,
             GHC.Types.Double, GHC.Types.Bool))
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> ((GHC.Base.String
         -> GHC.Base.String
         -> GHC.Base.String
         -> (GHC.Integer.Type.Integer, GHC.Base.String, GHC.Types.Double,
             GHC.Types.Double, GHC.Types.Bool))
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5, Strictness: <L,U><L,C(U)><L,U><L,C(U)><L,U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ b1
                   (s1 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                   (cok :: (GHC.Base.String
                            -> GHC.Base.String
                            -> GHC.Base.String
                            -> (GHC.Integer.Type.Integer, GHC.Base.String, GHC.Types.Double,
                                GHC.Types.Double, GHC.Types.Bool))
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1)
                   (cerr :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1)
                   (eok :: (GHC.Base.String
                            -> GHC.Base.String
                            -> GHC.Base.String
                            -> (GHC.Integer.Type.Integer, GHC.Base.String, GHC.Types.Double,
                                GHC.Types.Double, GHC.Types.Bool))
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1)
                   (eerr :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1) ->
                 case Lang.Huginn.Parser.lexer of wild { Text.Parsec.Token.TokenParser ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ds26 ds27 ds28 ds29 ->
                 ds7
                   `cast`
                 (Text.Parsec.Prim.N:ParsecT[0]
                      <[GHC.Types.Char]>_R
                      <()>_R
                      <Data.Functor.Identity.Identity>_R
                      <GHC.Integer.Type.Integer>_R)
                   @ b1
                   s1
                   (\ (x :: GHC.Integer.Type.Integer) ->
                    cok
                      (Lang.Huginn.Parser.mkTestRow
                         @ GHC.Integer.Type.Integer
                         @ GHC.Base.String
                         x))
                   cerr
                   (\ (x :: GHC.Integer.Type.Integer) ->
                    eok
                      (Lang.Huginn.Parser.mkTestRow
                         @ GHC.Integer.Type.Integer
                         @ GHC.Base.String
                         x))
                   eerr }) -}
c78a3e2afd283581edae626ee1be2c15
  pythonIf :: Text.Parsec.String.Parser Lang.Huginn.AST.Expr
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                Lang.Huginn.Parser.closure4
                  `cast`
                (Sym (Text.Parsec.Prim.N:ParsecT[0]
                          <[GHC.Types.Char]>_R
                          <()>_R
                          <Data.Functor.Identity.Identity>_R
                          <Lang.Huginn.AST.Expr>_R)) -}
90f1b01db24b30f50fa917dafc28d771
  readDouble :: GHC.Base.String -> GHC.Types.Double
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ (x :: GHC.Base.String) ->
                 case Text.Read.readEither6
                        @ GHC.Types.Double
                        (Text.ParserCombinators.ReadP.run
                           @ GHC.Types.Double
                           Lang.Huginn.Parser.readDouble3
                           x) of wild {
                   [] -> Lang.Huginn.Parser.readDouble2
                   : x1 ds
                   -> case ds of wild1 {
                        [] -> x1 : ipv ipv1 -> Lang.Huginn.Parser.readDouble1 } }) -}
45b82b2aaa16d18408a1a0077b095f39
  readDouble1 :: GHC.Types.Double
  {- Strictness: x -}
19a3aee5f3d165b2e57a264c997123f8
  readDouble2 :: GHC.Types.Double
  {- Strictness: x -}
b59b972fe8bcb728af230b1cf1c7a7c8
  readDouble3 :: Text.ParserCombinators.ReadP.P GHC.Types.Double
  {- Unfolding: ((GHC.Read.$fReadDouble9
                    GHC.Read.$fReadDouble_$sconvertFrac
                    Text.ParserCombinators.ReadPrec.minPrec)
                   `cast`
                 (Text.ParserCombinators.ReadP.N:ReadP[0] <GHC.Types.Double>_R)
                   @ GHC.Types.Double
                   (Text.Read.readEither5 @ GHC.Types.Double)) -}
2d326c37c5c0a4c4eda0e057cedb388c
  readExpr ::
    GHC.Base.String
    -> GHC.Base.String -> GHC.Base.String -> Lang.Huginn.Eval.EnvEntry
  {- Arity: 3, Strictness: <L,U><L,U><S,U>m, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Base.String)
                   (w1 :: GHC.Base.String)
                   (w2 :: GHC.Base.String) ->
                 case Lang.Huginn.Parser.$wreadExpr w w1 w2 of ww { (#,#) ww1 ww2 ->
                 (ww1, ww2) }) -}
5b0314314b2e7ec60fe47c1d7e7721ce
  readExpr1 :: GHC.Types.Bool
  {- Strictness: x -}
ef217393bb09cf231a008c0053766d1e
  readExpr10 :: [GHC.Base.String]
  {- Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   Text.Parsec.Char.digit2
                   (GHC.Types.[] @ GHC.Base.String)) -}
3b6b1ab03ea4641351f1a49844e9b76c
  readExpr11 ::
    Text.Parsec.Prim.State GHC.Base.String ()
    -> (GHC.Types.Char
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (GHC.Types.Char
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Arity: 5,
     Unfolding: (\ @ b
                   (w2 :: Text.Parsec.Prim.State GHC.Base.String ())[OneShot]
                   (w3 :: GHC.Types.Char
                          -> Text.Parsec.Prim.State GHC.Base.String ()
                          -> Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b)[OneShot]
                   (w4 :: Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b)[OneShot]
                   (w5 :: GHC.Types.Char
                          -> Text.Parsec.Prim.State GHC.Base.String ()
                          -> Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b)[OneShot]
                   (w6 :: Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b)[OneShot] ->
                 case w2 of ww { Text.Parsec.Prim.State ww1 ww2 ww3 ->
                 case ww2 of ww4 { Text.Parsec.Pos.SourcePos ww5 ww6 ww7 ->
                 Text.Parsec.Char.$wsatisfy
                   @ GHC.Base.String
                   @ Data.Functor.Identity.Identity
                   @ ()
                   (Lang.Huginn.Parser.$s$fStream[]mtok @ GHC.Types.Char)
                   GHC.Unicode.isDigit
                   @ b
                   ww1
                   ww5
                   ww6
                   ww7
                   ww3
                   w3
                   w6 } }) -}
5f843c48a2cbb06b2fa38ae57a1fabc1
  readExpr12 ::
    Text.Parsec.Prim.ParsecT
      GHC.Base.String () Data.Functor.Identity.Identity GHC.Types.Char
  {- Unfolding: (Text.Parsec.Char.char
                   @ GHC.Base.String
                   @ Data.Functor.Identity.Identity
                   @ ()
                   (Lang.Huginn.Parser.$s$fStream[]mtok @ GHC.Types.Char)
                   Lang.Huginn.Parser.readExpr13) -}
1b75758b03b17fd2dfac2819cdb20a7f
  readExpr13 :: GHC.Types.Char
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# '.'#) -}
07f08b36083147a4571058737e0f7a07
  readExpr14 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "float"#) -}
b0974f484b4b27d954589d369863c4a2
  readExpr15 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "bool"#) -}
4edb0d1f3424fec24f032e75304f6a40
  readExpr2 :: GHC.Types.Bool
  {- Strictness: x -}
f56103cbdaab48842801ee1236150dbc
  readExpr3 :: Text.ParserCombinators.ReadP.P GHC.Types.Bool
  {- Unfolding: (GHC.Read.$woptional1
                   @ GHC.Types.Bool
                   (Text.Read.readEither5 @ GHC.Types.Bool)) -}
4ebc091b8e199b698f2683eb377b2ed6
  readExpr4 :: Lang.Huginn.AST.Expr
  {- HasNoCafRefs, Strictness: m11,
     Unfolding: (Lang.Huginn.AST.Err Lang.Huginn.AST.NaN) -}
cf30125b3c3f38ef04878e6efcd4c824
  readExpr5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NaN"#) -}
c3890a62f5e4d3b783dab80fa768353e
  readExpr6 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (Lang.Huginn.AST.Expr
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Lang.Huginn.AST.Expr
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5, Strictness: <L,U><L,C(U)><L,U><L,C(U)><L,C(U)>,
     Unfolding: (\ @ b1
                   (s1 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                   (cok :: Lang.Huginn.AST.Expr
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1)
                   (cerr :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1)
                   (eok :: Lang.Huginn.AST.Expr
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1)
                   (eerr :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1) ->
                 Lang.Huginn.Parser.readExpr7
                   @ b1
                   s1
                   (\ (x :: GHC.Types.Double) -> cok (Lang.Huginn.AST.Num x))
                   cerr
                   (\ (x :: GHC.Types.Double) -> eok (Lang.Huginn.AST.Num x))
                   eerr) -}
ddb178e61649a2da021ed4470e215514
  readExpr7 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (GHC.Types.Double
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (GHC.Types.Double
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Arity: 5, Strictness: <L,U><L,U><L,U><L,U><L,C(U)>,
     Unfolding: (\ @ b
                   (s1 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                   (cok :: GHC.Types.Double
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b)
                   (cerr :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b)
                   (eok :: GHC.Types.Double
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b)
                   (eerr :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b) ->
                 case Lang.Huginn.Parser.lexer of wild { Text.Parsec.Token.TokenParser ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ds26 ds27 ds28 ds29 ->
                 let {
                   lvl9 :: GHC.Base.String
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b
                     {- Arity: 1 -}
                   = \ (x :: GHC.Base.String) -> cok (Lang.Huginn.Parser.readDouble x)
                 } in
                 let {
                   lvl10 :: GHC.Integer.Type.Integer
                            -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                            -> Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b
                     {- Arity: 1 -}
                   = \ (x :: GHC.Integer.Type.Integer) ->
                     cok (GHC.Float.$fNumDouble_$cfromInteger x)
                 } in
                 let {
                   eerr1 :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b
                     {- Arity: 1, Strictness: <L,U(U(U,U,U),U)> -}
                   = \ (err :: Text.Parsec.Error.ParseError) ->
                     ds8
                       `cast`
                     (Text.Parsec.Prim.N:ParsecT[0]
                          <[GHC.Types.Char]>_R
                          <()>_R
                          <Data.Functor.Identity.Identity>_R
                          <GHC.Integer.Type.Integer>_R)
                       @ b
                       s1
                       lvl10
                       cerr
                       (\ (x :: GHC.Integer.Type.Integer) ->
                        let {
                          y :: GHC.Types.Double
                          = case GHC.Integer.Type.doubleFromInteger x of wild1 { DEFAULT ->
                            GHC.Types.D# wild1 }
                        } in
                        \ (s' :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                          (err' :: Text.Parsec.Error.ParseError) ->
                        eok y s' (Text.Parsec.Error.mergeError err err'))
                       (\ (err' :: Text.Parsec.Error.ParseError) ->
                        let {
                          err1 :: Text.Parsec.Error.ParseError
                          = case err of ww { Text.Parsec.Error.ParseError ww1 ww2 ->
                            case ww1 of ww3 { Text.Parsec.Pos.SourcePos ww4 ww5 ww6 ->
                            case err' of ww7 { Text.Parsec.Error.ParseError ww8 ww9 ->
                            case ww8 of ww10 { Text.Parsec.Pos.SourcePos ww11 ww12 ww13 ->
                            case Text.Parsec.Error.$wmergeError
                                   ww4
                                   ww5
                                   ww6
                                   ww2
                                   ww11
                                   ww12
                                   ww13
                                   ww9 of ww14 { (#,#) ww15 ww16 ->
                            Text.Parsec.Error.ParseError ww15 ww16 } } } } }
                        } in
                        Lang.Huginn.Parser.readExpr8
                          @ b
                          s1
                          lvl9
                          cerr
                          (\ (x :: GHC.Base.String)
                             (s' :: Text.Parsec.Prim.State [GHC.Types.Char] ())[OneShot]
                             (err'1 :: Text.Parsec.Error.ParseError)[OneShot] ->
                           eok
                             (Lang.Huginn.Parser.readDouble x)
                             s'
                             (Text.Parsec.Error.mergeError err1 err'1))
                          (\ (err'1 :: Text.Parsec.Error.ParseError) ->
                           eerr (Text.Parsec.Error.mergeError err1 err'1)))
                 } in
                 ds9
                   `cast`
                 (Text.Parsec.Prim.N:ParsecT[0]
                      <[GHC.Types.Char]>_R
                      <()>_R
                      <Data.Functor.Identity.Identity>_R
                      <GHC.Types.Double>_R)
                   @ b
                   s1
                   cok
                   eerr1
                   eok
                   eerr1 }) -}
ea0beb5192627f8a4c86243fc1550f2c
  readExpr8 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (GHC.Base.String
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (GHC.Base.String
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Strictness: <L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,U>,
     Unfolding: (\ @ b1
                   (s1 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                   (cok :: GHC.Base.String
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1)
                   (cerr :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1)
                   (eok :: GHC.Base.String
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1)
                   (eerr :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1) ->
                 Lang.Huginn.Parser.readExpr12
                   `cast`
                 (Text.Parsec.Prim.N:ParsecT[0]
                      <[GHC.Types.Char]>_R
                      <()>_R
                      <Data.Functor.Identity.Identity>_R
                      <GHC.Types.Char>_R)
                   @ b1
                   s1
                   (\ (x :: GHC.Types.Char)
                      (s2 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                      (err :: Text.Parsec.Error.ParseError) ->
                    Lang.Huginn.Parser.$wnoZero
                      @ b1
                      s2
                      cok
                      cerr
                      (\ (x1 :: GHC.Base.String)
                         (s3 :: Text.Parsec.Prim.State [GHC.Types.Char] ())[OneShot]
                         (err' :: Text.Parsec.Error.ParseError)[OneShot] ->
                       cok x1 s3 (Text.Parsec.Error.mergeError err err'))
                      (\ (err' :: Text.Parsec.Error.ParseError) ->
                       cerr (Text.Parsec.Error.mergeError err err')))
                   cerr
                   (\ (x :: GHC.Types.Char)
                      (s2 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                      (err :: Text.Parsec.Error.ParseError) ->
                    Lang.Huginn.Parser.$wnoZero
                      @ b1
                      s2
                      cok
                      cerr
                      (\ (x1 :: GHC.Base.String)
                         (s3 :: Text.Parsec.Prim.State [GHC.Types.Char] ())[OneShot]
                         (err' :: Text.Parsec.Error.ParseError)[OneShot] ->
                       eok x1 s3 (Text.Parsec.Error.mergeError err err'))
                      (\ (err' :: Text.Parsec.Error.ParseError) ->
                       eerr (Text.Parsec.Error.mergeError err err')))
                   eerr) -}
a2574548b2c449277aa554daacbc2796
  readExpr9 ::
    Text.Parsec.Prim.State GHC.Base.String ()
    -> (GHC.Types.Char
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (GHC.Types.Char
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Arity: 5, Strictness: <L,U><L,U><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: (\ @ b
                   (eta :: Text.Parsec.Prim.State GHC.Base.String ())
                   (eta1 :: GHC.Types.Char
                            -> Text.Parsec.Prim.State GHC.Base.String ()
                            -> Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b)
                   (eta2 :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b)
                   (eta3 :: GHC.Types.Char
                            -> Text.Parsec.Prim.State GHC.Base.String ()
                            -> Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b)
                   (eta4 :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b) ->
                 Text.Parsec.Prim.<?>2
                   @ GHC.Base.String
                   @ ()
                   @ Data.Functor.Identity.Identity
                   @ GHC.Types.Char
                   Lang.Huginn.Parser.readExpr11
                     `cast`
                   (Sym (Text.Parsec.Prim.N:ParsecT[0]
                             <GHC.Base.String>_R
                             <()>_R
                             <Data.Functor.Identity.Identity>_R
                             <GHC.Types.Char>_R))
                   Lang.Huginn.Parser.readExpr10
                   @ b
                   eta
                   eta1
                   eta2
                   eta3
                   eta4) -}
cc337a63476dfe58080c43ebeb22f829
  replace ::
    GHC.Types.Char
    -> GHC.Types.Char -> GHC.Base.String -> GHC.Base.String
  {- Arity: 3, HasNoCafRefs, Strictness: <L,1*U(U)><L,U><S,1*U> -}
3f34acfd529018fd293ed5b6bf28abe7
  reservedOp ::
    GHC.Base.String
    -> Text.Parsec.Prim.ParsecT
         GHC.Base.String () Data.Functor.Identity.Identity ()
  {- Unfolding: (case Lang.Huginn.Parser.lexer of wild { Text.Parsec.Token.TokenParser ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ds26 ds27 ds28 ds29 ->
                 ds4 }) -}
4972edc27ab5b6e9c8915ff3858fa4d5
  statement :: Text.Parsec.String.Parser Lang.Huginn.AST.Expr
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                Lang.Huginn.Parser.closure3
                  `cast`
                (Sym (Text.Parsec.Prim.N:ParsecT[0]
                          <[GHC.Types.Char]>_R
                          <()>_R
                          <Data.Functor.Identity.Identity>_R
                          <Lang.Huginn.AST.Expr>_R)) -}
a72a157b5a72522159b8a75b5fd9a8bb
  stringLiteral :: Text.Parsec.String.Parser GHC.Base.String
  {- Unfolding: (case Lang.Huginn.Parser.lexer of wild { Text.Parsec.Token.TokenParser ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ds26 ds27 ds28 ds29 ->
                 ds6 }) -}
20b56337ee070e15aafb7482a192192b
  stxArray :: Text.Parsec.String.Parser Lang.Huginn.AST.Expr
  {- Arity: 5, Strictness: <L,U><L,C(U)><L,U><L,C(U)><L,U>,
     Unfolding: InlineRule (0, True, True)
                Lang.Huginn.Parser.stxArray1
                  `cast`
                (Sym (Text.Parsec.Prim.N:ParsecT[0]
                          <[GHC.Types.Char]>_R
                          <()>_R
                          <Data.Functor.Identity.Identity>_R
                          <Lang.Huginn.AST.Expr>_R)) -}
e440b8255187c7893120843c6d62c050
  stxArray1 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (Lang.Huginn.AST.Expr
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Lang.Huginn.AST.Expr
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5, Strictness: <L,U><L,C(U)><L,U><L,C(U)><L,U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ b1
                   (s1 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                   (cok :: Lang.Huginn.AST.Expr
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1)
                   (cerr :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1)
                   (eok :: Lang.Huginn.AST.Expr
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1)
                   (eerr :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1) ->
                 Lang.Huginn.Parser.array
                   `cast`
                 (Text.Parsec.Prim.N:ParsecT[0]
                      <[GHC.Types.Char]>_R
                      <()>_R
                      <Data.Functor.Identity.Identity>_R
                      <[Lang.Huginn.AST.Expr]>_R)
                   @ b1
                   s1
                   (\ (x :: [Lang.Huginn.AST.Expr]) -> cok (Lang.Huginn.AST.Arr x))
                   cerr
                   (\ (x :: [Lang.Huginn.AST.Expr]) -> eok (Lang.Huginn.AST.Arr x))
                   eerr) -}
8692006159c59abd6de4d6dc5c516c59
  stxBool :: Text.Parsec.String.Parser Lang.Huginn.AST.Expr
  {- Arity: 5, Strictness: <L,U><L,C(U)><L,U><L,C(U)><L,U>,
     Unfolding: InlineRule (0, True, True)
                Lang.Huginn.Parser.stxBool1
                  `cast`
                (Sym (Text.Parsec.Prim.N:ParsecT[0]
                          <[GHC.Types.Char]>_R
                          <()>_R
                          <Data.Functor.Identity.Identity>_R
                          <Lang.Huginn.AST.Expr>_R)) -}
8fcb7c5e6ba82a69c935735fb5b454ce
  stxBool1 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (Lang.Huginn.AST.Expr
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Lang.Huginn.AST.Expr
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5, Strictness: <L,U><L,C(U)><L,U><L,C(U)><L,U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ b1
                   (s1 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                   (cok :: Lang.Huginn.AST.Expr
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1)
                   (cerr :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1)
                   (eok :: Lang.Huginn.AST.Expr
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1)
                   (eerr :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1) ->
                 Lang.Huginn.Parser.stxBool_p
                   `cast`
                 (Text.Parsec.Prim.N:ParsecT[0]
                      <[GHC.Types.Char]>_R
                      <()>_R
                      <Data.Functor.Identity.Identity>_R
                      <GHC.Types.Bool>_R)
                   @ b1
                   s1
                   (\ (x :: GHC.Types.Bool) -> cok (Lang.Huginn.AST.Bl x))
                   cerr
                   (\ (x :: GHC.Types.Bool) -> eok (Lang.Huginn.AST.Bl x))
                   eerr) -}
ddaba7a7a92faca74566d7f0ca0b7bba
  stxBool_p ::
    Text.Parsec.Prim.ParsecT
      [GHC.Types.Char] () Data.Functor.Identity.Identity GHC.Types.Bool
  {- Unfolding: (case Lang.Huginn.Parser.lexer of wild { Text.Parsec.Token.TokenParser ds ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ds26 ds27 ds28 ->
                 ds14
                   @ GHC.Types.Bool
                   Lang.Huginn.Parser.bool1
                     `cast`
                   (Sym (Text.Parsec.Prim.N:ParsecT[0]
                             <[GHC.Types.Char]>_R
                             <()>_R
                             <Data.Functor.Identity.Identity>_R
                             <GHC.Types.Bool>_R)) }) -}
75443832936f57fa1a6eac634562913b
  stxLet :: Text.Parsec.String.Parser Lang.Huginn.AST.Expr
  {- Arity: 5,
     Strictness: <L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,U>,
     Unfolding: InlineRule (0, True, True)
                Lang.Huginn.Parser.stxLet1
                  `cast`
                (Sym (Text.Parsec.Prim.N:ParsecT[0]
                          <[GHC.Types.Char]>_R
                          <()>_R
                          <Data.Functor.Identity.Identity>_R
                          <Lang.Huginn.AST.Expr>_R)) -}
94b35b04227233dbb699dbbe3f73e139
  stxLet1 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (Lang.Huginn.AST.Expr
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Lang.Huginn.AST.Expr
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Strictness: <L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,U>,
     Unfolding: (\ @ b1
                   (s1 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                   (cok :: Lang.Huginn.AST.Expr
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1)
                   (cerr :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1)
                   (eok :: Lang.Huginn.AST.Expr
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1)
                   (eerr :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1) ->
                 Lang.Huginn.Parser.stxLet3
                   `cast`
                 (Text.Parsec.Prim.N:ParsecT[0]
                      <[GHC.Types.Char]>_R
                      <()>_R
                      <Data.Functor.Identity.Identity>_R
                      <GHC.Base.String>_R)
                   @ b1
                   s1
                   (\ (x :: GHC.Base.String)
                      (s2 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                      (err :: Text.Parsec.Error.ParseError) ->
                    Lang.Huginn.Parser.$wstxLet
                      @ b1
                      s2
                      cok
                      cerr
                      (\ (x1 :: Lang.Huginn.AST.Expr)
                         (s3 :: Text.Parsec.Prim.State [GHC.Types.Char] ())[OneShot]
                         (err' :: Text.Parsec.Error.ParseError)[OneShot] ->
                       cok x1 s3 (Text.Parsec.Error.mergeError err err'))
                      (\ (err' :: Text.Parsec.Error.ParseError) ->
                       cerr (Text.Parsec.Error.mergeError err err')))
                   cerr
                   (\ (x :: GHC.Base.String)
                      (s2 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                      (err :: Text.Parsec.Error.ParseError) ->
                    Lang.Huginn.Parser.$wstxLet
                      @ b1
                      s2
                      cok
                      cerr
                      (\ (x1 :: Lang.Huginn.AST.Expr)
                         (s3 :: Text.Parsec.Prim.State [GHC.Types.Char] ())[OneShot]
                         (err' :: Text.Parsec.Error.ParseError)[OneShot] ->
                       eok x1 s3 (Text.Parsec.Error.mergeError err err'))
                      (\ (err' :: Text.Parsec.Error.ParseError) ->
                       eerr (Text.Parsec.Error.mergeError err err')))
                   eerr) -}
b1c4c0633bcc696d284e63976ee4c125
  stxLet2 ::
    GHC.Base.String
    -> forall b.
       Text.Parsec.Prim.State [GHC.Types.Char] ()
       -> (Lang.Huginn.AST.Expr
           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
           -> Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> (Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> (Lang.Huginn.AST.Expr
           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
           -> Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> (Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> Data.Functor.Identity.Identity b
  {- Arity: 6,
     Strictness: <L,U><L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,U> -}
2534c2d0755f915296ed12bce83f6a62
  stxLet3 ::
    Text.Parsec.Prim.ParsecT
      GHC.Base.String () Data.Functor.Identity.Identity GHC.Base.String
  {- Unfolding: (case Lang.Huginn.Parser.lexer of wild { Text.Parsec.Token.TokenParser ds ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ds26 ds27 ds28 ->
                 ds14
                   @ GHC.Base.String
                   Lang.Huginn.Parser.stxLet4
                     `cast`
                   (Sym (Text.Parsec.Prim.N:ParsecT[0]
                             <GHC.Base.String>_R
                             <()>_R
                             <Data.Functor.Identity.Identity>_R
                             <[GHC.Types.Char]>_R)) }) -}
366007f54127e5afb3a110c0adf9be41
  stxLet4 ::
    Text.Parsec.Prim.State GHC.Base.String ()
    -> ([GHC.Types.Char]
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> ([GHC.Types.Char]
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Arity: 5,
     Unfolding: (Text.Parsec.Char.string1
                   @ GHC.Base.String
                   @ Data.Functor.Identity.Identity
                   @ ()
                   (Lang.Huginn.Parser.$s$fStream[]mtok @ GHC.Types.Char)
                   Lang.Huginn.Parser.stxLet5) -}
187dd26833ab1a3934354625118bc044
  stxLet5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "let"#) -}
db7d356e7e97cb2be7807f7a22fc825c
  stxNum ::
    Text.Parsec.Prim.ParsecT
      [GHC.Types.Char]
      ()
      Data.Functor.Identity.Identity
      Lang.Huginn.AST.Expr
  {- Arity: 5, Strictness: <L,U><L,C(U)><L,U><L,C(U)><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                Lang.Huginn.Parser.readExpr6
                  `cast`
                (Sym (Text.Parsec.Prim.N:ParsecT[0]
                          <[GHC.Types.Char]>_R
                          <()>_R
                          <Data.Functor.Identity.Identity>_R
                          <Lang.Huginn.AST.Expr>_R)) -}
5d50e58fe114273069e2e22922bcb9cd
  stxString :: Text.Parsec.String.Parser Lang.Huginn.AST.Expr
  {- Arity: 5, Strictness: <L,U><L,C(U)><L,U><L,C(U)><L,U>,
     Unfolding: InlineRule (0, True, True)
                Lang.Huginn.Parser.stxString1
                  `cast`
                (Sym (Text.Parsec.Prim.N:ParsecT[0]
                          <[GHC.Types.Char]>_R
                          <()>_R
                          <Data.Functor.Identity.Identity>_R
                          <Lang.Huginn.AST.Expr>_R)) -}
fa087a0920bf77896442278d968727b9
  stxString1 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (Lang.Huginn.AST.Expr
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Lang.Huginn.AST.Expr
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5, Strictness: <L,U><L,C(U)><L,U><L,C(U)><L,U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ b1
                   (s1 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                   (cok :: Lang.Huginn.AST.Expr
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1)
                   (cerr :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1)
                   (eok :: Lang.Huginn.AST.Expr
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1)
                   (eerr :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1) ->
                 case Lang.Huginn.Parser.lexer of wild { Text.Parsec.Token.TokenParser ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ds26 ds27 ds28 ds29 ->
                 ds6
                   `cast`
                 (Text.Parsec.Prim.N:ParsecT[0]
                      <[GHC.Types.Char]>_R
                      <()>_R
                      <Data.Functor.Identity.Identity>_R
                      <GHC.Base.String>_R)
                   @ b1
                   s1
                   (\ (x :: GHC.Base.String) -> cok (Lang.Huginn.AST.Str x))
                   cerr
                   (\ (x :: GHC.Base.String) -> eok (Lang.Huginn.AST.Str x))
                   eerr }) -}
b4322976f498a64bcb56659ba812d91e
  stxVar :: Text.Parsec.String.Parser Lang.Huginn.AST.Expr
  {- Arity: 5,
     Strictness: <S(LS(LSS)S),1*U(U,U(U,U,U),U)><L,C(C1(C1(U)))><L,U><L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                Lang.Huginn.Parser.stxVar1
                  `cast`
                (Sym (Text.Parsec.Prim.N:ParsecT[0]
                          <[GHC.Types.Char]>_R
                          <()>_R
                          <Data.Functor.Identity.Identity>_R
                          <Lang.Huginn.AST.Expr>_R)) -}
cf57ae44fca5b83f3505335ba1ed3542
  stxVar1 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (Lang.Huginn.AST.Expr
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Lang.Huginn.AST.Expr
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Strictness: <S(LS(LSS)S),1*U(U,U(U,U,U),U)><L,C(C1(C1(U)))><L,U><L,A><L,C(U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (5, True, False)
                (\ @ b1
                   (w :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                   (w1 :: Lang.Huginn.AST.Expr
                          -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                          -> Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b1)
                   (w2 :: Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b1)
                   (w3 :: Lang.Huginn.AST.Expr
                          -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                          -> Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b1)
                   (w4 :: Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b1) ->
                 case w of ww { Text.Parsec.Prim.State ww1 ww2 ww3 ->
                 case ww2 of ww4 { Text.Parsec.Pos.SourcePos ww5 ww6 ww7 ->
                 Lang.Huginn.Parser.$wvar
                   @ b1
                   ww1
                   ww5
                   ww6
                   ww7
                   ww3
                   (\ (x :: GHC.Base.String) -> w1 (Lang.Huginn.AST.Var x))
                   w2
                   w4 } }) -}
7fef79b18e02cd686988f34150bdf6a8
  table ::
    [[Text.ParserCombinators.Parsec.Expr.Operator
        GHC.Types.Char () Lang.Huginn.AST.Expr]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ [Text.ParserCombinators.Parsec.Expr.Operator
                        GHC.Types.Char () Lang.Huginn.AST.Expr]
                   Lang.Huginn.Parser.table39
                   Lang.Huginn.Parser.table1) -}
4f2c32860c1bd23a901710613c1688e6
  table1 ::
    [[Text.ParserCombinators.Parsec.Expr.Operator
        GHC.Types.Char () Lang.Huginn.AST.Expr]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ [Text.ParserCombinators.Parsec.Expr.Operator
                        GHC.Types.Char () Lang.Huginn.AST.Expr]
                   Lang.Huginn.Parser.table33
                   Lang.Huginn.Parser.table2) -}
0532ebccb5c2bd3c3f2833b84000cfd3
  table10 ::
    Text.Parsec.Expr.Assoc
    -> Text.ParserCombinators.Parsec.Expr.Operator
         GHC.Types.Char () Lang.Huginn.AST.Expr
  {- Unfolding: (Lang.Huginn.Parser.binary
                   @ Lang.Huginn.AST.Expr
                   Lang.Huginn.Parser.lexer15
                   Lang.Huginn.AST.Eeq) -}
4b5126356ea3f9a580542c202055b1e8
  table11 ::
    [Text.ParserCombinators.Parsec.Expr.Operator
       GHC.Types.Char () Lang.Huginn.AST.Expr]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Text.ParserCombinators.Parsec.Expr.Operator
                        GHC.Types.Char () Lang.Huginn.AST.Expr)
                   Lang.Huginn.Parser.table12
                   (GHC.Types.[]
                      @ (Text.ParserCombinators.Parsec.Expr.Operator
                           GHC.Types.Char () Lang.Huginn.AST.Expr))) -}
d4335d0f2d0c76e4e6ab53f0f3e1c710
  table12 ::
    Text.ParserCombinators.Parsec.Expr.Operator
      GHC.Types.Char () Lang.Huginn.AST.Expr
  {- Unfolding: (Lang.Huginn.Parser.table13
                   Text.Parsec.Expr.AssocLeft) -}
a2d14cf9bbdecb927c285fe1d6de10df
  table13 ::
    Text.Parsec.Expr.Assoc
    -> Text.ParserCombinators.Parsec.Expr.Operator
         GHC.Types.Char () Lang.Huginn.AST.Expr
  {- Unfolding: (Lang.Huginn.Parser.binary
                   @ Lang.Huginn.AST.Expr
                   Lang.Huginn.Parser.table14
                   Lang.Huginn.AST.Egte) -}
ab0f169d4723c81fa4b68cacb33309b6
  table14 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# ">="#) -}
2dcd94e98d832494602e10c4a4b1d45d
  table15 ::
    [Text.ParserCombinators.Parsec.Expr.Operator
       GHC.Types.Char () Lang.Huginn.AST.Expr]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Text.ParserCombinators.Parsec.Expr.Operator
                        GHC.Types.Char () Lang.Huginn.AST.Expr)
                   Lang.Huginn.Parser.table16
                   (GHC.Types.[]
                      @ (Text.ParserCombinators.Parsec.Expr.Operator
                           GHC.Types.Char () Lang.Huginn.AST.Expr))) -}
01cf0a8e5102e2bad5c10d678979dfcc
  table16 ::
    Text.ParserCombinators.Parsec.Expr.Operator
      GHC.Types.Char () Lang.Huginn.AST.Expr
  {- Unfolding: (Lang.Huginn.Parser.table17
                   Text.Parsec.Expr.AssocLeft) -}
9122dfcb6898852d8c8d614253b8a90d
  table17 ::
    Text.Parsec.Expr.Assoc
    -> Text.ParserCombinators.Parsec.Expr.Operator
         GHC.Types.Char () Lang.Huginn.AST.Expr
  {- Unfolding: (Lang.Huginn.Parser.binary
                   @ Lang.Huginn.AST.Expr
                   Lang.Huginn.Parser.table18
                   Lang.Huginn.AST.Egt) -}
8e741a66f3470c56a264bd05d75266bc
  table18 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# ">"#) -}
297dea66c481ba06aa39674cdac3ba4e
  table19 ::
    [Text.ParserCombinators.Parsec.Expr.Operator
       GHC.Types.Char () Lang.Huginn.AST.Expr]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Text.ParserCombinators.Parsec.Expr.Operator
                        GHC.Types.Char () Lang.Huginn.AST.Expr)
                   Lang.Huginn.Parser.table20
                   (GHC.Types.[]
                      @ (Text.ParserCombinators.Parsec.Expr.Operator
                           GHC.Types.Char () Lang.Huginn.AST.Expr))) -}
e73367e813f07290a2c415f1f6dfa187
  table2 ::
    [[Text.ParserCombinators.Parsec.Expr.Operator
        GHC.Types.Char () Lang.Huginn.AST.Expr]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ [Text.ParserCombinators.Parsec.Expr.Operator
                        GHC.Types.Char () Lang.Huginn.AST.Expr]
                   Lang.Huginn.Parser.table27
                   Lang.Huginn.Parser.table3) -}
58844e8da6f25ab48939ca5cc169edb9
  table20 ::
    Text.ParserCombinators.Parsec.Expr.Operator
      GHC.Types.Char () Lang.Huginn.AST.Expr
  {- Unfolding: (Lang.Huginn.Parser.table21
                   Text.Parsec.Expr.AssocLeft) -}
295603695ea1605ed234bd14a2d915c4
  table21 ::
    Text.Parsec.Expr.Assoc
    -> Text.ParserCombinators.Parsec.Expr.Operator
         GHC.Types.Char () Lang.Huginn.AST.Expr
  {- Unfolding: (Lang.Huginn.Parser.binary
                   @ Lang.Huginn.AST.Expr
                   Lang.Huginn.Parser.table22
                   Lang.Huginn.AST.Elte) -}
b2d4396b6d292109d8d2b45a306187a1
  table22 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "<="#) -}
934b96c43bbd5e5c3b5e3db6a1dedcb0
  table23 ::
    [Text.ParserCombinators.Parsec.Expr.Operator
       GHC.Types.Char () Lang.Huginn.AST.Expr]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Text.ParserCombinators.Parsec.Expr.Operator
                        GHC.Types.Char () Lang.Huginn.AST.Expr)
                   Lang.Huginn.Parser.table24
                   (GHC.Types.[]
                      @ (Text.ParserCombinators.Parsec.Expr.Operator
                           GHC.Types.Char () Lang.Huginn.AST.Expr))) -}
b8c3b8b68849891d9caafed6c9c274d8
  table24 ::
    Text.ParserCombinators.Parsec.Expr.Operator
      GHC.Types.Char () Lang.Huginn.AST.Expr
  {- Unfolding: (Lang.Huginn.Parser.table25
                   Text.Parsec.Expr.AssocLeft) -}
c45324a85df2a458645ccf7597c5f63f
  table25 ::
    Text.Parsec.Expr.Assoc
    -> Text.ParserCombinators.Parsec.Expr.Operator
         GHC.Types.Char () Lang.Huginn.AST.Expr
  {- Unfolding: (Lang.Huginn.Parser.binary
                   @ Lang.Huginn.AST.Expr
                   Lang.Huginn.Parser.table26
                   Lang.Huginn.AST.Elt) -}
dd2e203eb7028dcb7564e3fe44ea5412
  table26 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "<"#) -}
db03053801d9d9d4c801c19cf6e60ec9
  table27 ::
    [Text.ParserCombinators.Parsec.Expr.Operator
       GHC.Types.Char () Lang.Huginn.AST.Expr]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Text.ParserCombinators.Parsec.Expr.Operator
                        GHC.Types.Char () Lang.Huginn.AST.Expr)
                   Lang.Huginn.Parser.table31
                   Lang.Huginn.Parser.table28) -}
33d6ec24f273bb14f07a69b09501488e
  table28 ::
    [Text.ParserCombinators.Parsec.Expr.Operator
       GHC.Types.Char () Lang.Huginn.AST.Expr]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Text.ParserCombinators.Parsec.Expr.Operator
                        GHC.Types.Char () Lang.Huginn.AST.Expr)
                   Lang.Huginn.Parser.table29
                   (GHC.Types.[]
                      @ (Text.ParserCombinators.Parsec.Expr.Operator
                           GHC.Types.Char () Lang.Huginn.AST.Expr))) -}
294c53f9c241faa84a615510817f1ad9
  table29 ::
    Text.ParserCombinators.Parsec.Expr.Operator
      GHC.Types.Char () Lang.Huginn.AST.Expr
  {- Unfolding: (Lang.Huginn.Parser.table30
                   Text.Parsec.Expr.AssocLeft) -}
fd0ed57bbeedd2d515a96fa4e8c05aa3
  table3 ::
    [[Text.ParserCombinators.Parsec.Expr.Operator
        GHC.Types.Char () Lang.Huginn.AST.Expr]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ [Text.ParserCombinators.Parsec.Expr.Operator
                        GHC.Types.Char () Lang.Huginn.AST.Expr]
                   Lang.Huginn.Parser.table23
                   Lang.Huginn.Parser.table4) -}
d94a1b42273f71cbc8edd9a8b061ef2f
  table30 ::
    Text.Parsec.Expr.Assoc
    -> Text.ParserCombinators.Parsec.Expr.Operator
         GHC.Types.Char () Lang.Huginn.AST.Expr
  {- Unfolding: (Lang.Huginn.Parser.binary
                   @ Lang.Huginn.AST.Expr
                   Lang.Huginn.Parser.lexer11
                   Lang.Huginn.AST.Esub) -}
b77107b0730965454402b572ce815a9e
  table31 ::
    Text.ParserCombinators.Parsec.Expr.Operator
      GHC.Types.Char () Lang.Huginn.AST.Expr
  {- Unfolding: (Lang.Huginn.Parser.table32
                   Text.Parsec.Expr.AssocLeft) -}
3b93f2d1ece27454a717343fcdcf3785
  table32 ::
    Text.Parsec.Expr.Assoc
    -> Text.ParserCombinators.Parsec.Expr.Operator
         GHC.Types.Char () Lang.Huginn.AST.Expr
  {- Unfolding: (Lang.Huginn.Parser.binary
                   @ Lang.Huginn.AST.Expr
                   Lang.Huginn.Parser.lexer12
                   Lang.Huginn.AST.Eadd) -}
2bab85b282c5413c6ba03560dacb9cd3
  table33 ::
    [Text.ParserCombinators.Parsec.Expr.Operator
       GHC.Types.Char () Lang.Huginn.AST.Expr]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Text.ParserCombinators.Parsec.Expr.Operator
                        GHC.Types.Char () Lang.Huginn.AST.Expr)
                   Lang.Huginn.Parser.table37
                   Lang.Huginn.Parser.table34) -}
efffa92eea5664bfa473fef66027e709
  table34 ::
    [Text.ParserCombinators.Parsec.Expr.Operator
       GHC.Types.Char () Lang.Huginn.AST.Expr]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Text.ParserCombinators.Parsec.Expr.Operator
                        GHC.Types.Char () Lang.Huginn.AST.Expr)
                   Lang.Huginn.Parser.table35
                   (GHC.Types.[]
                      @ (Text.ParserCombinators.Parsec.Expr.Operator
                           GHC.Types.Char () Lang.Huginn.AST.Expr))) -}
04099aed29641133ad5014012e11249a
  table35 ::
    Text.ParserCombinators.Parsec.Expr.Operator
      GHC.Types.Char () Lang.Huginn.AST.Expr
  {- Unfolding: (Lang.Huginn.Parser.table36
                   Text.Parsec.Expr.AssocLeft) -}
cf079c976db6dd3f49768e90970cbb28
  table36 ::
    Text.Parsec.Expr.Assoc
    -> Text.ParserCombinators.Parsec.Expr.Operator
         GHC.Types.Char () Lang.Huginn.AST.Expr
  {- Unfolding: (Lang.Huginn.Parser.binary
                   @ Lang.Huginn.AST.Expr
                   Lang.Huginn.Parser.lexer9
                   Lang.Huginn.AST.Ediv) -}
08701128663a31a0b65997225cdb7ce3
  table37 ::
    Text.ParserCombinators.Parsec.Expr.Operator
      GHC.Types.Char () Lang.Huginn.AST.Expr
  {- Unfolding: (Lang.Huginn.Parser.table38
                   Text.Parsec.Expr.AssocLeft) -}
dd1c50ca03caad4b12b469078972d00e
  table38 ::
    Text.Parsec.Expr.Assoc
    -> Text.ParserCombinators.Parsec.Expr.Operator
         GHC.Types.Char () Lang.Huginn.AST.Expr
  {- Unfolding: (Lang.Huginn.Parser.binary
                   @ Lang.Huginn.AST.Expr
                   Lang.Huginn.Parser.lexer10
                   Lang.Huginn.AST.Emul) -}
c86e9d6e67e38c30bc23cf809fb6d38d
  table39 ::
    [Text.ParserCombinators.Parsec.Expr.Operator
       GHC.Types.Char () Lang.Huginn.AST.Expr]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Text.ParserCombinators.Parsec.Expr.Operator
                        GHC.Types.Char () Lang.Huginn.AST.Expr)
                   Lang.Huginn.Parser.table40
                   (GHC.Types.[]
                      @ (Text.ParserCombinators.Parsec.Expr.Operator
                           GHC.Types.Char () Lang.Huginn.AST.Expr))) -}
b20d2384b2ec7195ceb93415cf9b53f1
  table4 ::
    [[Text.ParserCombinators.Parsec.Expr.Operator
        GHC.Types.Char () Lang.Huginn.AST.Expr]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ [Text.ParserCombinators.Parsec.Expr.Operator
                        GHC.Types.Char () Lang.Huginn.AST.Expr]
                   Lang.Huginn.Parser.table19
                   Lang.Huginn.Parser.table5) -}
46873bc2c292db32c5a94f27210cde00
  table40 ::
    Text.ParserCombinators.Parsec.Expr.Operator
      GHC.Types.Char () Lang.Huginn.AST.Expr
  {- Unfolding: (Lang.Huginn.Parser.table41
                   Text.Parsec.Expr.AssocLeft) -}
5fd68120ee56eeb2b668253c01dc1208
  table41 ::
    Text.Parsec.Expr.Assoc
    -> Text.ParserCombinators.Parsec.Expr.Operator
         GHC.Types.Char () Lang.Huginn.AST.Expr
  {- Unfolding: (Lang.Huginn.Parser.binary
                   @ Lang.Huginn.AST.Expr
                   Lang.Huginn.Parser.lexer13
                   Lang.Huginn.AST.Epow) -}
4eeeb07f562f21f92a75ad56ab85b593
  table5 ::
    [[Text.ParserCombinators.Parsec.Expr.Operator
        GHC.Types.Char () Lang.Huginn.AST.Expr]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ [Text.ParserCombinators.Parsec.Expr.Operator
                        GHC.Types.Char () Lang.Huginn.AST.Expr]
                   Lang.Huginn.Parser.table15
                   Lang.Huginn.Parser.table6) -}
eb920d98267773f021e1a5087eed08e1
  table6 ::
    [[Text.ParserCombinators.Parsec.Expr.Operator
        GHC.Types.Char () Lang.Huginn.AST.Expr]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ [Text.ParserCombinators.Parsec.Expr.Operator
                        GHC.Types.Char () Lang.Huginn.AST.Expr]
                   Lang.Huginn.Parser.table11
                   Lang.Huginn.Parser.table7) -}
490355669e535a10a0e81b12cb96faf7
  table7 ::
    [[Text.ParserCombinators.Parsec.Expr.Operator
        GHC.Types.Char () Lang.Huginn.AST.Expr]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ [Text.ParserCombinators.Parsec.Expr.Operator
                        GHC.Types.Char () Lang.Huginn.AST.Expr]
                   Lang.Huginn.Parser.table8
                   (GHC.Types.[]
                      @ [Text.ParserCombinators.Parsec.Expr.Operator
                           GHC.Types.Char () Lang.Huginn.AST.Expr])) -}
e3aa2493f7ca52e0d68948966f0144a5
  table8 ::
    [Text.ParserCombinators.Parsec.Expr.Operator
       GHC.Types.Char () Lang.Huginn.AST.Expr]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Text.ParserCombinators.Parsec.Expr.Operator
                        GHC.Types.Char () Lang.Huginn.AST.Expr)
                   Lang.Huginn.Parser.table9
                   (GHC.Types.[]
                      @ (Text.ParserCombinators.Parsec.Expr.Operator
                           GHC.Types.Char () Lang.Huginn.AST.Expr))) -}
cdbb577063b119cc9b3b6e983edee86f
  table9 ::
    Text.ParserCombinators.Parsec.Expr.Operator
      GHC.Types.Char () Lang.Huginn.AST.Expr
  {- Unfolding: (Lang.Huginn.Parser.table10
                   Text.Parsec.Expr.AssocLeft) -}
3c6d8bbd2439610073902031cecb1a4d
  term :: Text.Parsec.String.Parser Lang.Huginn.AST.Expr
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,U><L,U><L,U><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                Lang.Huginn.Parser.bla4
                  `cast`
                (Sym (Text.Parsec.Prim.N:ParsecT[0]
                          <[GHC.Types.Char]>_R
                          <()>_R
                          <Data.Functor.Identity.Identity>_R
                          <Lang.Huginn.AST.Expr>_R)) -}
cc3be46be75a36adc7d25322610c1625
  testParser ::
    Text.Parsec.String.Parser Lang.Huginn.AST.Expr
    -> GHC.Base.String
    -> Data.Either.Either
         Text.Parsec.Error.ParseError Lang.Huginn.AST.Expr
  {- Arity: 2, Strictness: <L,1*C1(C1(C1(C1(C1(U)))))><L,U>,
     Unfolding: InlineRule (0, True, True)
                Lang.Huginn.Parser.testParser1
                  `cast`
                (<Text.Parsec.String.Parser Lang.Huginn.AST.Expr>_R
                 ->_R <GHC.Base.String>_R
                 ->_R Data.Functor.Identity.N:Identity[0]
                          <Data.Either.Either
                             Text.Parsec.Error.ParseError Lang.Huginn.AST.Expr>_R) -}
8c7816aee857e03950e612e3f9673d1d
  testParser1 ::
    Text.Parsec.String.Parser Lang.Huginn.AST.Expr
    -> GHC.Base.String
    -> Data.Functor.Identity.Identity
         (Data.Either.Either
            Text.Parsec.Error.ParseError Lang.Huginn.AST.Expr)
  {- Arity: 2, Strictness: <L,1*C1(C1(C1(C1(C1(U)))))><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (p :: Text.Parsec.String.Parser Lang.Huginn.AST.Expr)
                   (s1 :: GHC.Base.String) ->
                 Text.Parsec.Prim.runPT
                   @ GHC.Base.String
                   @ Data.Functor.Identity.Identity
                   @ GHC.Types.Char
                   @ ()
                   @ Lang.Huginn.AST.Expr
                   (Lang.Huginn.Parser.$s$fStream[]mtok @ GHC.Types.Char)
                   p
                   GHC.Tuple.()
                   Lang.Huginn.Parser.testParser2
                   s1) -}
7cbf18dbb6e3a046e44f1bb2911e5d6f
  testParser2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Some Error"#) -}
d9f2ea3cb1d011559084880500bb1fab
  todouble :: GHC.Integer.Type.Integer -> GHC.Types.Double
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Float.$fNumDouble_$cfromInteger -}
2e2a2b272bff9c54c902244db5bfe3ad
  tsvCell ::
    Text.Parsec.Prim.ParsecT
      GHC.Base.String () Data.Functor.Identity.Identity GHC.Base.String
  {- Arity: 5, Strictness: <L,U(U,U(U,U,U),U)><L,U><L,U><L,U><L,A>,
     Unfolding: InlineRule (0, True, True)
                Lang.Huginn.Parser.parseTSVFunctions7
                  `cast`
                (Sym (Text.Parsec.Prim.N:ParsecT[0]
                          <[GHC.Types.Char]>_R
                          <()>_R
                          <Data.Functor.Identity.Identity>_R
                          <GHC.Base.String>_R)) -}
56f923bd43aa3b9ac2beefdef7ff6c89
  tsvFunction ::
    Text.Parsec.Prim.ParsecT
      GHC.Base.String
      ()
      Data.Functor.Identity.Identity
      (GHC.Base.String,
       Data.Either.Either
         Text.Parsec.Error.ParseError Lang.Huginn.AST.Expr)
  {- Arity: 5,
     Unfolding: InlineRule (0, True, True)
                Lang.Huginn.Parser.parseTSVFunctions5
                  `cast`
                (Sym (Text.Parsec.Prim.N:ParsecT[0]
                          <[GHC.Types.Char]>_R
                          <()>_R
                          <Data.Functor.Identity.Identity>_R
                          <(GHC.Base.String,
                            Data.Either.Either
                              Text.Parsec.Error.ParseError Lang.Huginn.AST.Expr)>_R)) -}
95110868eb992d90706cb839bbf42369
  tsvFunctionsFile ::
    Text.Parsec.Prim.ParsecT
      GHC.Base.String
      ()
      Data.Functor.Identity.Identity
      [(GHC.Base.String,
        Data.Either.Either
          Text.Parsec.Error.ParseError Lang.Huginn.AST.Expr)]
  {- Arity: 5,
     Unfolding: InlineRule (0, True, True)
                Lang.Huginn.Parser.parseTSVFunctions3
                  `cast`
                (Sym (Text.Parsec.Prim.N:ParsecT[0]
                          <[GHC.Types.Char]>_R
                          <()>_R
                          <Data.Functor.Identity.Identity>_R
                          <[(GHC.Base.String,
                             Data.Either.Either
                               Text.Parsec.Error.ParseError Lang.Huginn.AST.Expr)]>_R)) -}
c07607fbc721f908c7028a6ca84a7c6a
  tsvInstanceFile ::
    Text.Parsec.Prim.ParsecT
      GHC.Base.String
      ()
      Data.Functor.Identity.Identity
      [(GHC.Integer.Type.Integer, Lang.Huginn.Eval.EnvEntry)]
  {- Arity: 5,
     Unfolding: InlineRule (0, True, True)
                Lang.Huginn.Parser.parseTSVInstances2
                  `cast`
                (Sym (Text.Parsec.Prim.N:ParsecT[0]
                          <[GHC.Types.Char]>_R
                          <()>_R
                          <Data.Functor.Identity.Identity>_R
                          <[(GHC.Integer.Type.Integer, Lang.Huginn.Eval.EnvEntry)]>_R)) -}
7dfc95a3adf14413bba6a5c1e5583336
  tsvInstanceLine ::
    Text.Parsec.Prim.ParsecT
      GHC.Base.String
      ()
      Data.Functor.Identity.Identity
      (GHC.Integer.Type.Integer, Lang.Huginn.Eval.EnvEntry)
  {- Arity: 5,
     Unfolding: InlineRule (0, True, True)
                Lang.Huginn.Parser.parseTSVInstances4
                  `cast`
                (Sym (Text.Parsec.Prim.N:ParsecT[0]
                          <[GHC.Types.Char]>_R
                          <()>_R
                          <Data.Functor.Identity.Identity>_R
                          <(GHC.Integer.Type.Integer, Lang.Huginn.Eval.EnvEntry)>_R)) -}
564f9f84b25d8b601f4660188caae629
  tsvTestValuesFile ::
    Text.Parsec.Prim.ParsecT
      GHC.Base.String
      ()
      Data.Functor.Identity.Identity
      [(GHC.Integer.Type.Integer, GHC.Base.String, GHC.Types.Double,
        GHC.Types.Double, GHC.Types.Bool)]
  {- Arity: 5,
     Unfolding: InlineRule (0, True, True)
                Lang.Huginn.Parser.parseTSVTestValues2
                  `cast`
                (Sym (Text.Parsec.Prim.N:ParsecT[0]
                          <[GHC.Types.Char]>_R
                          <()>_R
                          <Data.Functor.Identity.Identity>_R
                          <[(GHC.Integer.Type.Integer, GHC.Base.String, GHC.Types.Double,
                             GHC.Types.Double, GHC.Types.Bool)]>_R)) -}
f3969c886247a51eb9dd33e5929c8dde
  tsvTestValuesLine ::
    Text.Parsec.Prim.ParsecT
      GHC.Base.String
      ()
      Data.Functor.Identity.Identity
      (GHC.Integer.Type.Integer, GHC.Base.String, GHC.Types.Double,
       GHC.Types.Double, GHC.Types.Bool)
  {- Arity: 5,
     Unfolding: InlineRule (0, True, True)
                Lang.Huginn.Parser.parseTSVTestValues4
                  `cast`
                (Sym (Text.Parsec.Prim.N:ParsecT[0]
                          <[GHC.Types.Char]>_R
                          <()>_R
                          <Data.Functor.Identity.Identity>_R
                          <(GHC.Integer.Type.Integer, GHC.Base.String, GHC.Types.Double,
                            GHC.Types.Double, GHC.Types.Bool)>_R)) -}
bc208350c850c37bfd7c8aab422b182c
  tsvToken ::
    Text.Parsec.Prim.ParsecT
      GHC.Base.String () Data.Functor.Identity.Identity GHC.Base.String
  {- Arity: 5,
     Unfolding: InlineRule (0, True, True)
                Lang.Huginn.Parser.parseTSVFunctions6
                  `cast`
                (Sym (Text.Parsec.Prim.N:ParsecT[0]
                          <[GHC.Types.Char]>_R
                          <()>_R
                          <Data.Functor.Identity.Identity>_R
                          <GHC.Base.String>_R)) -}
9008b98a347c317ff3883c5f8d363436
  var :: Text.Parsec.String.Parser GHC.Base.String
  {- Arity: 5,
     Strictness: <S(LS(LSS)S),1*U(U,U(U,U,U),U)><L,C(C1(C1(U)))><L,U><L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                Lang.Huginn.Parser.var1
                  `cast`
                (Sym (Text.Parsec.Prim.N:ParsecT[0]
                          <[GHC.Types.Char]>_R
                          <()>_R
                          <Data.Functor.Identity.Identity>_R
                          <GHC.Base.String>_R)) -}
82770063b25fd09a2a4d1fc468885821
  var1 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (GHC.Base.String
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (GHC.Base.String
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Strictness: <S(LS(LSS)S),1*U(U,U(U,U,U),U)><L,C(C1(C1(U)))><L,U><L,A><L,C(U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (5, True, False)
                (\ @ b1
                   (w :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                   (w1 :: GHC.Base.String
                          -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                          -> Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b1)
                   (w2 :: Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b1)
                   (w3 :: GHC.Base.String
                          -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                          -> Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b1)
                   (w4 :: Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b1) ->
                 case w of ww { Text.Parsec.Prim.State ww1 ww2 ww3 ->
                 case ww2 of ww4 { Text.Parsec.Pos.SourcePos ww5 ww6 ww7 ->
                 Lang.Huginn.Parser.$wvar @ b1 ww1 ww5 ww6 ww7 ww3 w1 w2 w4 } }) -}
73ff44225b66627fe60b1ca3c5868219
  word :: Text.Parsec.String.Parser GHC.Base.String
  {- Unfolding: (case Lang.Huginn.Parser.lexer of wild { Text.Parsec.Token.TokenParser ds ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ds26 ds27 ds28 ->
                 ds14
                   @ [GHC.Types.Char]
                   Lang.Huginn.Parser.word1
                     `cast`
                   (Sym (Text.Parsec.Prim.N:ParsecT[0]
                             <[GHC.Types.Char]>_R
                             <()>_R
                             <Data.Functor.Identity.Identity>_R
                             <[GHC.Types.Char]>_R)) }) -}
7ee075162725a91e6a802318078dad8b
  word1 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> ([GHC.Types.Char]
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> ([GHC.Types.Char]
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Arity: 5,
     Unfolding: (\ @ b
                   (w1 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                   (w2 :: [GHC.Types.Char]
                          -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                          -> Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b)
                   (w3 :: Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b)
                   (w4 :: [GHC.Types.Char]
                          -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                          -> Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b)
                   (w5 :: Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b) ->
                 Text.Parsec.Prim.$w$cmany
                   @ [GHC.Types.Char]
                   @ ()
                   @ Data.Functor.Identity.Identity
                   @ GHC.Types.Char
                   Lang.Huginn.Parser.word2
                     `cast`
                   (Sym (Text.Parsec.Prim.N:ParsecT[0]
                             <GHC.Base.String>_R
                             <()>_R
                             <Data.Functor.Identity.Identity>_R
                             <GHC.Types.Char>_R))
                   @ b
                   w1
                   w2
                   w3
                   w4) -}
e66cc4d71a79d2f5117fb3eb6368bdb2
  word2 ::
    Text.Parsec.Prim.State GHC.Base.String ()
    -> (GHC.Types.Char
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (GHC.Types.Char
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Arity: 5,
     Strictness: <S(LS(LSS)S),1*U(U,U(U,U,U),U)><L,C(C1(C1(U)))><L,A><L,A><L,C(U)>,
     Unfolding: InlineRule (5, True, False)
                (\ @ b
                   (w2 :: Text.Parsec.Prim.State GHC.Base.String ())
                   (w3 :: GHC.Types.Char
                          -> Text.Parsec.Prim.State GHC.Base.String ()
                          -> Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b)
                   (w4 :: Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b)
                   (w5 :: GHC.Types.Char
                          -> Text.Parsec.Prim.State GHC.Base.String ()
                          -> Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b)
                   (w6 :: Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b) ->
                 case w2 of ww { Text.Parsec.Prim.State ww1 ww2 ww3 ->
                 case ww2 of ww4 { Text.Parsec.Pos.SourcePos ww5 ww6 ww7 ->
                 Text.Parsec.Char.$wnoneOf
                   @ GHC.Base.String
                   @ Data.Functor.Identity.Identity
                   @ ()
                   (Lang.Huginn.Parser.$s$fStream[]mtok @ GHC.Types.Char)
                   Lang.Huginn.Parser.word_w1
                   @ b
                   ww1
                   ww5
                   ww6
                   ww7
                   ww3
                   w3
                   w6 } }) -}
eac6ce52e4baf41450712d92c9be7144
  word_w1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   " +-?<>\t\n\
                   \,;()[]{}*^%&$#@!/|'\""#) -}
0049c33d18c87259832f10e58822fa52
  ws ::
    Text.Parsec.Prim.ParsecT
      GHC.Base.String () Data.Functor.Identity.Identity ()
  {- Unfolding: (case Lang.Huginn.Parser.lexer of wild { Text.Parsec.Token.TokenParser ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ds26 ds27 ds28 ds29 ->
                 ds16 }) -}
"SPEC/Lang.Huginn.Parser $fStream[]mtok @ Identity _" [ALWAYS] forall @ tok
                                                                      ($dMonad :: GHC.Base.Monad
                                                                                    Data.Functor.Identity.Identity)
  Text.Parsec.Prim.$fStream[]mtok @ Data.Functor.Identity.Identity
                                  @ tok
                                  $dMonad
  = Lang.Huginn.Parser.$s$fStream[]mtok @ tok
"SPEC/Lang.Huginn.Parser $fStream[]mtok_$cp1Stream @ Identity _" [ALWAYS] forall @ tok
                                                                                 ($dMonad :: GHC.Base.Monad
                                                                                               Data.Functor.Identity.Identity)
  Text.Parsec.Prim.$fStream[]mtok_$cp1Stream @ Data.Functor.Identity.Identity
                                             @ tok
                                             $dMonad
  = Lang.Huginn.Parser.$s$fStream[]mtok_$s$fStream[]mtok_$cp1Stream
      @ tok
"SPEC/Lang.Huginn.Parser $fStream[]mtok_$cuncons @ Identity _" [ALWAYS] forall @ tok
                                                                               ($dMonad :: GHC.Base.Monad
                                                                                             Data.Functor.Identity.Identity)
  Text.Parsec.Prim.$fStream[]mtok_$cuncons @ Data.Functor.Identity.Identity
                                           @ tok
                                           $dMonad
  = Lang.Huginn.Parser.$s$fStream[]mtok_$s$fStream[]mtok_$cuncons
      @ tok
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

