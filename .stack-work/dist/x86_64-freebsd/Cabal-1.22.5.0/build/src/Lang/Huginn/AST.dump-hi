
==================== FINAL INTERFACE ====================
2016-12-20 11:17:51.316059 UTC

interface hugin_IqzXpp8LztLLTlnmoPtP9a:Lang.Huginn.AST 7103
  interface hash: f1c269160624fd2e6c3eca3dc9c7da98
  ABI hash: 7f6fda1d887703f602a1de91a2651865
  export-list hash: c987d63c9651ff78892aa6d1c469de01
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 01aaf7170f4ae493141e76ad800c78f1
  sig of: Nothing
  used TH splices: False
  where
exports:
  Lang.Huginn.AST.Error{Lang.Huginn.AST.DivByZero Lang.Huginn.AST.NaN Lang.Huginn.AST.Parse Lang.Huginn.AST.Unbound Lang.Huginn.AST.Uncomparable Lang.Huginn.AST.Unimplemented Lang.Huginn.AST.Unsupported}
  Lang.Huginn.AST.Expr{Lang.Huginn.AST.Arr Lang.Huginn.AST.Bl Lang.Huginn.AST.Bop Lang.Huginn.AST.Closure Lang.Huginn.AST.Const Lang.Huginn.AST.Eadd Lang.Huginn.AST.Ediv Lang.Huginn.AST.Eeq Lang.Huginn.AST.Egt Lang.Huginn.AST.Egte Lang.Huginn.AST.Elt Lang.Huginn.AST.Elte Lang.Huginn.AST.Emul Lang.Huginn.AST.Epow Lang.Huginn.AST.Err Lang.Huginn.AST.Esub Lang.Huginn.AST.If Lang.Huginn.AST.Let Lang.Huginn.AST.Num Lang.Huginn.AST.Str Lang.Huginn.AST.Uop Lang.Huginn.AST.Var}
  Lang.Huginn.AST.Operant{Lang.Huginn.AST.Add Lang.Huginn.AST.Div Lang.Huginn.AST.EQUALS Lang.Huginn.AST.Error Lang.Huginn.AST.Mul Lang.Huginn.AST.POW Lang.Huginn.AST.Sub}
module dependencies:
package dependencies: base-4.8.2.0* ghc-prim-0.4.0.0
                      integer-gmp-1.0.0.0
orphans: base-4.8.2.0:GHC.Base base-4.8.2.0:GHC.Float
family instance modules: base-4.8.2.0:Control.Applicative
                         base-4.8.2.0:Data.Either base-4.8.2.0:Data.Monoid
                         base-4.8.2.0:Data.Type.Equality base-4.8.2.0:GHC.Generics
import  -/  base-4.8.2.0:GHC.Base 1db77db5dae73d8c424c85b09fbadb89
import  -/  base-4.8.2.0:GHC.Read b423b4506a014855edbd329b567629f3
import  -/  base-4.8.2.0:GHC.Show 0e1d8380a8fb0cfb07ebeda3b70cbf38
import  -/  base-4.8.2.0:Prelude 694dcaf039efe62df1c44834e2dbd2fb
import  -/  base-4.8.2.0:Text.ParserCombinators.ReadPrec 2590e0e0a57a86ac7c62727f4d868dd2
import  -/  base-4.8.2.0:Text.Read.Lex 724ca44ddd38ddc5f47a501d62736c26
import  -/  ghc-prim-0.4.0.0:GHC.Classes e1f4ff80f7b5262008a595d29986fb18
6d7b5a3b375f91cc881bc84666462f1d
  $fReadError :: GHC.Read.Read Lang.Huginn.AST.Error
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Lang.Huginn.AST.Error
                  Lang.Huginn.AST.$fReadError_$s$dmreadsPrec
                  Lang.Huginn.AST.$fReadError_$sreadListDefault
                  Lang.Huginn.AST.$fReadError_$creadPrec
                  Lang.Huginn.AST.$fReadError_$creadListPrec -}
6d7b5a3b375f91cc881bc84666462f1d
  $fReadError1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([Lang.Huginn.AST.Error] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [Lang.Huginn.AST.Error]
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ Lang.Huginn.AST.Error
                   Lang.Huginn.AST.$fReadError2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <Lang.Huginn.AST.Error>_R))
                   @ b
                   eta1) -}
6d7b5a3b375f91cc881bc84666462f1d
  $fReadError10 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec Lang.Huginn.AST.Error)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec Lang.Huginn.AST.Error)
                   Lang.Huginn.AST.$fReadError11
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec
                           Lang.Huginn.AST.Error))) -}
6d7b5a3b375f91cc881bc84666462f1d
  $fReadError11 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec Lang.Huginn.AST.Error)
  {- Strictness: m,
     Unfolding: ((Lang.Huginn.AST.$fReadError13,
                  Lang.Huginn.AST.$fReadError12
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <Lang.Huginn.AST.Error>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <Lang.Huginn.AST.Error>_R))))) -}
6d7b5a3b375f91cc881bc84666462f1d
  $fReadError12 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (Lang.Huginn.AST.Error -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: Lang.Huginn.AST.Error -> Text.ParserCombinators.ReadP.P b ->
                 eta Lang.Huginn.AST.Unsupported) -}
38f26d8087558303ec516cb2ad457474
  $fReadError13 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Unsupported"#) -}
6d7b5a3b375f91cc881bc84666462f1d
  $fReadError14 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec Lang.Huginn.AST.Error)
  {- Strictness: m,
     Unfolding: ((Lang.Huginn.AST.$fReadError16,
                  Lang.Huginn.AST.$fReadError15
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <Lang.Huginn.AST.Error>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <Lang.Huginn.AST.Error>_R))))) -}
6d7b5a3b375f91cc881bc84666462f1d
  $fReadError15 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (Lang.Huginn.AST.Error -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: Lang.Huginn.AST.Error -> Text.ParserCombinators.ReadP.P b ->
                 eta Lang.Huginn.AST.Uncomparable) -}
eb8818b9ae667c5cbaa34c178e378727
  $fReadError16 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Uncomparable"#) -}
6d7b5a3b375f91cc881bc84666462f1d
  $fReadError17 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec Lang.Huginn.AST.Error)
  {- Strictness: m,
     Unfolding: ((Lang.Huginn.AST.$fReadError19,
                  Lang.Huginn.AST.$fReadError18
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <Lang.Huginn.AST.Error>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <Lang.Huginn.AST.Error>_R))))) -}
6d7b5a3b375f91cc881bc84666462f1d
  $fReadError18 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (Lang.Huginn.AST.Error -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: Lang.Huginn.AST.Error -> Text.ParserCombinators.ReadP.P b ->
                 eta Lang.Huginn.AST.Parse) -}
30652a184adc808d4fcaf427dc22c179
  $fReadError19 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Parse"#) -}
6d7b5a3b375f91cc881bc84666462f1d
  $fReadError2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP Lang.Huginn.AST.Error
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ Lang.Huginn.AST.Error
                   Lang.Huginn.AST.$fReadError3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <Lang.Huginn.AST.Error>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <Lang.Huginn.AST.Error>_R)))) -}
6d7b5a3b375f91cc881bc84666462f1d
  $fReadError20 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec Lang.Huginn.AST.Error)
  {- Strictness: m,
     Unfolding: ((Lang.Huginn.AST.$fReadError22,
                  Lang.Huginn.AST.$fReadError21
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <Lang.Huginn.AST.Error>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <Lang.Huginn.AST.Error>_R))))) -}
6d7b5a3b375f91cc881bc84666462f1d
  $fReadError21 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (Lang.Huginn.AST.Error -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: Lang.Huginn.AST.Error -> Text.ParserCombinators.ReadP.P b ->
                 eta Lang.Huginn.AST.DivByZero) -}
b273febb370bea0210a76d0a0e400565
  $fReadError22 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "DivByZero"#) -}
6d7b5a3b375f91cc881bc84666462f1d
  $fReadError23 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec Lang.Huginn.AST.Error)
  {- Strictness: m,
     Unfolding: ((Lang.Huginn.AST.$fReadError25,
                  Lang.Huginn.AST.$fReadError24
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <Lang.Huginn.AST.Error>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <Lang.Huginn.AST.Error>_R))))) -}
6d7b5a3b375f91cc881bc84666462f1d
  $fReadError24 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (Lang.Huginn.AST.Error -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: Lang.Huginn.AST.Error -> Text.ParserCombinators.ReadP.P b ->
                 eta Lang.Huginn.AST.NaN) -}
1b3c2e7b797b431f8a3ccc3080befe7f
  $fReadError25 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NaN"#) -}
6d7b5a3b375f91cc881bc84666462f1d
  $fReadError3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (Lang.Huginn.AST.Error -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U(U)><L,U>,
     Unfolding: (\ n :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: Lang.Huginn.AST.Error -> Text.ParserCombinators.ReadP.P b ->
                 Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                   @ b
                   (GHC.Read.choose2
                      @ Lang.Huginn.AST.Error
                      Lang.Huginn.AST.$fReadError6
                      n
                      @ b
                      eta)
                   (case n of wild { GHC.Types.I# x ->
                    let {
                      a4 :: Text.ParserCombinators.ReadP.P b
                      = case GHC.Prim.tagToEnum#
                               @ GHC.Types.Bool
                               (GHC.Prim.<=# x 10) of wild2 {
                          GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                          GHC.Types.True
                          -> let {
                               lvl78 :: Text.ParserCombinators.ReadP.P b
                               = let {
                                   lvl79 :: Text.ParserCombinators.ReadP.P b
                                   = GHC.Read.$wa19
                                       @ b
                                       (\ a7 :: GHC.Base.String ->
                                        eta (Lang.Huginn.AST.Unimplemented a7))
                                 } in
                                 Text.Read.Lex.expect2
                                   @ b
                                   (\ a98 :: Text.Read.Lex.Lexeme ->
                                    case a98 of wild1 {
                                      DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                                      Text.Read.Lex.Ident a5
                                      -> case GHC.Base.eqString
                                                a5
                                                Lang.Huginn.AST.$fReadError5 of wild3 {
                                           GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                                           GHC.Types.True -> lvl79 } })
                             } in
                             let {
                               k :: () -> Text.ParserCombinators.ReadP.P b
                                 {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                                    Unfolding: InlineRule (1, True, True) (\ w2 :: () -> lvl78) -}
                               = \ w2 :: () -> lvl78
                             } in
                             Text.ParserCombinators.ReadP.Look
                               @ b
                               (\ a98 :: GHC.Base.String ->
                                (Text.ParserCombinators.ReadP.skipSpaces_skip a98)
                                  `cast`
                                (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <()>_R)
                                  @ b
                                  k) }
                    } in
                    case GHC.Prim.tagToEnum#
                           @ GHC.Types.Bool
                           (GHC.Prim.<=# x 10) of wild2 {
                      GHC.Types.False
                      -> Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                           @ b
                           (Text.ParserCombinators.ReadP.Fail @ b)
                           a4
                      GHC.Types.True
                      -> let {
                           lvl78 :: Text.ParserCombinators.ReadP.P b
                           = let {
                               lvl79 :: Text.ParserCombinators.ReadP.P b
                               = GHC.Read.$wa19
                                   @ b
                                   (\ a7 :: GHC.Base.String -> eta (Lang.Huginn.AST.Unbound a7))
                             } in
                             Text.Read.Lex.expect2
                               @ b
                               (\ a98 :: Text.Read.Lex.Lexeme ->
                                case a98 of wild1 {
                                  DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                                  Text.Read.Lex.Ident a5
                                  -> case GHC.Base.eqString
                                            a5
                                            Lang.Huginn.AST.$fReadError4 of wild3 {
                                       GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                                       GHC.Types.True -> lvl79 } })
                         } in
                         let {
                           k :: () -> Text.ParserCombinators.ReadP.P b
                             {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                                Unfolding: InlineRule (1, True, True) (\ w2 :: () -> lvl78) -}
                           = \ w2 :: () -> lvl78
                         } in
                         Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                           @ b
                           (Text.ParserCombinators.ReadP.Look
                              @ b
                              (\ a98 :: GHC.Base.String ->
                               (Text.ParserCombinators.ReadP.skipSpaces_skip a98)
                                 `cast`
                               (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <()>_R)
                                 @ b
                                 k))
                           a4 } })) -}
ae2434bbf32cc5504034acc7f4a0e110
  $fReadError4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Unbound"#) -}
b851311d08c45938528d7310603aabab
  $fReadError5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Unimplemented"#) -}
6d7b5a3b375f91cc881bc84666462f1d
  $fReadError6 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec Lang.Huginn.AST.Error)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec Lang.Huginn.AST.Error)
                   Lang.Huginn.AST.$fReadError23
                   Lang.Huginn.AST.$fReadError7) -}
6d7b5a3b375f91cc881bc84666462f1d
  $fReadError7 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec Lang.Huginn.AST.Error)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec Lang.Huginn.AST.Error)
                   Lang.Huginn.AST.$fReadError20
                   Lang.Huginn.AST.$fReadError8) -}
6d7b5a3b375f91cc881bc84666462f1d
  $fReadError8 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec Lang.Huginn.AST.Error)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec Lang.Huginn.AST.Error)
                   Lang.Huginn.AST.$fReadError17
                   Lang.Huginn.AST.$fReadError9) -}
6d7b5a3b375f91cc881bc84666462f1d
  $fReadError9 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec Lang.Huginn.AST.Error)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec Lang.Huginn.AST.Error)
                   Lang.Huginn.AST.$fReadError14
                   Lang.Huginn.AST.$fReadError10) -}
6d7b5a3b375f91cc881bc84666462f1d
  $fReadError_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [Lang.Huginn.AST.Error]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                Lang.Huginn.AST.$fReadError1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[Lang.Huginn.AST.Error]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[Lang.Huginn.AST.Error]>_R))) -}
6d7b5a3b375f91cc881bc84666462f1d
  $fReadError_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec Lang.Huginn.AST.Error
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                Lang.Huginn.AST.$fReadError2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <Lang.Huginn.AST.Error>_R)) -}
6d7b5a3b375f91cc881bc84666462f1d
  $fReadError_$s$dmreadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS Lang.Huginn.AST.Error
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ Lang.Huginn.AST.Error
                   Lang.Huginn.AST.$fReadError_$creadPrec
                   eta) -}
6d7b5a3b375f91cc881bc84666462f1d
  $fReadError_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS [Lang.Huginn.AST.Error]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [Lang.Huginn.AST.Error]
                   ((Lang.Huginn.AST.$fReadError_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[Lang.Huginn.AST.Error]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                         <[Lang.Huginn.AST.Error]>_R)
                      @ [Lang.Huginn.AST.Error]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [Lang.Huginn.AST.Error]))) -}
9bf6ed4e0c9b2ea4cfd44e502502934e
  $fReadExpr :: GHC.Read.Read Lang.Huginn.AST.Expr
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Lang.Huginn.AST.Expr
                  Lang.Huginn.AST.$fReadExpr_$creadsPrec
                  Lang.Huginn.AST.$fReadExpr_$creadList
                  Lang.Huginn.AST.$fReadExpr_$creadPrec
                  Lang.Huginn.AST.$fReadExpr_$creadListPrec -}
9bf6ed4e0c9b2ea4cfd44e502502934e
  $fReadExpr1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([Lang.Huginn.AST.Expr] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, True)
                (\ w :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   w1 :: [Lang.Huginn.AST.Expr] -> Text.ParserCombinators.ReadP.P b ->
                 Lang.Huginn.AST.$wa @ b w1) -}
9bf6ed4e0c9b2ea4cfd44e502502934e
  $fReadExpr2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP Lang.Huginn.AST.Expr
  {- Arity: 1 -}
9bf6ed4e0c9b2ea4cfd44e502502934e
  $fReadExpr_$creadList ::
    Text.ParserCombinators.ReadP.ReadS [Lang.Huginn.AST.Expr]
  {- Arity: 1 -}
9bf6ed4e0c9b2ea4cfd44e502502934e
  $fReadExpr_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [Lang.Huginn.AST.Expr]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                Lang.Huginn.AST.$fReadExpr1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[Lang.Huginn.AST.Expr]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[Lang.Huginn.AST.Expr]>_R))) -}
9bf6ed4e0c9b2ea4cfd44e502502934e
  $fReadExpr_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec Lang.Huginn.AST.Expr
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                Lang.Huginn.AST.$fReadExpr2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <Lang.Huginn.AST.Expr>_R)) -}
9bf6ed4e0c9b2ea4cfd44e502502934e
  $fReadExpr_$creadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS Lang.Huginn.AST.Expr
  {- Arity: 1, Strictness: <L,U> -}
44e352eb97efd59e07e178ed7274db83
  $fReadOperant :: GHC.Read.Read Lang.Huginn.AST.Operant
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Lang.Huginn.AST.Operant
                  Lang.Huginn.AST.$fReadOperant_$s$dmreadsPrec
                  Lang.Huginn.AST.$fReadOperant_$sreadListDefault
                  Lang.Huginn.AST.$fReadOperant_$creadPrec
                  Lang.Huginn.AST.$fReadOperant_$creadListPrec -}
44e352eb97efd59e07e178ed7274db83
  $fReadOperant1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([Lang.Huginn.AST.Operant] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [Lang.Huginn.AST.Operant]
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ Lang.Huginn.AST.Operant
                   Lang.Huginn.AST.$fReadOperant2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <Lang.Huginn.AST.Operant>_R))
                   @ b
                   eta1) -}
44e352eb97efd59e07e178ed7274db83
  $fReadOperant10 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec Lang.Huginn.AST.Operant)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec Lang.Huginn.AST.Operant)
                   Lang.Huginn.AST.$fReadOperant11
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec
                           Lang.Huginn.AST.Operant))) -}
44e352eb97efd59e07e178ed7274db83
  $fReadOperant11 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec Lang.Huginn.AST.Operant)
  {- Strictness: m,
     Unfolding: ((Lang.Huginn.AST.$fReadOperant13,
                  Lang.Huginn.AST.$fReadOperant12
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <Lang.Huginn.AST.Operant>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <Lang.Huginn.AST.Operant>_R))))) -}
44e352eb97efd59e07e178ed7274db83
  $fReadOperant12 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (Lang.Huginn.AST.Operant -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: Lang.Huginn.AST.Operant
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta Lang.Huginn.AST.POW) -}
d52361655388c913f38f317311782e36
  $fReadOperant13 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "POW"#) -}
44e352eb97efd59e07e178ed7274db83
  $fReadOperant14 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec Lang.Huginn.AST.Operant)
  {- Strictness: m,
     Unfolding: ((Lang.Huginn.AST.$fReadOperant16,
                  Lang.Huginn.AST.$fReadOperant15
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <Lang.Huginn.AST.Operant>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <Lang.Huginn.AST.Operant>_R))))) -}
44e352eb97efd59e07e178ed7274db83
  $fReadOperant15 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (Lang.Huginn.AST.Operant -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: Lang.Huginn.AST.Operant
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta Lang.Huginn.AST.EQUALS) -}
e366ffe3b7e85eaf3962b26f397b5747
  $fReadOperant16 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "EQUALS"#) -}
44e352eb97efd59e07e178ed7274db83
  $fReadOperant17 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec Lang.Huginn.AST.Operant)
  {- Strictness: m,
     Unfolding: ((Lang.Huginn.AST.$fReadOperant19,
                  Lang.Huginn.AST.$fReadOperant18
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <Lang.Huginn.AST.Operant>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <Lang.Huginn.AST.Operant>_R))))) -}
44e352eb97efd59e07e178ed7274db83
  $fReadOperant18 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (Lang.Huginn.AST.Operant -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: Lang.Huginn.AST.Operant
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta Lang.Huginn.AST.Sub) -}
66ca00b7df106a7f7f9ac924c8b2f86b
  $fReadOperant19 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Sub"#) -}
44e352eb97efd59e07e178ed7274db83
  $fReadOperant2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP Lang.Huginn.AST.Operant
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ Lang.Huginn.AST.Operant
                   Lang.Huginn.AST.$fReadOperant3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <Lang.Huginn.AST.Operant>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <Lang.Huginn.AST.Operant>_R)))) -}
44e352eb97efd59e07e178ed7274db83
  $fReadOperant20 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec Lang.Huginn.AST.Operant)
  {- Strictness: m,
     Unfolding: ((Lang.Huginn.AST.$fReadOperant22,
                  Lang.Huginn.AST.$fReadOperant21
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <Lang.Huginn.AST.Operant>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <Lang.Huginn.AST.Operant>_R))))) -}
44e352eb97efd59e07e178ed7274db83
  $fReadOperant21 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (Lang.Huginn.AST.Operant -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: Lang.Huginn.AST.Operant
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta Lang.Huginn.AST.Add) -}
abdce3ed9558b2fad24fc70e40aa98f2
  $fReadOperant22 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Add"#) -}
44e352eb97efd59e07e178ed7274db83
  $fReadOperant23 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec Lang.Huginn.AST.Operant)
  {- Strictness: m,
     Unfolding: ((Lang.Huginn.AST.$fReadOperant25,
                  Lang.Huginn.AST.$fReadOperant24
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <Lang.Huginn.AST.Operant>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <Lang.Huginn.AST.Operant>_R))))) -}
44e352eb97efd59e07e178ed7274db83
  $fReadOperant24 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (Lang.Huginn.AST.Operant -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: Lang.Huginn.AST.Operant
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta Lang.Huginn.AST.Div) -}
5d8f1d67aec5d76ce21b9e1122814209
  $fReadOperant25 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Div"#) -}
44e352eb97efd59e07e178ed7274db83
  $fReadOperant26 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec Lang.Huginn.AST.Operant)
  {- Strictness: m,
     Unfolding: ((Lang.Huginn.AST.$fReadOperant28,
                  Lang.Huginn.AST.$fReadOperant27
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <Lang.Huginn.AST.Operant>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <Lang.Huginn.AST.Operant>_R))))) -}
44e352eb97efd59e07e178ed7274db83
  $fReadOperant27 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (Lang.Huginn.AST.Operant -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: Lang.Huginn.AST.Operant
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta Lang.Huginn.AST.Mul) -}
0790ecd594ea5e8843026011aa83c331
  $fReadOperant28 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Mul"#) -}
44e352eb97efd59e07e178ed7274db83
  $fReadOperant3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (Lang.Huginn.AST.Operant -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U(U)><L,U>,
     Unfolding: (\ n :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: Lang.Huginn.AST.Operant
                          -> Text.ParserCombinators.ReadP.P b ->
                 Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                   @ b
                   (GHC.Read.choose2
                      @ Lang.Huginn.AST.Operant
                      Lang.Huginn.AST.$fReadOperant5
                      n
                      @ b
                      eta)
                   (case n of wild { GHC.Types.I# x ->
                    case GHC.Prim.tagToEnum#
                           @ GHC.Types.Bool
                           (GHC.Prim.<=# x 10) of wild2 {
                      GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                      GHC.Types.True
                      -> let {
                           lvl78 :: Text.ParserCombinators.ReadP.P b
                           = let {
                               lvl79 :: Text.ParserCombinators.ReadP.P b
                               = GHC.Read.$wa19
                                   @ b
                                   (\ a7 :: GHC.Base.String -> eta (Lang.Huginn.AST.Error a7))
                             } in
                             Text.Read.Lex.expect2
                               @ b
                               (\ a98 :: Text.Read.Lex.Lexeme ->
                                case a98 of wild1 {
                                  DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                                  Text.Read.Lex.Ident a4
                                  -> case GHC.Base.eqString
                                            a4
                                            Lang.Huginn.AST.$fReadOperant4 of wild3 {
                                       GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                                       GHC.Types.True -> lvl79 } })
                         } in
                         let {
                           k :: () -> Text.ParserCombinators.ReadP.P b
                             {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                                Unfolding: InlineRule (1, True, True) (\ w2 :: () -> lvl78) -}
                           = \ w2 :: () -> lvl78
                         } in
                         Text.ParserCombinators.ReadP.Look
                           @ b
                           (\ a98 :: GHC.Base.String ->
                            (Text.ParserCombinators.ReadP.skipSpaces_skip a98)
                              `cast`
                            (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <()>_R)
                              @ b
                              k) } })) -}
6a24b8c6f616aec2d773a9acf3f3256f
  $fReadOperant4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Error"#) -}
44e352eb97efd59e07e178ed7274db83
  $fReadOperant5 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec Lang.Huginn.AST.Operant)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec Lang.Huginn.AST.Operant)
                   Lang.Huginn.AST.$fReadOperant26
                   Lang.Huginn.AST.$fReadOperant6) -}
44e352eb97efd59e07e178ed7274db83
  $fReadOperant6 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec Lang.Huginn.AST.Operant)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec Lang.Huginn.AST.Operant)
                   Lang.Huginn.AST.$fReadOperant23
                   Lang.Huginn.AST.$fReadOperant7) -}
44e352eb97efd59e07e178ed7274db83
  $fReadOperant7 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec Lang.Huginn.AST.Operant)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec Lang.Huginn.AST.Operant)
                   Lang.Huginn.AST.$fReadOperant20
                   Lang.Huginn.AST.$fReadOperant8) -}
44e352eb97efd59e07e178ed7274db83
  $fReadOperant8 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec Lang.Huginn.AST.Operant)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec Lang.Huginn.AST.Operant)
                   Lang.Huginn.AST.$fReadOperant17
                   Lang.Huginn.AST.$fReadOperant9) -}
44e352eb97efd59e07e178ed7274db83
  $fReadOperant9 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec Lang.Huginn.AST.Operant)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec Lang.Huginn.AST.Operant)
                   Lang.Huginn.AST.$fReadOperant14
                   Lang.Huginn.AST.$fReadOperant10) -}
44e352eb97efd59e07e178ed7274db83
  $fReadOperant_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [Lang.Huginn.AST.Operant]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                Lang.Huginn.AST.$fReadOperant1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[Lang.Huginn.AST.Operant]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[Lang.Huginn.AST.Operant]>_R))) -}
44e352eb97efd59e07e178ed7274db83
  $fReadOperant_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec Lang.Huginn.AST.Operant
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                Lang.Huginn.AST.$fReadOperant2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <Lang.Huginn.AST.Operant>_R)) -}
44e352eb97efd59e07e178ed7274db83
  $fReadOperant_$s$dmreadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS Lang.Huginn.AST.Operant
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ Lang.Huginn.AST.Operant
                   Lang.Huginn.AST.$fReadOperant_$creadPrec
                   eta) -}
44e352eb97efd59e07e178ed7274db83
  $fReadOperant_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS [Lang.Huginn.AST.Operant]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [Lang.Huginn.AST.Operant]
                   ((Lang.Huginn.AST.$fReadOperant_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[Lang.Huginn.AST.Operant]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                         <[Lang.Huginn.AST.Operant]>_R)
                      @ [Lang.Huginn.AST.Operant]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [Lang.Huginn.AST.Operant]))) -}
6d7b5a3b375f91cc881bc84666462f1d
  $fShowError :: GHC.Show.Show Lang.Huginn.AST.Error
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Lang.Huginn.AST.Error
                  Lang.Huginn.AST.$fShowError_$cshowsPrec
                  Lang.Huginn.AST.$fShowError_$cshow
                  Lang.Huginn.AST.$fShowError_$cshowList -}
6d7b5a3b375f91cc881bc84666462f1d
  $fShowError1 :: Lang.Huginn.AST.Error -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (Lang.Huginn.AST.$fShowError_$cshowsPrec
                   Lang.Huginn.AST.$fShowError2) -}
10480d1e58a8d3d8827ada0481b600bc
  $fShowError2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0) -}
59cf797af36c8eb0cf4faa9485b3c422
  $fShowError3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Unimplemented "#) -}
94ebab18f5f94f559d5bd3b6565ddb83
  $fShowError4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Unbound "#) -}
6d7b5a3b375f91cc881bc84666462f1d
  $fShowError_$cshow :: Lang.Huginn.AST.Error -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: Lang.Huginn.AST.Error ->
                 Lang.Huginn.AST.$fShowError_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
6d7b5a3b375f91cc881bc84666462f1d
  $fShowError_$cshowList :: [Lang.Huginn.AST.Error] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Lang.Huginn.AST.Error
                   Lang.Huginn.AST.$fShowError1) -}
6d7b5a3b375f91cc881bc84666462f1d
  $fShowError_$cshowsPrec ::
    GHC.Types.Int -> Lang.Huginn.AST.Error -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ ds :: GHC.Types.Int
                   ds1 :: Lang.Huginn.AST.Error
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   Lang.Huginn.AST.NaN
                   -> GHC.Base.++ @ GHC.Types.Char Lang.Huginn.AST.$fReadError25 eta
                   Lang.Huginn.AST.DivByZero
                   -> GHC.Base.++ @ GHC.Types.Char Lang.Huginn.AST.$fReadError22 eta
                   Lang.Huginn.AST.Unbound b1
                   -> case ds of wild1 { GHC.Types.I# x ->
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11) of wild2 {
                        GHC.Types.False
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             Lang.Huginn.AST.$fShowError4
                             (GHC.Types.:
                                @ GHC.Types.Char
                                GHC.Show.shows6
                                (GHC.Show.showLitString
                                   b1
                                   (GHC.Types.: @ GHC.Types.Char GHC.Show.shows6 eta)))
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Lang.Huginn.AST.$fShowError4
                                (GHC.Types.:
                                   @ GHC.Types.Char
                                   GHC.Show.shows6
                                   (GHC.Show.showLitString
                                      b1
                                      (GHC.Types.:
                                         @ GHC.Types.Char
                                         GHC.Show.shows6
                                         (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 eta))))) } }
                   Lang.Huginn.AST.Parse
                   -> GHC.Base.++ @ GHC.Types.Char Lang.Huginn.AST.$fReadError19 eta
                   Lang.Huginn.AST.Uncomparable
                   -> GHC.Base.++ @ GHC.Types.Char Lang.Huginn.AST.$fReadError16 eta
                   Lang.Huginn.AST.Unsupported
                   -> GHC.Base.++ @ GHC.Types.Char Lang.Huginn.AST.$fReadError13 eta
                   Lang.Huginn.AST.Unimplemented b1
                   -> case ds of wild1 { GHC.Types.I# x ->
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11) of wild2 {
                        GHC.Types.False
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             Lang.Huginn.AST.$fShowError3
                             (GHC.Types.:
                                @ GHC.Types.Char
                                GHC.Show.shows6
                                (GHC.Show.showLitString
                                   b1
                                   (GHC.Types.: @ GHC.Types.Char GHC.Show.shows6 eta)))
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Lang.Huginn.AST.$fShowError3
                                (GHC.Types.:
                                   @ GHC.Types.Char
                                   GHC.Show.shows6
                                   (GHC.Show.showLitString
                                      b1
                                      (GHC.Types.:
                                         @ GHC.Types.Char
                                         GHC.Show.shows6
                                         (GHC.Types.:
                                            @ GHC.Types.Char
                                            GHC.Show.shows8
                                            eta))))) } } }) -}
9bf6ed4e0c9b2ea4cfd44e502502934e
  $fShowExpr :: GHC.Show.Show Lang.Huginn.AST.Expr
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Lang.Huginn.AST.Expr
                  Lang.Huginn.AST.$fShowExpr_$cshowsPrec
                  Lang.Huginn.AST.$fShowExpr_$cshow
                  Lang.Huginn.AST.$fShowExpr_$cshowList -}
9bf6ed4e0c9b2ea4cfd44e502502934e
  $fShowExpr1 :: Lang.Huginn.AST.Expr -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ w :: Lang.Huginn.AST.Expr ->
                 Lang.Huginn.AST.$w$cshowsPrec 0 w) -}
9bf6ed4e0c9b2ea4cfd44e502502934e
  $fShowExpr_$cshow :: Lang.Huginn.AST.Expr -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: Lang.Huginn.AST.Expr ->
                 Lang.Huginn.AST.$fShowExpr_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
9bf6ed4e0c9b2ea4cfd44e502502934e
  $fShowExpr_$cshowList :: [Lang.Huginn.AST.Expr] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Lang.Huginn.AST.Expr
                   Lang.Huginn.AST.$fShowExpr1) -}
9bf6ed4e0c9b2ea4cfd44e502502934e
  $fShowExpr_$cshowsPrec ::
    GHC.Types.Int -> Lang.Huginn.AST.Expr -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U(U)><S,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: GHC.Types.Int w1 :: Lang.Huginn.AST.Expr ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Lang.Huginn.AST.$w$cshowsPrec ww1 w1 }) -}
44e352eb97efd59e07e178ed7274db83
  $fShowOperant :: GHC.Show.Show Lang.Huginn.AST.Operant
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Lang.Huginn.AST.Operant
                  Lang.Huginn.AST.$fShowOperant_$cshowsPrec
                  Lang.Huginn.AST.$fShowOperant_$cshow
                  Lang.Huginn.AST.$fShowOperant_$cshowList -}
44e352eb97efd59e07e178ed7274db83
  $fShowOperant1 :: Lang.Huginn.AST.Operant -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (Lang.Huginn.AST.$fShowOperant_$cshowsPrec
                   Lang.Huginn.AST.$fShowError2) -}
ae1e085dc7a330419d4d471fdca11596
  $fShowOperant2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Error "#) -}
44e352eb97efd59e07e178ed7274db83
  $fShowOperant_$cshow :: Lang.Huginn.AST.Operant -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: Lang.Huginn.AST.Operant ->
                 Lang.Huginn.AST.$fShowOperant_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
44e352eb97efd59e07e178ed7274db83
  $fShowOperant_$cshowList ::
    [Lang.Huginn.AST.Operant] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Lang.Huginn.AST.Operant
                   Lang.Huginn.AST.$fShowOperant1) -}
44e352eb97efd59e07e178ed7274db83
  $fShowOperant_$cshowsPrec ::
    GHC.Types.Int -> Lang.Huginn.AST.Operant -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ ds :: GHC.Types.Int
                   ds1 :: Lang.Huginn.AST.Operant
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   Lang.Huginn.AST.Mul
                   -> GHC.Base.++ @ GHC.Types.Char Lang.Huginn.AST.$fReadOperant28 eta
                   Lang.Huginn.AST.Div
                   -> GHC.Base.++ @ GHC.Types.Char Lang.Huginn.AST.$fReadOperant25 eta
                   Lang.Huginn.AST.Add
                   -> GHC.Base.++ @ GHC.Types.Char Lang.Huginn.AST.$fReadOperant22 eta
                   Lang.Huginn.AST.Sub
                   -> GHC.Base.++ @ GHC.Types.Char Lang.Huginn.AST.$fReadOperant19 eta
                   Lang.Huginn.AST.EQUALS
                   -> GHC.Base.++ @ GHC.Types.Char Lang.Huginn.AST.$fReadOperant16 eta
                   Lang.Huginn.AST.POW
                   -> GHC.Base.++ @ GHC.Types.Char Lang.Huginn.AST.$fReadOperant13 eta
                   Lang.Huginn.AST.Error b1
                   -> case ds of wild1 { GHC.Types.I# x ->
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11) of wild2 {
                        GHC.Types.False
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             Lang.Huginn.AST.$fShowOperant2
                             (GHC.Types.:
                                @ GHC.Types.Char
                                GHC.Show.shows6
                                (GHC.Show.showLitString
                                   b1
                                   (GHC.Types.: @ GHC.Types.Char GHC.Show.shows6 eta)))
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Lang.Huginn.AST.$fShowOperant2
                                (GHC.Types.:
                                   @ GHC.Types.Char
                                   GHC.Show.shows6
                                   (GHC.Show.showLitString
                                      b1
                                      (GHC.Types.:
                                         @ GHC.Types.Char
                                         GHC.Show.shows6
                                         (GHC.Types.:
                                            @ GHC.Types.Char
                                            GHC.Show.shows8
                                            eta))))) } } }) -}
9bf6ed4e0c9b2ea4cfd44e502502934e
  $w$cshowsPrec ::
    GHC.Prim.Int# -> Lang.Huginn.AST.Expr -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <L,U><S,1*U>, Inline: [0] -}
9bf6ed4e0c9b2ea4cfd44e502502934e
  $wa ::
    ([Lang.Huginn.AST.Expr] -> Text.ParserCombinators.ReadP.P b)
    -> Text.ParserCombinators.ReadP.P b
  {- Arity: 1, Strictness: <L,C(U)>, Inline: [0] -}
6d7b5a3b375f91cc881bc84666462f1d
  data Error
    = NaN
    | DivByZero
    | Unbound GHC.Base.String
    | Parse
    | Uncomparable
    | Unsupported
    | Unimplemented GHC.Base.String
9bf6ed4e0c9b2ea4cfd44e502502934e
  data Expr
    = Uop (Lang.Huginn.AST.Operant, Lang.Huginn.AST.Expr)
    | Bop (Lang.Huginn.AST.Expr,
           Lang.Huginn.AST.Operant,
           Lang.Huginn.AST.Expr)
    | Num GHC.Types.Double
    | Const GHC.Types.Double
    | Str GHC.Base.String
    | Bl GHC.Types.Bool
    | If (Lang.Huginn.AST.Expr,
          Lang.Huginn.AST.Expr,
          Lang.Huginn.AST.Expr)
    | Var GHC.Base.String
    | Arr [Lang.Huginn.AST.Expr]
    | Closure Lang.Huginn.AST.Expr
    | Err Lang.Huginn.AST.Error
    | Eeq Lang.Huginn.AST.Expr Lang.Huginn.AST.Expr
    | Epow Lang.Huginn.AST.Expr Lang.Huginn.AST.Expr
    | Emul Lang.Huginn.AST.Expr Lang.Huginn.AST.Expr
    | Ediv Lang.Huginn.AST.Expr Lang.Huginn.AST.Expr
    | Eadd Lang.Huginn.AST.Expr Lang.Huginn.AST.Expr
    | Esub Lang.Huginn.AST.Expr Lang.Huginn.AST.Expr
    | Elt Lang.Huginn.AST.Expr Lang.Huginn.AST.Expr
    | Elte Lang.Huginn.AST.Expr Lang.Huginn.AST.Expr
    | Egt Lang.Huginn.AST.Expr Lang.Huginn.AST.Expr
    | Egte Lang.Huginn.AST.Expr Lang.Huginn.AST.Expr
    | Let GHC.Base.String Lang.Huginn.AST.Expr Lang.Huginn.AST.Expr
44e352eb97efd59e07e178ed7274db83
  data Operant
    = Mul | Div | Add | Sub | EQUALS | POW | Error GHC.Base.String
instance GHC.Read.Read [Lang.Huginn.AST.Error]
  = Lang.Huginn.AST.$fReadError
instance GHC.Read.Read [Lang.Huginn.AST.Expr]
  = Lang.Huginn.AST.$fReadExpr
instance GHC.Read.Read [Lang.Huginn.AST.Operant]
  = Lang.Huginn.AST.$fReadOperant
instance GHC.Show.Show [Lang.Huginn.AST.Error]
  = Lang.Huginn.AST.$fShowError
instance GHC.Show.Show [Lang.Huginn.AST.Expr]
  = Lang.Huginn.AST.$fShowExpr
instance GHC.Show.Show [Lang.Huginn.AST.Operant]
  = Lang.Huginn.AST.$fShowOperant
"SPEC/Lang.Huginn.AST $dmreadsPrec @ Error" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                        Lang.Huginn.AST.Error
  GHC.Read.$dmreadsPrec @ Lang.Huginn.AST.Error $dRead
  = Lang.Huginn.AST.$fReadError_$s$dmreadsPrec
"SPEC/Lang.Huginn.AST $dmreadsPrec @ Operant" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                          Lang.Huginn.AST.Operant
  GHC.Read.$dmreadsPrec @ Lang.Huginn.AST.Operant $dRead
  = Lang.Huginn.AST.$fReadOperant_$s$dmreadsPrec
"SPEC/Lang.Huginn.AST readListDefault @ Error" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                           Lang.Huginn.AST.Error
  GHC.Read.readListDefault @ Lang.Huginn.AST.Error $dRead
  = Lang.Huginn.AST.$fReadError_$sreadListDefault
"SPEC/Lang.Huginn.AST readListDefault @ Operant" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                             Lang.Huginn.AST.Operant
  GHC.Read.readListDefault @ Lang.Huginn.AST.Operant $dRead
  = Lang.Huginn.AST.$fReadOperant_$sreadListDefault
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

